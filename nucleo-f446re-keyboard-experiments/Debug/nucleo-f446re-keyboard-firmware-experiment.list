
nucleo-f446re-keyboard-firmware-experiment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b270  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800b440  0800b440  0001b440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b88c  0800b88c  00020330  2**0
                  CONTENTS
  4 .ARM          00000008  0800b88c  0800b88c  0001b88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b894  0800b894  00020330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b894  0800b894  0001b894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b898  0800b898  0001b898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000330  20000000  0800b89c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001260  20000330  0800bbcc  00020330  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001590  0800bbcc  00021590  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020330  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126bb  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e99  00000000  00000000  00032a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  000358b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  00036748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024985  00000000  00000000  000374a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012fb3  00000000  00000000  0005be25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd961  00000000  00000000  0006edd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013c739  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bf4  00000000  00000000  0013c78c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000330 	.word	0x20000330
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b428 	.word	0x0800b428

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000334 	.word	0x20000334
 800020c:	0800b428 	.word	0x0800b428

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern USBD_HandleTypeDef hUsbDeviceFS;

int _write(int file, char *ptr, int len)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	f04f 33ff 	mov.w	r3, #4294967295
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	4804      	ldr	r0, [pc, #16]	; (8000f14 <_write+0x28>)
 8000f04:	f003 fa2b 	bl	800435e <HAL_UART_Transmit>
	return len;
 8000f08:	687b      	ldr	r3, [r7, #4]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000034c 	.word	0x2000034c

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1e:	f000 fab9 	bl	8001494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f22:	f000 f819 	bl	8000f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f26:	f000 f8ad 	bl	8001084 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f2a:	f000 f881 	bl	8001030 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000f2e:	f006 fefd 	bl	8007d2c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
//  uint8_t buff[10] = "helloworld";
  float value = 3.1415f;
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <main+0x38>)
 8000f34:	607b      	str	r3, [r7, #4]

    /* USER CODE BEGIN 3 */

	  // floats not supported by default,
	  // add "-u_printf_float" flag under Project->Properties->C/C++ Build->Settings->MCU-GCC-Linker->Miscellaneous
	  printf("hello_world %f\r\n", value);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff fb26 	bl	8000588 <__aeabi_f2d>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	4804      	ldr	r0, [pc, #16]	; (8000f54 <main+0x3c>)
 8000f42:	f008 f9ad 	bl	80092a0 <iprintf>
//	  value++;
//	  UART4->DR = 0x04;
//	  HAL_UART_Transmit(&huart2, buff, 10, 100);
	  HAL_Delay(200);
 8000f46:	20c8      	movs	r0, #200	; 0xc8
 8000f48:	f000 fb16 	bl	8001578 <HAL_Delay>
	  printf("hello_world %f\r\n", value);
 8000f4c:	e7f3      	b.n	8000f36 <main+0x1e>
 8000f4e:	bf00      	nop
 8000f50:	40490e56 	.word	0x40490e56
 8000f54:	0800b440 	.word	0x0800b440

08000f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b094      	sub	sp, #80	; 0x50
 8000f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	2234      	movs	r2, #52	; 0x34
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f007 fd28 	bl	80089bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6c:	f107 0308 	add.w	r3, r7, #8
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	4b29      	ldr	r3, [pc, #164]	; (8001028 <SystemClock_Config+0xd0>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	4a28      	ldr	r2, [pc, #160]	; (8001028 <SystemClock_Config+0xd0>)
 8000f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8c:	4b26      	ldr	r3, [pc, #152]	; (8001028 <SystemClock_Config+0xd0>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f98:	2300      	movs	r3, #0
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	4b23      	ldr	r3, [pc, #140]	; (800102c <SystemClock_Config+0xd4>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fa4:	4a21      	ldr	r2, [pc, #132]	; (800102c <SystemClock_Config+0xd4>)
 8000fa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <SystemClock_Config+0xd4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fcc:	2304      	movs	r3, #4
 8000fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000fd0:	2348      	movs	r3, #72	; 0x48
 8000fd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f002 fecf 	bl	8003d88 <HAL_RCC_OscConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ff0:	f000 f8b6 	bl	8001160 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001004:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	2102      	movs	r1, #2
 8001010:	4618      	mov	r0, r3
 8001012:	f002 f845 	bl	80030a0 <HAL_RCC_ClockConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800101c:	f000 f8a0 	bl	8001160 <Error_Handler>
  }
}
 8001020:	bf00      	nop
 8001022:	3750      	adds	r7, #80	; 0x50
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40023800 	.word	0x40023800
 800102c:	40007000 	.word	0x40007000

08001030 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <MX_USART2_UART_Init+0x50>)
 8001038:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <MX_USART2_UART_Init+0x4c>)
 800103c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001040:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <MX_USART2_UART_Init+0x4c>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001056:	220c      	movs	r2, #12
 8001058:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <MX_USART2_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001068:	f003 f92c 	bl	80042c4 <HAL_UART_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001072:	f000 f875 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	2000034c 	.word	0x2000034c
 8001080:	40004400 	.word	0x40004400

08001084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <MX_GPIO_Init+0xd0>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a2c      	ldr	r2, [pc, #176]	; (8001154 <MX_GPIO_Init+0xd0>)
 80010a4:	f043 0304 	orr.w	r3, r3, #4
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <MX_GPIO_Init+0xd0>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b26      	ldr	r3, [pc, #152]	; (8001154 <MX_GPIO_Init+0xd0>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a25      	ldr	r2, [pc, #148]	; (8001154 <MX_GPIO_Init+0xd0>)
 80010c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b23      	ldr	r3, [pc, #140]	; (8001154 <MX_GPIO_Init+0xd0>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <MX_GPIO_Init+0xd0>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a1e      	ldr	r2, [pc, #120]	; (8001154 <MX_GPIO_Init+0xd0>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <MX_GPIO_Init+0xd0>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <MX_GPIO_Init+0xd0>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a17      	ldr	r2, [pc, #92]	; (8001154 <MX_GPIO_Init+0xd0>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <MX_GPIO_Init+0xd0>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2120      	movs	r1, #32
 800110e:	4812      	ldr	r0, [pc, #72]	; (8001158 <MX_GPIO_Init+0xd4>)
 8001110:	f000 fcfc 	bl	8001b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001114:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800111a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800111e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4619      	mov	r1, r3
 800112a:	480c      	ldr	r0, [pc, #48]	; (800115c <MX_GPIO_Init+0xd8>)
 800112c:	f000 fb5a 	bl	80017e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001130:	2320      	movs	r3, #32
 8001132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	4804      	ldr	r0, [pc, #16]	; (8001158 <MX_GPIO_Init+0xd4>)
 8001148:	f000 fb4c 	bl	80017e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800114c:	bf00      	nop
 800114e:	3728      	adds	r7, #40	; 0x28
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40023800 	.word	0x40023800
 8001158:	40020000 	.word	0x40020000
 800115c:	40020800 	.word	0x40020800

08001160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001164:	b672      	cpsid	i
}
 8001166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001168:	e7fe      	b.n	8001168 <Error_Handler+0x8>
	...

0800116c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <HAL_MspInit+0x4c>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	4a0f      	ldr	r2, [pc, #60]	; (80011b8 <HAL_MspInit+0x4c>)
 800117c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001180:	6453      	str	r3, [r2, #68]	; 0x44
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <HAL_MspInit+0x4c>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <HAL_MspInit+0x4c>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	4a08      	ldr	r2, [pc, #32]	; (80011b8 <HAL_MspInit+0x4c>)
 8001198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119c:	6413      	str	r3, [r2, #64]	; 0x40
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_MspInit+0x4c>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011aa:	2007      	movs	r0, #7
 80011ac:	f000 fad8 	bl	8001760 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40023800 	.word	0x40023800

080011bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a19      	ldr	r2, [pc, #100]	; (8001240 <HAL_UART_MspInit+0x84>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d12b      	bne.n	8001236 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <HAL_UART_MspInit+0x88>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a17      	ldr	r2, [pc, #92]	; (8001244 <HAL_UART_MspInit+0x88>)
 80011e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <HAL_UART_MspInit+0x88>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <HAL_UART_MspInit+0x88>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a10      	ldr	r2, [pc, #64]	; (8001244 <HAL_UART_MspInit+0x88>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <HAL_UART_MspInit+0x88>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001216:	230c      	movs	r3, #12
 8001218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001226:	2307      	movs	r3, #7
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	4805      	ldr	r0, [pc, #20]	; (8001248 <HAL_UART_MspInit+0x8c>)
 8001232:	f000 fad7 	bl	80017e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001236:	bf00      	nop
 8001238:	3728      	adds	r7, #40	; 0x28
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40004400 	.word	0x40004400
 8001244:	40023800 	.word	0x40023800
 8001248:	40020000 	.word	0x40020000

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <NMI_Handler+0x4>

08001252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <HardFault_Handler+0x4>

08001258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800125c:	e7fe      	b.n	800125c <MemManage_Handler+0x4>

0800125e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <BusFault_Handler+0x4>

08001264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <UsageFault_Handler+0x4>

0800126a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001298:	f000 f94e 	bl	8001538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}

080012a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <OTG_FS_IRQHandler+0x10>)
 80012a6:	f000 fda1 	bl	8001dec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000b54 	.word	0x20000b54

080012b4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <OTG_HS_IRQHandler+0x10>)
 80012ba:	f000 fd97 	bl	8001dec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20001060 	.word	0x20001060

080012c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return 1;
 80012cc:	2301      	movs	r3, #1
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <_kill>:

int _kill(int pid, int sig)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012e2:	f007 fb41 	bl	8008968 <__errno>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2216      	movs	r2, #22
 80012ea:	601a      	str	r2, [r3, #0]
  return -1;
 80012ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <_exit>:

void _exit (int status)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001300:	f04f 31ff 	mov.w	r1, #4294967295
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ffe7 	bl	80012d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800130a:	e7fe      	b.n	800130a <_exit+0x12>

0800130c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	e00a      	b.n	8001334 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800131e:	f3af 8000 	nop.w
 8001322:	4601      	mov	r1, r0
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	60ba      	str	r2, [r7, #8]
 800132a:	b2ca      	uxtb	r2, r1
 800132c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3301      	adds	r3, #1
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	429a      	cmp	r2, r3
 800133a:	dbf0      	blt.n	800131e <_read+0x12>
  }

  return len;
 800133c:	687b      	ldr	r3, [r7, #4]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800136e:	605a      	str	r2, [r3, #4]
  return 0;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <_isatty>:

int _isatty(int file)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001386:	2301      	movs	r3, #1
}
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b8:	4a14      	ldr	r2, [pc, #80]	; (800140c <_sbrk+0x5c>)
 80013ba:	4b15      	ldr	r3, [pc, #84]	; (8001410 <_sbrk+0x60>)
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c4:	4b13      	ldr	r3, [pc, #76]	; (8001414 <_sbrk+0x64>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d102      	bne.n	80013d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <_sbrk+0x64>)
 80013ce:	4a12      	ldr	r2, [pc, #72]	; (8001418 <_sbrk+0x68>)
 80013d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <_sbrk+0x64>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d207      	bcs.n	80013f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e0:	f007 fac2 	bl	8008968 <__errno>
 80013e4:	4603      	mov	r3, r0
 80013e6:	220c      	movs	r2, #12
 80013e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	e009      	b.n	8001404 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <_sbrk+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013f6:	4b07      	ldr	r3, [pc, #28]	; (8001414 <_sbrk+0x64>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	4a05      	ldr	r2, [pc, #20]	; (8001414 <_sbrk+0x64>)
 8001400:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001402:	68fb      	ldr	r3, [r7, #12]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20020000 	.word	0x20020000
 8001410:	00000400 	.word	0x00000400
 8001414:	20000390 	.word	0x20000390
 8001418:	20001590 	.word	0x20001590

0800141c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <SystemInit+0x20>)
 8001422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001426:	4a05      	ldr	r2, [pc, #20]	; (800143c <SystemInit+0x20>)
 8001428:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800142c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001440:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001478 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001444:	480d      	ldr	r0, [pc, #52]	; (800147c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001446:	490e      	ldr	r1, [pc, #56]	; (8001480 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001448:	4a0e      	ldr	r2, [pc, #56]	; (8001484 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800144c:	e002      	b.n	8001454 <LoopCopyDataInit>

0800144e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001452:	3304      	adds	r3, #4

08001454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001458:	d3f9      	bcc.n	800144e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145a:	4a0b      	ldr	r2, [pc, #44]	; (8001488 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800145c:	4c0b      	ldr	r4, [pc, #44]	; (800148c <LoopFillZerobss+0x26>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001460:	e001      	b.n	8001466 <LoopFillZerobss>

08001462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001464:	3204      	adds	r2, #4

08001466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001468:	d3fb      	bcc.n	8001462 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800146a:	f7ff ffd7 	bl	800141c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800146e:	f007 fa81 	bl	8008974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001472:	f7ff fd51 	bl	8000f18 <main>
  bx  lr    
 8001476:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001478:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800147c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001480:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 8001484:	0800b89c 	.word	0x0800b89c
  ldr r2, =_sbss
 8001488:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 800148c:	20001590 	.word	0x20001590

08001490 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC_IRQHandler>
	...

08001494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <HAL_Init+0x40>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0d      	ldr	r2, [pc, #52]	; (80014d4 <HAL_Init+0x40>)
 800149e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <HAL_Init+0x40>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <HAL_Init+0x40>)
 80014aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <HAL_Init+0x40>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a07      	ldr	r2, [pc, #28]	; (80014d4 <HAL_Init+0x40>)
 80014b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014bc:	2003      	movs	r0, #3
 80014be:	f000 f94f 	bl	8001760 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014c2:	2000      	movs	r0, #0
 80014c4:	f000 f808 	bl	80014d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c8:	f7ff fe50 	bl	800116c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023c00 	.word	0x40023c00

080014d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_InitTick+0x54>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_InitTick+0x58>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4619      	mov	r1, r3
 80014ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 f967 	bl	80017ca <HAL_SYSTICK_Config>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e00e      	b.n	8001524 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b0f      	cmp	r3, #15
 800150a:	d80a      	bhi.n	8001522 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800150c:	2200      	movs	r2, #0
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	f04f 30ff 	mov.w	r0, #4294967295
 8001514:	f000 f92f 	bl	8001776 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001518:	4a06      	ldr	r2, [pc, #24]	; (8001534 <HAL_InitTick+0x5c>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	e000      	b.n	8001524 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000000 	.word	0x20000000
 8001530:	20000008 	.word	0x20000008
 8001534:	20000004 	.word	0x20000004

08001538 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_IncTick+0x20>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	461a      	mov	r2, r3
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_IncTick+0x24>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4413      	add	r3, r2
 8001548:	4a04      	ldr	r2, [pc, #16]	; (800155c <HAL_IncTick+0x24>)
 800154a:	6013      	str	r3, [r2, #0]
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000008 	.word	0x20000008
 800155c:	20000394 	.word	0x20000394

08001560 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return uwTick;
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <HAL_GetTick+0x14>)
 8001566:	681b      	ldr	r3, [r3, #0]
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000394 	.word	0x20000394

08001578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001580:	f7ff ffee 	bl	8001560 <HAL_GetTick>
 8001584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001590:	d005      	beq.n	800159e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_Delay+0x44>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800159e:	bf00      	nop
 80015a0:	f7ff ffde 	bl	8001560 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d8f7      	bhi.n	80015a0 <HAL_Delay+0x28>
  {
  }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000008 	.word	0x20000008

080015c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015dc:	4013      	ands	r3, r2
 80015de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f2:	4a04      	ldr	r2, [pc, #16]	; (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	60d3      	str	r3, [r2, #12]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <__NVIC_GetPriorityGrouping+0x18>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	f003 0307 	and.w	r3, r3, #7
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	2b00      	cmp	r3, #0
 8001634:	db0b      	blt.n	800164e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	f003 021f 	and.w	r2, r3, #31
 800163c:	4907      	ldr	r1, [pc, #28]	; (800165c <__NVIC_EnableIRQ+0x38>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	095b      	lsrs	r3, r3, #5
 8001644:	2001      	movs	r0, #1
 8001646:	fa00 f202 	lsl.w	r2, r0, r2
 800164a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000e100 	.word	0xe000e100

08001660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	6039      	str	r1, [r7, #0]
 800166a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	2b00      	cmp	r3, #0
 8001672:	db0a      	blt.n	800168a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	b2da      	uxtb	r2, r3
 8001678:	490c      	ldr	r1, [pc, #48]	; (80016ac <__NVIC_SetPriority+0x4c>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	0112      	lsls	r2, r2, #4
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	440b      	add	r3, r1
 8001684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001688:	e00a      	b.n	80016a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4908      	ldr	r1, [pc, #32]	; (80016b0 <__NVIC_SetPriority+0x50>)
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	3b04      	subs	r3, #4
 8001698:	0112      	lsls	r2, r2, #4
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	440b      	add	r3, r1
 800169e:	761a      	strb	r2, [r3, #24]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000e100 	.word	0xe000e100
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b089      	sub	sp, #36	; 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f1c3 0307 	rsb	r3, r3, #7
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	bf28      	it	cs
 80016d2:	2304      	movcs	r3, #4
 80016d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3304      	adds	r3, #4
 80016da:	2b06      	cmp	r3, #6
 80016dc:	d902      	bls.n	80016e4 <NVIC_EncodePriority+0x30>
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3b03      	subs	r3, #3
 80016e2:	e000      	b.n	80016e6 <NVIC_EncodePriority+0x32>
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43da      	mvns	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	401a      	ands	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	43d9      	mvns	r1, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	4313      	orrs	r3, r2
         );
}
 800170e:	4618      	mov	r0, r3
 8001710:	3724      	adds	r7, #36	; 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3b01      	subs	r3, #1
 8001728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800172c:	d301      	bcc.n	8001732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172e:	2301      	movs	r3, #1
 8001730:	e00f      	b.n	8001752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <SysTick_Config+0x40>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3b01      	subs	r3, #1
 8001738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173a:	210f      	movs	r1, #15
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	f7ff ff8e 	bl	8001660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <SysTick_Config+0x40>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174a:	4b04      	ldr	r3, [pc, #16]	; (800175c <SysTick_Config+0x40>)
 800174c:	2207      	movs	r2, #7
 800174e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	e000e010 	.word	0xe000e010

08001760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff ff29 	bl	80015c0 <__NVIC_SetPriorityGrouping>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001776:	b580      	push	{r7, lr}
 8001778:	b086      	sub	sp, #24
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001788:	f7ff ff3e 	bl	8001608 <__NVIC_GetPriorityGrouping>
 800178c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	6978      	ldr	r0, [r7, #20]
 8001794:	f7ff ff8e 	bl	80016b4 <NVIC_EncodePriority>
 8001798:	4602      	mov	r2, r0
 800179a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff5d 	bl	8001660 <__NVIC_SetPriority>
}
 80017a6:	bf00      	nop
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff31 	bl	8001624 <__NVIC_EnableIRQ>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff ffa2 	bl	800171c <SysTick_Config>
 80017d8:	4603      	mov	r3, r0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
 80017fe:	e165      	b.n	8001acc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001800:	2201      	movs	r2, #1
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	429a      	cmp	r2, r3
 800181a:	f040 8154 	bne.w	8001ac6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	2b01      	cmp	r3, #1
 8001828:	d005      	beq.n	8001836 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001832:	2b02      	cmp	r3, #2
 8001834:	d130      	bne.n	8001898 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	2203      	movs	r2, #3
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4013      	ands	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800186c:	2201      	movs	r2, #1
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	f003 0201 	and.w	r2, r3, #1
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	2b03      	cmp	r3, #3
 80018a2:	d017      	beq.n	80018d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	2203      	movs	r2, #3
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d123      	bne.n	8001928 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	08da      	lsrs	r2, r3, #3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3208      	adds	r2, #8
 80018e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	220f      	movs	r2, #15
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	691a      	ldr	r2, [r3, #16]
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	08da      	lsrs	r2, r3, #3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3208      	adds	r2, #8
 8001922:	69b9      	ldr	r1, [r7, #24]
 8001924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	2203      	movs	r2, #3
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0203 	and.w	r2, r3, #3
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 80ae 	beq.w	8001ac6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	4b5d      	ldr	r3, [pc, #372]	; (8001ae4 <HAL_GPIO_Init+0x300>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	4a5c      	ldr	r2, [pc, #368]	; (8001ae4 <HAL_GPIO_Init+0x300>)
 8001974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001978:	6453      	str	r3, [r2, #68]	; 0x44
 800197a:	4b5a      	ldr	r3, [pc, #360]	; (8001ae4 <HAL_GPIO_Init+0x300>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001986:	4a58      	ldr	r2, [pc, #352]	; (8001ae8 <HAL_GPIO_Init+0x304>)
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	089b      	lsrs	r3, r3, #2
 800198c:	3302      	adds	r3, #2
 800198e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001992:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	220f      	movs	r2, #15
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a4f      	ldr	r2, [pc, #316]	; (8001aec <HAL_GPIO_Init+0x308>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d025      	beq.n	80019fe <HAL_GPIO_Init+0x21a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a4e      	ldr	r2, [pc, #312]	; (8001af0 <HAL_GPIO_Init+0x30c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d01f      	beq.n	80019fa <HAL_GPIO_Init+0x216>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a4d      	ldr	r2, [pc, #308]	; (8001af4 <HAL_GPIO_Init+0x310>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d019      	beq.n	80019f6 <HAL_GPIO_Init+0x212>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a4c      	ldr	r2, [pc, #304]	; (8001af8 <HAL_GPIO_Init+0x314>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d013      	beq.n	80019f2 <HAL_GPIO_Init+0x20e>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a4b      	ldr	r2, [pc, #300]	; (8001afc <HAL_GPIO_Init+0x318>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d00d      	beq.n	80019ee <HAL_GPIO_Init+0x20a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a4a      	ldr	r2, [pc, #296]	; (8001b00 <HAL_GPIO_Init+0x31c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d007      	beq.n	80019ea <HAL_GPIO_Init+0x206>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a49      	ldr	r2, [pc, #292]	; (8001b04 <HAL_GPIO_Init+0x320>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d101      	bne.n	80019e6 <HAL_GPIO_Init+0x202>
 80019e2:	2306      	movs	r3, #6
 80019e4:	e00c      	b.n	8001a00 <HAL_GPIO_Init+0x21c>
 80019e6:	2307      	movs	r3, #7
 80019e8:	e00a      	b.n	8001a00 <HAL_GPIO_Init+0x21c>
 80019ea:	2305      	movs	r3, #5
 80019ec:	e008      	b.n	8001a00 <HAL_GPIO_Init+0x21c>
 80019ee:	2304      	movs	r3, #4
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x21c>
 80019f2:	2303      	movs	r3, #3
 80019f4:	e004      	b.n	8001a00 <HAL_GPIO_Init+0x21c>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e002      	b.n	8001a00 <HAL_GPIO_Init+0x21c>
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <HAL_GPIO_Init+0x21c>
 80019fe:	2300      	movs	r3, #0
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	f002 0203 	and.w	r2, r2, #3
 8001a06:	0092      	lsls	r2, r2, #2
 8001a08:	4093      	lsls	r3, r2
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a10:	4935      	ldr	r1, [pc, #212]	; (8001ae8 <HAL_GPIO_Init+0x304>)
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	089b      	lsrs	r3, r3, #2
 8001a16:	3302      	adds	r3, #2
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a1e:	4b3a      	ldr	r3, [pc, #232]	; (8001b08 <HAL_GPIO_Init+0x324>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a42:	4a31      	ldr	r2, [pc, #196]	; (8001b08 <HAL_GPIO_Init+0x324>)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a48:	4b2f      	ldr	r3, [pc, #188]	; (8001b08 <HAL_GPIO_Init+0x324>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a6c:	4a26      	ldr	r2, [pc, #152]	; (8001b08 <HAL_GPIO_Init+0x324>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a72:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <HAL_GPIO_Init+0x324>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a96:	4a1c      	ldr	r2, [pc, #112]	; (8001b08 <HAL_GPIO_Init+0x324>)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <HAL_GPIO_Init+0x324>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ac0:	4a11      	ldr	r2, [pc, #68]	; (8001b08 <HAL_GPIO_Init+0x324>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	61fb      	str	r3, [r7, #28]
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	2b0f      	cmp	r3, #15
 8001ad0:	f67f ae96 	bls.w	8001800 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	3724      	adds	r7, #36	; 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40013800 	.word	0x40013800
 8001aec:	40020000 	.word	0x40020000
 8001af0:	40020400 	.word	0x40020400
 8001af4:	40020800 	.word	0x40020800
 8001af8:	40020c00 	.word	0x40020c00
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40021400 	.word	0x40021400
 8001b04:	40021800 	.word	0x40021800
 8001b08:	40013c00 	.word	0x40013c00

08001b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	807b      	strh	r3, [r7, #2]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b1c:	787b      	ldrb	r3, [r7, #1]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b22:	887a      	ldrh	r2, [r7, #2]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b28:	e003      	b.n	8001b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b2a:	887b      	ldrh	r3, [r7, #2]
 8001b2c:	041a      	lsls	r2, r3, #16
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	619a      	str	r2, [r3, #24]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b40:	b08f      	sub	sp, #60	; 0x3c
 8001b42:	af0a      	add	r7, sp, #40	; 0x28
 8001b44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e116      	b.n	8001d7e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d106      	bne.n	8001b70 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f006 fafa 	bl	8008164 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2203      	movs	r2, #3
 8001b74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f003 f86f 	bl	8004c72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	687e      	ldr	r6, [r7, #4]
 8001b9c:	466d      	mov	r5, sp
 8001b9e:	f106 0410 	add.w	r4, r6, #16
 8001ba2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ba4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ba8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001baa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bae:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bb2:	1d33      	adds	r3, r6, #4
 8001bb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bb6:	6838      	ldr	r0, [r7, #0]
 8001bb8:	f002 ff46 	bl	8004a48 <USB_CoreInit>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d005      	beq.n	8001bce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e0d7      	b.n	8001d7e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f003 f85d 	bl	8004c94 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	e04a      	b.n	8001c76 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001be0:	7bfa      	ldrb	r2, [r7, #15]
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4413      	add	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	333d      	adds	r3, #61	; 0x3d
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bf4:	7bfa      	ldrb	r2, [r7, #15]
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	333c      	adds	r3, #60	; 0x3c
 8001c04:	7bfa      	ldrb	r2, [r7, #15]
 8001c06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c08:	7bfa      	ldrb	r2, [r7, #15]
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	b298      	uxth	r0, r3
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	4413      	add	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	3344      	adds	r3, #68	; 0x44
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c20:	7bfa      	ldrb	r2, [r7, #15]
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	4613      	mov	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	4413      	add	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	3340      	adds	r3, #64	; 0x40
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c34:	7bfa      	ldrb	r2, [r7, #15]
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	3348      	adds	r3, #72	; 0x48
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c48:	7bfa      	ldrb	r2, [r7, #15]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	4413      	add	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	334c      	adds	r3, #76	; 0x4c
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c5c:	7bfa      	ldrb	r2, [r7, #15]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	4413      	add	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	3354      	adds	r3, #84	; 0x54
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	3301      	adds	r3, #1
 8001c74:	73fb      	strb	r3, [r7, #15]
 8001c76:	7bfa      	ldrb	r2, [r7, #15]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d3af      	bcc.n	8001be0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c80:	2300      	movs	r3, #0
 8001c82:	73fb      	strb	r3, [r7, #15]
 8001c84:	e044      	b.n	8001d10 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c86:	7bfa      	ldrb	r2, [r7, #15]
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4413      	add	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	440b      	add	r3, r1
 8001c94:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c9c:	7bfa      	ldrb	r2, [r7, #15]
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001cae:	7bfa      	ldrb	r2, [r7, #15]
 8001cb0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4413      	add	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cde:	7bfa      	ldrb	r2, [r7, #15]
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	440b      	add	r3, r1
 8001cec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cf4:	7bfa      	ldrb	r2, [r7, #15]
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	73fb      	strb	r3, [r7, #15]
 8001d10:	7bfa      	ldrb	r2, [r7, #15]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d3b5      	bcc.n	8001c86 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	687e      	ldr	r6, [r7, #4]
 8001d22:	466d      	mov	r5, sp
 8001d24:	f106 0410 	add.w	r4, r6, #16
 8001d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d34:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d38:	1d33      	adds	r3, r6, #4
 8001d3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d3c:	6838      	ldr	r0, [r7, #0]
 8001d3e:	f002 fff5 	bl	8004d2c <USB_DevInit>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e014      	b.n	8001d7e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d102      	bne.n	8001d72 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f001 f973 	bl	8003058 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f004 f937 	bl	8005fea <USB_DevDisconnect>

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d86 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b084      	sub	sp, #16
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d101      	bne.n	8001da2 <HAL_PCD_Start+0x1c>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e020      	b.n	8001de4 <HAL_PCD_Start+0x5e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d109      	bne.n	8001dc6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d005      	beq.n	8001dc6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f002 ff40 	bl	8004c50 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f004 f8e7 	bl	8005fa8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001dec:	b590      	push	{r4, r7, lr}
 8001dee:	b08d      	sub	sp, #52	; 0x34
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
 8001dfc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f004 f9a5 	bl	8006152 <USB_GetMode>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f040 84b7 	bne.w	800277e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f004 f909 	bl	800602c <USB_ReadInterrupts>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 84ad 	beq.w	800277c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	0a1b      	lsrs	r3, r3, #8
 8001e2c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f004 f8f6 	bl	800602c <USB_ReadInterrupts>
 8001e40:	4603      	mov	r3, r0
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d107      	bne.n	8001e5a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	695a      	ldr	r2, [r3, #20]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f002 0202 	and.w	r2, r2, #2
 8001e58:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f004 f8e4 	bl	800602c <USB_ReadInterrupts>
 8001e64:	4603      	mov	r3, r0
 8001e66:	f003 0310 	and.w	r3, r3, #16
 8001e6a:	2b10      	cmp	r3, #16
 8001e6c:	d161      	bne.n	8001f32 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	699a      	ldr	r2, [r3, #24]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0210 	bic.w	r2, r2, #16
 8001e7c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	f003 020f 	and.w	r2, r3, #15
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	0c5b      	lsrs	r3, r3, #17
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d124      	bne.n	8001ef4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d035      	beq.n	8001f22 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ec0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	6a38      	ldr	r0, [r7, #32]
 8001eca:	f003 ff1b 	bl	8005d04 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eda:	441a      	add	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	6a1a      	ldr	r2, [r3, #32]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eec:	441a      	add	r2, r3
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	621a      	str	r2, [r3, #32]
 8001ef2:	e016      	b.n	8001f22 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	0c5b      	lsrs	r3, r3, #17
 8001ef8:	f003 030f 	and.w	r3, r3, #15
 8001efc:	2b06      	cmp	r3, #6
 8001efe:	d110      	bne.n	8001f22 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f06:	2208      	movs	r2, #8
 8001f08:	4619      	mov	r1, r3
 8001f0a:	6a38      	ldr	r0, [r7, #32]
 8001f0c:	f003 fefa 	bl	8005d04 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	6a1a      	ldr	r2, [r3, #32]
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f1c:	441a      	add	r2, r3
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	699a      	ldr	r2, [r3, #24]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f042 0210 	orr.w	r2, r2, #16
 8001f30:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f004 f878 	bl	800602c <USB_ReadInterrupts>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f46:	f040 80a7 	bne.w	8002098 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f004 f87d 	bl	8006052 <USB_ReadDevAllOutEpInterrupt>
 8001f58:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001f5a:	e099      	b.n	8002090 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 808e 	beq.w	8002084 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f004 f8a1 	bl	80060ba <USB_ReadDevOutEPInterrupt>
 8001f78:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00c      	beq.n	8001f9e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	015a      	lsls	r2, r3, #5
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f90:	461a      	mov	r2, r3
 8001f92:	2301      	movs	r3, #1
 8001f94:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 fed7 	bl	8002d4c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00c      	beq.n	8001fc2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	015a      	lsls	r2, r3, #5
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	2308      	movs	r3, #8
 8001fb8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001fba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 ffad 	bl	8002f1c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	f003 0310 	and.w	r3, r3, #16
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d008      	beq.n	8001fde <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	015a      	lsls	r2, r3, #5
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fd8:	461a      	mov	r2, r3
 8001fda:	2310      	movs	r3, #16
 8001fdc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d030      	beq.n	800204a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff0:	2b80      	cmp	r3, #128	; 0x80
 8001ff2:	d109      	bne.n	8002008 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	69fa      	ldr	r2, [r7, #28]
 8001ffe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002002:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002006:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800200a:	4613      	mov	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4413      	add	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	4413      	add	r3, r2
 800201a:	3304      	adds	r3, #4
 800201c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	78db      	ldrb	r3, [r3, #3]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d108      	bne.n	8002038 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2200      	movs	r2, #0
 800202a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	b2db      	uxtb	r3, r3
 8002030:	4619      	mov	r1, r3
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f006 fa04 	bl	8008440 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	015a      	lsls	r2, r3, #5
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	4413      	add	r3, r2
 8002040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002044:	461a      	mov	r2, r3
 8002046:	2302      	movs	r3, #2
 8002048:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	f003 0320 	and.w	r3, r3, #32
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	015a      	lsls	r2, r3, #5
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	4413      	add	r3, r2
 800205c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002060:	461a      	mov	r2, r3
 8002062:	2320      	movs	r3, #32
 8002064:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d009      	beq.n	8002084 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	015a      	lsls	r2, r3, #5
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	4413      	add	r3, r2
 8002078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800207c:	461a      	mov	r2, r3
 800207e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002082:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	3301      	adds	r3, #1
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208c:	085b      	lsrs	r3, r3, #1
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002092:	2b00      	cmp	r3, #0
 8002094:	f47f af62 	bne.w	8001f5c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f003 ffc5 	bl	800602c <USB_ReadInterrupts>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020ac:	f040 80db 	bne.w	8002266 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f003 ffe6 	bl	8006086 <USB_ReadDevAllInEpInterrupt>
 80020ba:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80020c0:	e0cd      	b.n	800225e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80020c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80c2 	beq.w	8002252 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f004 f80c 	bl	80060f6 <USB_ReadDevInEPInterrupt>
 80020de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d057      	beq.n	800219a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	2201      	movs	r2, #1
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	43db      	mvns	r3, r3
 8002104:	69f9      	ldr	r1, [r7, #28]
 8002106:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800210a:	4013      	ands	r3, r2
 800210c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	015a      	lsls	r2, r3, #5
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	4413      	add	r3, r2
 8002116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800211a:	461a      	mov	r2, r3
 800211c:	2301      	movs	r3, #1
 800211e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d132      	bne.n	800218e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	334c      	adds	r3, #76	; 0x4c
 8002138:	6819      	ldr	r1, [r3, #0]
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213e:	4613      	mov	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4413      	add	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4403      	add	r3, r0
 8002148:	3348      	adds	r3, #72	; 0x48
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4419      	add	r1, r3
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002152:	4613      	mov	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4403      	add	r3, r0
 800215c:	334c      	adds	r3, #76	; 0x4c
 800215e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	2b00      	cmp	r3, #0
 8002164:	d113      	bne.n	800218e <HAL_PCD_IRQHandler+0x3a2>
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800216a:	4613      	mov	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	3354      	adds	r3, #84	; 0x54
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d108      	bne.n	800218e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002186:	461a      	mov	r2, r3
 8002188:	2101      	movs	r1, #1
 800218a:	f004 f813 	bl	80061b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	b2db      	uxtb	r3, r3
 8002192:	4619      	mov	r1, r3
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f006 f8ce 	bl	8008336 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021b0:	461a      	mov	r2, r3
 80021b2:	2308      	movs	r3, #8
 80021b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021cc:	461a      	mov	r2, r3
 80021ce:	2310      	movs	r3, #16
 80021d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d008      	beq.n	80021ee <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	015a      	lsls	r2, r3, #5
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021e8:	461a      	mov	r2, r3
 80021ea:	2340      	movs	r3, #64	; 0x40
 80021ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d023      	beq.n	8002240 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80021f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021fa:	6a38      	ldr	r0, [r7, #32]
 80021fc:	f002 fef4 	bl	8004fe8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002202:	4613      	mov	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	3338      	adds	r3, #56	; 0x38
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	4413      	add	r3, r2
 8002210:	3304      	adds	r3, #4
 8002212:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	78db      	ldrb	r3, [r3, #3]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d108      	bne.n	800222e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	2200      	movs	r2, #0
 8002220:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	b2db      	uxtb	r3, r3
 8002226:	4619      	mov	r1, r3
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f006 f91b 	bl	8008464 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	4413      	add	r3, r2
 8002236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800223a:	461a      	mov	r2, r3
 800223c:	2302      	movs	r3, #2
 800223e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800224a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 fcf0 	bl	8002c32 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	3301      	adds	r3, #1
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225a:	085b      	lsrs	r3, r3, #1
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800225e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002260:	2b00      	cmp	r3, #0
 8002262:	f47f af2e 	bne.w	80020c2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f003 fede 	bl	800602c <USB_ReadInterrupts>
 8002270:	4603      	mov	r3, r0
 8002272:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002276:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800227a:	d122      	bne.n	80022c2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	69fa      	ldr	r2, [r7, #28]
 8002286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800228a:	f023 0301 	bic.w	r3, r3, #1
 800228e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002296:	2b01      	cmp	r3, #1
 8002298:	d108      	bne.n	80022ac <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80022a2:	2100      	movs	r1, #0
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f006 facd 	bl	8008844 <HAL_PCDEx_LPM_Callback>
 80022aa:	e002      	b.n	80022b2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f006 f8b9 	bl	8008424 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695a      	ldr	r2, [r3, #20]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80022c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f003 feb0 	bl	800602c <USB_ReadInterrupts>
 80022cc:	4603      	mov	r3, r0
 80022ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022d6:	d112      	bne.n	80022fe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d102      	bne.n	80022ee <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f006 f875 	bl	80083d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80022fc:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f003 fe92 	bl	800602c <USB_ReadInterrupts>
 8002308:	4603      	mov	r3, r0
 800230a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800230e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002312:	d121      	bne.n	8002358 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695a      	ldr	r2, [r3, #20]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002322:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800232a:	2b00      	cmp	r3, #0
 800232c:	d111      	bne.n	8002352 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233c:	089b      	lsrs	r3, r3, #2
 800233e:	f003 020f 	and.w	r2, r3, #15
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002348:	2101      	movs	r1, #1
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f006 fa7a 	bl	8008844 <HAL_PCDEx_LPM_Callback>
 8002350:	e002      	b.n	8002358 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f006 f840 	bl	80083d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f003 fe65 	bl	800602c <USB_ReadInterrupts>
 8002362:	4603      	mov	r3, r0
 8002364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800236c:	f040 80b7 	bne.w	80024de <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	69fa      	ldr	r2, [r7, #28]
 800237a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800237e:	f023 0301 	bic.w	r3, r3, #1
 8002382:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2110      	movs	r1, #16
 800238a:	4618      	mov	r0, r3
 800238c:	f002 fe2c 	bl	8004fe8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002390:	2300      	movs	r3, #0
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002394:	e046      	b.n	8002424 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002398:	015a      	lsls	r2, r3, #5
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	4413      	add	r3, r2
 800239e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023a2:	461a      	mov	r2, r3
 80023a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023a8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023ba:	0151      	lsls	r1, r2, #5
 80023bc:	69fa      	ldr	r2, [r7, #28]
 80023be:	440a      	add	r2, r1
 80023c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80023c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80023ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d6:	461a      	mov	r2, r3
 80023d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023dc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80023de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023ee:	0151      	lsls	r1, r2, #5
 80023f0:	69fa      	ldr	r2, [r7, #28]
 80023f2:	440a      	add	r2, r1
 80023f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80023f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80023fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	4413      	add	r3, r2
 8002406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800240e:	0151      	lsls	r1, r2, #5
 8002410:	69fa      	ldr	r2, [r7, #28]
 8002412:	440a      	add	r2, r1
 8002414:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002418:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800241c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800241e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002420:	3301      	adds	r3, #1
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800242a:	429a      	cmp	r2, r3
 800242c:	d3b3      	bcc.n	8002396 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800243c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002440:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	2b00      	cmp	r3, #0
 8002448:	d016      	beq.n	8002478 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800245a:	f043 030b 	orr.w	r3, r3, #11
 800245e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	69fa      	ldr	r2, [r7, #28]
 800246c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002470:	f043 030b 	orr.w	r3, r3, #11
 8002474:	6453      	str	r3, [r2, #68]	; 0x44
 8002476:	e015      	b.n	80024a4 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	69fa      	ldr	r2, [r7, #28]
 8002482:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002486:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800248a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800248e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	69fa      	ldr	r2, [r7, #28]
 800249a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800249e:	f043 030b 	orr.w	r3, r3, #11
 80024a2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	69fa      	ldr	r2, [r7, #28]
 80024ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80024b6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6818      	ldr	r0, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024c8:	461a      	mov	r2, r3
 80024ca:	f003 fe73 	bl	80061b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	695a      	ldr	r2, [r3, #20]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80024dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f003 fda2 	bl	800602c <USB_ReadInterrupts>
 80024e8:	4603      	mov	r3, r0
 80024ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024f2:	d124      	bne.n	800253e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f003 fe38 	bl	800616e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f002 fded 	bl	80050e2 <USB_GetDevSpeed>
 8002508:	4603      	mov	r3, r0
 800250a:	461a      	mov	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681c      	ldr	r4, [r3, #0]
 8002514:	f000 feaa 	bl	800326c <HAL_RCC_GetHCLKFreq>
 8002518:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800251e:	b2db      	uxtb	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	4620      	mov	r0, r4
 8002524:	f002 faf2 	bl	8004b0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f005 ff2c 	bl	8008386 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695a      	ldr	r2, [r3, #20]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800253c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f003 fd72 	bl	800602c <USB_ReadInterrupts>
 8002548:	4603      	mov	r3, r0
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b08      	cmp	r3, #8
 8002550:	d10a      	bne.n	8002568 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f005 ff09 	bl	800836a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695a      	ldr	r2, [r3, #20]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f002 0208 	and.w	r2, r2, #8
 8002566:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f003 fd5d 	bl	800602c <USB_ReadInterrupts>
 8002572:	4603      	mov	r3, r0
 8002574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002578:	2b80      	cmp	r3, #128	; 0x80
 800257a:	d122      	bne.n	80025c2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002588:	2301      	movs	r3, #1
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
 800258c:	e014      	b.n	80025b8 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002592:	4613      	mov	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4413      	add	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d105      	bne.n	80025b2 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	4619      	mov	r1, r3
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 fb0f 	bl	8002bd0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	3301      	adds	r3, #1
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025be:	429a      	cmp	r2, r3
 80025c0:	d3e5      	bcc.n	800258e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f003 fd30 	bl	800602c <USB_ReadInterrupts>
 80025cc:	4603      	mov	r3, r0
 80025ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025d6:	d13b      	bne.n	8002650 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025d8:	2301      	movs	r3, #1
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
 80025dc:	e02b      	b.n	8002636 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f2:	4613      	mov	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4413      	add	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	3340      	adds	r3, #64	; 0x40
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d115      	bne.n	8002630 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002604:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002606:	2b00      	cmp	r3, #0
 8002608:	da12      	bge.n	8002630 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800260e:	4613      	mov	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	4413      	add	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	333f      	adds	r3, #63	; 0x3f
 800261a:	2201      	movs	r2, #1
 800261c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	b2db      	uxtb	r3, r3
 8002622:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002626:	b2db      	uxtb	r3, r3
 8002628:	4619      	mov	r1, r3
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 fad0 	bl	8002bd0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	3301      	adds	r3, #1
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800263c:	429a      	cmp	r2, r3
 800263e:	d3ce      	bcc.n	80025de <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695a      	ldr	r2, [r3, #20]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800264e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f003 fce9 	bl	800602c <USB_ReadInterrupts>
 800265a:	4603      	mov	r3, r0
 800265c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002660:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002664:	d155      	bne.n	8002712 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002666:	2301      	movs	r3, #1
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
 800266a:	e045      	b.n	80026f8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	4413      	add	r3, r2
 8002674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002680:	4613      	mov	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4413      	add	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d12e      	bne.n	80026f2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002694:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002696:	2b00      	cmp	r3, #0
 8002698:	da2b      	bge.n	80026f2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80026a6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d121      	bne.n	80026f2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80026c0:	2201      	movs	r2, #1
 80026c2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10a      	bne.n	80026f2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	69fa      	ldr	r2, [r7, #28]
 80026e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ee:	6053      	str	r3, [r2, #4]
            break;
 80026f0:	e007      	b.n	8002702 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	3301      	adds	r3, #1
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026fe:	429a      	cmp	r2, r3
 8002700:	d3b4      	bcc.n	800266c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695a      	ldr	r2, [r3, #20]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002710:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f003 fc88 	bl	800602c <USB_ReadInterrupts>
 800271c:	4603      	mov	r3, r0
 800271e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002726:	d10a      	bne.n	800273e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f005 fead 	bl	8008488 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800273c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f003 fc72 	bl	800602c <USB_ReadInterrupts>
 8002748:	4603      	mov	r3, r0
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	2b04      	cmp	r3, #4
 8002750:	d115      	bne.n	800277e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f005 fe9d 	bl	80084a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6859      	ldr	r1, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	430a      	orrs	r2, r1
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	e000      	b.n	800277e <HAL_PCD_IRQHandler+0x992>
      return;
 800277c:	bf00      	nop
    }
  }
}
 800277e:	3734      	adds	r7, #52	; 0x34
 8002780:	46bd      	mov	sp, r7
 8002782:	bd90      	pop	{r4, r7, pc}

08002784 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_PCD_SetAddress+0x1a>
 800279a:	2302      	movs	r3, #2
 800279c:	e013      	b.n	80027c6 <HAL_PCD_SetAddress+0x42>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	78fa      	ldrb	r2, [r7, #3]
 80027b4:	4611      	mov	r1, r2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f003 fbd0 	bl	8005f5c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	4608      	mov	r0, r1
 80027d8:	4611      	mov	r1, r2
 80027da:	461a      	mov	r2, r3
 80027dc:	4603      	mov	r3, r0
 80027de:	70fb      	strb	r3, [r7, #3]
 80027e0:	460b      	mov	r3, r1
 80027e2:	803b      	strh	r3, [r7, #0]
 80027e4:	4613      	mov	r3, r2
 80027e6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	da0f      	bge.n	8002814 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027f4:	78fb      	ldrb	r3, [r7, #3]
 80027f6:	f003 020f 	and.w	r2, r3, #15
 80027fa:	4613      	mov	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	4413      	add	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	3338      	adds	r3, #56	; 0x38
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	4413      	add	r3, r2
 8002808:	3304      	adds	r3, #4
 800280a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2201      	movs	r2, #1
 8002810:	705a      	strb	r2, [r3, #1]
 8002812:	e00f      	b.n	8002834 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	f003 020f 	and.w	r2, r3, #15
 800281a:	4613      	mov	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	4413      	add	r3, r2
 800282a:	3304      	adds	r3, #4
 800282c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	b2da      	uxtb	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002840:	883a      	ldrh	r2, [r7, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	78ba      	ldrb	r2, [r7, #2]
 800284a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	785b      	ldrb	r3, [r3, #1]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d004      	beq.n	800285e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800285e:	78bb      	ldrb	r3, [r7, #2]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d102      	bne.n	800286a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_PCD_EP_Open+0xaa>
 8002874:	2302      	movs	r3, #2
 8002876:	e00e      	b.n	8002896 <HAL_PCD_EP_Open+0xc8>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68f9      	ldr	r1, [r7, #12]
 8002886:	4618      	mov	r0, r3
 8002888:	f002 fc50 	bl	800512c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002894:	7afb      	ldrb	r3, [r7, #11]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b084      	sub	sp, #16
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	460b      	mov	r3, r1
 80028a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	da0f      	bge.n	80028d2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028b2:	78fb      	ldrb	r3, [r7, #3]
 80028b4:	f003 020f 	and.w	r2, r3, #15
 80028b8:	4613      	mov	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	3338      	adds	r3, #56	; 0x38
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	4413      	add	r3, r2
 80028c6:	3304      	adds	r3, #4
 80028c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2201      	movs	r2, #1
 80028ce:	705a      	strb	r2, [r3, #1]
 80028d0:	e00f      	b.n	80028f2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	f003 020f 	and.w	r2, r3, #15
 80028d8:	4613      	mov	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	4413      	add	r3, r2
 80028e8:	3304      	adds	r3, #4
 80028ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80028f2:	78fb      	ldrb	r3, [r7, #3]
 80028f4:	f003 030f 	and.w	r3, r3, #15
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_PCD_EP_Close+0x6e>
 8002908:	2302      	movs	r3, #2
 800290a:	e00e      	b.n	800292a <HAL_PCD_EP_Close+0x8c>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68f9      	ldr	r1, [r7, #12]
 800291a:	4618      	mov	r0, r3
 800291c:	f002 fc8e 	bl	800523c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b086      	sub	sp, #24
 8002936:	af00      	add	r7, sp, #0
 8002938:	60f8      	str	r0, [r7, #12]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]
 800293e:	460b      	mov	r3, r1
 8002940:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002942:	7afb      	ldrb	r3, [r7, #11]
 8002944:	f003 020f 	and.w	r2, r3, #15
 8002948:	4613      	mov	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4413      	add	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4413      	add	r3, r2
 8002958:	3304      	adds	r3, #4
 800295a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2200      	movs	r2, #0
 800296c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2200      	movs	r2, #0
 8002972:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002974:	7afb      	ldrb	r3, [r7, #11]
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	b2da      	uxtb	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d102      	bne.n	800298e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800298e:	7afb      	ldrb	r3, [r7, #11]
 8002990:	f003 030f 	and.w	r3, r3, #15
 8002994:	2b00      	cmp	r3, #0
 8002996:	d109      	bne.n	80029ac <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	6979      	ldr	r1, [r7, #20]
 80029a6:	f002 ff6d 	bl	8005884 <USB_EP0StartXfer>
 80029aa:	e008      	b.n	80029be <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6818      	ldr	r0, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	6979      	ldr	r1, [r7, #20]
 80029ba:	f002 fd1b 	bl	80053f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	460b      	mov	r3, r1
 80029d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029d8:	7afb      	ldrb	r3, [r7, #11]
 80029da:	f003 020f 	and.w	r2, r3, #15
 80029de:	4613      	mov	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4413      	add	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	3338      	adds	r3, #56	; 0x38
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	4413      	add	r3, r2
 80029ec:	3304      	adds	r3, #4
 80029ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	2200      	movs	r2, #0
 8002a00:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2201      	movs	r2, #1
 8002a06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a08:	7afb      	ldrb	r3, [r7, #11]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d102      	bne.n	8002a22 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a22:	7afb      	ldrb	r3, [r7, #11]
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d109      	bne.n	8002a40 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6818      	ldr	r0, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	461a      	mov	r2, r3
 8002a38:	6979      	ldr	r1, [r7, #20]
 8002a3a:	f002 ff23 	bl	8005884 <USB_EP0StartXfer>
 8002a3e:	e008      	b.n	8002a52 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	6979      	ldr	r1, [r7, #20]
 8002a4e:	f002 fcd1 	bl	80053f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a68:	78fb      	ldrb	r3, [r7, #3]
 8002a6a:	f003 020f 	and.w	r2, r3, #15
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d901      	bls.n	8002a7a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e050      	b.n	8002b1c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	da0f      	bge.n	8002aa2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a82:	78fb      	ldrb	r3, [r7, #3]
 8002a84:	f003 020f 	and.w	r2, r3, #15
 8002a88:	4613      	mov	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	3338      	adds	r3, #56	; 0x38
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	4413      	add	r3, r2
 8002a96:	3304      	adds	r3, #4
 8002a98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	705a      	strb	r2, [r3, #1]
 8002aa0:	e00d      	b.n	8002abe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002aa2:	78fa      	ldrb	r2, [r7, #3]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ac4:	78fb      	ldrb	r3, [r7, #3]
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d101      	bne.n	8002ade <HAL_PCD_EP_SetStall+0x82>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e01e      	b.n	8002b1c <HAL_PCD_EP_SetStall+0xc0>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68f9      	ldr	r1, [r7, #12]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f003 f961 	bl	8005db4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002af2:	78fb      	ldrb	r3, [r7, #3]
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10a      	bne.n	8002b12 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6818      	ldr	r0, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	b2d9      	uxtb	r1, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	f003 fb51 	bl	80061b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	f003 020f 	and.w	r2, r3, #15
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d901      	bls.n	8002b42 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e042      	b.n	8002bc8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	da0f      	bge.n	8002b6a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b4a:	78fb      	ldrb	r3, [r7, #3]
 8002b4c:	f003 020f 	and.w	r2, r3, #15
 8002b50:	4613      	mov	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	3338      	adds	r3, #56	; 0x38
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3304      	adds	r3, #4
 8002b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2201      	movs	r2, #1
 8002b66:	705a      	strb	r2, [r3, #1]
 8002b68:	e00f      	b.n	8002b8a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b6a:	78fb      	ldrb	r3, [r7, #3]
 8002b6c:	f003 020f 	and.w	r2, r3, #15
 8002b70:	4613      	mov	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4413      	add	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	4413      	add	r3, r2
 8002b80:	3304      	adds	r3, #4
 8002b82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b90:	78fb      	ldrb	r3, [r7, #3]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_PCD_EP_ClrStall+0x86>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e00e      	b.n	8002bc8 <HAL_PCD_EP_ClrStall+0xa4>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68f9      	ldr	r1, [r7, #12]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f003 f969 	bl	8005e90 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	da0c      	bge.n	8002bfe <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	f003 020f 	and.w	r2, r3, #15
 8002bea:	4613      	mov	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4413      	add	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	3338      	adds	r3, #56	; 0x38
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	e00c      	b.n	8002c18 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bfe:	78fb      	ldrb	r3, [r7, #3]
 8002c00:	f003 020f 	and.w	r2, r3, #15
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	4413      	add	r3, r2
 8002c14:	3304      	adds	r3, #4
 8002c16:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68f9      	ldr	r1, [r7, #12]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f002 ff88 	bl	8005b34 <USB_EPStopXfer>
 8002c24:	4603      	mov	r3, r0
 8002c26:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002c28:	7afb      	ldrb	r3, [r7, #11]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b08a      	sub	sp, #40	; 0x28
 8002c36:	af02      	add	r7, sp, #8
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	3338      	adds	r3, #56	; 0x38
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	4413      	add	r3, r2
 8002c56:	3304      	adds	r3, #4
 8002c58:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a1a      	ldr	r2, [r3, #32]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d901      	bls.n	8002c6a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e06c      	b.n	8002d44 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	699a      	ldr	r2, [r3, #24]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	69fa      	ldr	r2, [r7, #28]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d902      	bls.n	8002c86 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	3303      	adds	r3, #3
 8002c8a:	089b      	lsrs	r3, r3, #2
 8002c8c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c8e:	e02b      	b.n	8002ce8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	699a      	ldr	r2, [r3, #24]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d902      	bls.n	8002cac <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	3303      	adds	r3, #3
 8002cb0:	089b      	lsrs	r3, r3, #2
 8002cb2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6919      	ldr	r1, [r3, #16]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	4603      	mov	r3, r0
 8002cca:	6978      	ldr	r0, [r7, #20]
 8002ccc:	f002 ffdc 	bl	8005c88 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	441a      	add	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a1a      	ldr	r2, [r3, #32]
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	441a      	add	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	015a      	lsls	r2, r3, #5
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d809      	bhi.n	8002d12 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a1a      	ldr	r2, [r3, #32]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d203      	bcs.n	8002d12 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1be      	bne.n	8002c90 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	699a      	ldr	r2, [r3, #24]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d811      	bhi.n	8002d42 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	2201      	movs	r2, #1
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	43db      	mvns	r3, r3
 8002d38:	6939      	ldr	r1, [r7, #16]
 8002d3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d3e:	4013      	ands	r3, r2
 8002d40:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3720      	adds	r7, #32
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	333c      	adds	r3, #60	; 0x3c
 8002d64:	3304      	adds	r3, #4
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d17b      	bne.n	8002e7a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d015      	beq.n	8002db8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	4a61      	ldr	r2, [pc, #388]	; (8002f14 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	f240 80b9 	bls.w	8002f08 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 80b3 	beq.w	8002f08 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dae:	461a      	mov	r2, r3
 8002db0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002db4:	6093      	str	r3, [r2, #8]
 8002db6:	e0a7      	b.n	8002f08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f003 0320 	and.w	r3, r3, #32
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d009      	beq.n	8002dd6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	015a      	lsls	r2, r3, #5
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	4413      	add	r3, r2
 8002dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dce:	461a      	mov	r2, r3
 8002dd0:	2320      	movs	r3, #32
 8002dd2:	6093      	str	r3, [r2, #8]
 8002dd4:	e098      	b.n	8002f08 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f040 8093 	bne.w	8002f08 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	4a4b      	ldr	r2, [pc, #300]	; (8002f14 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d90f      	bls.n	8002e0a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	015a      	lsls	r2, r3, #5
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e00:	461a      	mov	r2, r3
 8002e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e06:	6093      	str	r3, [r2, #8]
 8002e08:	e07e      	b.n	8002f08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	69da      	ldr	r2, [r3, #28]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	0159      	lsls	r1, r3, #5
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	440b      	add	r3, r1
 8002e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e36:	1ad2      	subs	r2, r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d114      	bne.n	8002e6c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d109      	bne.n	8002e5e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e54:	461a      	mov	r2, r3
 8002e56:	2101      	movs	r1, #1
 8002e58:	f003 f9ac 	bl	80061b4 <USB_EP0_OutStart>
 8002e5c:	e006      	b.n	8002e6c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	691a      	ldr	r2, [r3, #16]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	441a      	add	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	4619      	mov	r1, r3
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f005 fa44 	bl	8008300 <HAL_PCD_DataOutStageCallback>
 8002e78:	e046      	b.n	8002f08 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	4a26      	ldr	r2, [pc, #152]	; (8002f18 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d124      	bne.n	8002ecc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e98:	461a      	mov	r2, r3
 8002e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e9e:	6093      	str	r3, [r2, #8]
 8002ea0:	e032      	b.n	8002f08 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2320      	movs	r3, #32
 8002ebc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f005 fa1b 	bl	8008300 <HAL_PCD_DataOutStageCallback>
 8002eca:	e01d      	b.n	8002f08 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d114      	bne.n	8002efc <PCD_EP_OutXfrComplete_int+0x1b0>
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d108      	bne.n	8002efc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	f003 f95c 	bl	80061b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	4619      	mov	r1, r3
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f005 f9fc 	bl	8008300 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3720      	adds	r7, #32
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	4f54300a 	.word	0x4f54300a
 8002f18:	4f54310a 	.word	0x4f54310a

08002f1c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	333c      	adds	r3, #60	; 0x3c
 8002f34:	3304      	adds	r3, #4
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	015a      	lsls	r2, r3, #5
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4413      	add	r3, r2
 8002f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4a15      	ldr	r2, [pc, #84]	; (8002fa4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d90e      	bls.n	8002f70 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d009      	beq.n	8002f70 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f68:	461a      	mov	r2, r3
 8002f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f6e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f005 f9b3 	bl	80082dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d90c      	bls.n	8002f98 <PCD_EP_OutSetupPacket_int+0x7c>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d108      	bne.n	8002f98 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f90:	461a      	mov	r2, r3
 8002f92:	2101      	movs	r1, #1
 8002f94:	f003 f90e 	bl	80061b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	4f54300a 	.word	0x4f54300a

08002fa8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	70fb      	strb	r3, [r7, #3]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d107      	bne.n	8002fd6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002fc6:	883b      	ldrh	r3, [r7, #0]
 8002fc8:	0419      	lsls	r1, r3, #16
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	629a      	str	r2, [r3, #40]	; 0x28
 8002fd4:	e028      	b.n	8003028 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	0c1b      	lsrs	r3, r3, #16
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	73fb      	strb	r3, [r7, #15]
 8002fe8:	e00d      	b.n	8003006 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	3340      	adds	r3, #64	; 0x40
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	0c1b      	lsrs	r3, r3, #16
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	3301      	adds	r3, #1
 8003004:	73fb      	strb	r3, [r7, #15]
 8003006:	7bfa      	ldrb	r2, [r7, #15]
 8003008:	78fb      	ldrb	r3, [r7, #3]
 800300a:	3b01      	subs	r3, #1
 800300c:	429a      	cmp	r2, r3
 800300e:	d3ec      	bcc.n	8002fea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003010:	883b      	ldrh	r3, [r7, #0]
 8003012:	0418      	lsls	r0, r3, #16
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6819      	ldr	r1, [r3, #0]
 8003018:	78fb      	ldrb	r3, [r7, #3]
 800301a:	3b01      	subs	r3, #1
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	4302      	orrs	r2, r0
 8003020:	3340      	adds	r3, #64	; 0x40
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	460b      	mov	r3, r1
 8003040:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	887a      	ldrh	r2, [r7, #2]
 8003048:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800308a:	f043 0303 	orr.w	r3, r3, #3
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0cc      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030b4:	4b68      	ldr	r3, [pc, #416]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 030f 	and.w	r3, r3, #15
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d90c      	bls.n	80030dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c2:	4b65      	ldr	r3, [pc, #404]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ca:	4b63      	ldr	r3, [pc, #396]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0b8      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d020      	beq.n	800312a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f4:	4b59      	ldr	r3, [pc, #356]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	4a58      	ldr	r2, [pc, #352]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800310c:	4b53      	ldr	r3, [pc, #332]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	4a52      	ldr	r2, [pc, #328]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003116:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003118:	4b50      	ldr	r3, [pc, #320]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	494d      	ldr	r1, [pc, #308]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d044      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d107      	bne.n	800314e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313e:	4b47      	ldr	r3, [pc, #284]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d119      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e07f      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d003      	beq.n	800315e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800315a:	2b03      	cmp	r3, #3
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315e:	4b3f      	ldr	r3, [pc, #252]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e06f      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316e:	4b3b      	ldr	r3, [pc, #236]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e067      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800317e:	4b37      	ldr	r3, [pc, #220]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f023 0203 	bic.w	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4934      	ldr	r1, [pc, #208]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800318c:	4313      	orrs	r3, r2
 800318e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003190:	f7fe f9e6 	bl	8001560 <HAL_GetTick>
 8003194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003196:	e00a      	b.n	80031ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003198:	f7fe f9e2 	bl	8001560 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e04f      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	4b2b      	ldr	r3, [pc, #172]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 020c 	and.w	r2, r3, #12
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	429a      	cmp	r2, r3
 80031be:	d1eb      	bne.n	8003198 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031c0:	4b25      	ldr	r3, [pc, #148]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 030f 	and.w	r3, r3, #15
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d20c      	bcs.n	80031e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ce:	4b22      	ldr	r3, [pc, #136]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b20      	ldr	r3, [pc, #128]	; (8003258 <HAL_RCC_ClockConfig+0x1b8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e032      	b.n	800324e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f4:	4b19      	ldr	r3, [pc, #100]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4916      	ldr	r1, [pc, #88]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	4313      	orrs	r3, r2
 8003204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003212:	4b12      	ldr	r3, [pc, #72]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	490e      	ldr	r1, [pc, #56]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	4313      	orrs	r3, r2
 8003224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003226:	f000 fb7f 	bl	8003928 <HAL_RCC_GetSysClockFreq>
 800322a:	4602      	mov	r2, r0
 800322c:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	490a      	ldr	r1, [pc, #40]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 8003238:	5ccb      	ldrb	r3, [r1, r3]
 800323a:	fa22 f303 	lsr.w	r3, r2, r3
 800323e:	4a09      	ldr	r2, [pc, #36]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003242:	4b09      	ldr	r3, [pc, #36]	; (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7fe f946 	bl	80014d8 <HAL_InitTick>

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40023c00 	.word	0x40023c00
 800325c:	40023800 	.word	0x40023800
 8003260:	0800b49c 	.word	0x0800b49c
 8003264:	20000000 	.word	0x20000000
 8003268:	20000004 	.word	0x20000004

0800326c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003270:	4b03      	ldr	r3, [pc, #12]	; (8003280 <HAL_RCC_GetHCLKFreq+0x14>)
 8003272:	681b      	ldr	r3, [r3, #0]
}
 8003274:	4618      	mov	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	20000000 	.word	0x20000000

08003284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003288:	f7ff fff0 	bl	800326c <HAL_RCC_GetHCLKFreq>
 800328c:	4602      	mov	r2, r0
 800328e:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	0a9b      	lsrs	r3, r3, #10
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	4903      	ldr	r1, [pc, #12]	; (80032a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800329a:	5ccb      	ldrb	r3, [r1, r3]
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40023800 	.word	0x40023800
 80032a8:	0800b4ac 	.word	0x0800b4ac

080032ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032b0:	f7ff ffdc 	bl	800326c <HAL_RCC_GetHCLKFreq>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	0b5b      	lsrs	r3, r3, #13
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	4903      	ldr	r1, [pc, #12]	; (80032d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032c2:	5ccb      	ldrb	r3, [r1, r3]
 80032c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40023800 	.word	0x40023800
 80032d0:	0800b4ac 	.word	0x0800b4ac

080032d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08c      	sub	sp, #48	; 0x30
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d010      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800330c:	4b6f      	ldr	r3, [pc, #444]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800330e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003312:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331a:	496c      	ldr	r1, [pc, #432]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800332a:	2301      	movs	r3, #1
 800332c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d010      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800333a:	4b64      	ldr	r3, [pc, #400]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800333c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003340:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003348:	4960      	ldr	r1, [pc, #384]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003358:	2301      	movs	r3, #1
 800335a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d017      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003368:	4b58      	ldr	r3, [pc, #352]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800336a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800336e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	4955      	ldr	r1, [pc, #340]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003386:	d101      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003388:	2301      	movs	r3, #1
 800338a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003394:	2301      	movs	r3, #1
 8003396:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d017      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033a4:	4b49      	ldr	r3, [pc, #292]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b2:	4946      	ldr	r1, [pc, #280]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033c2:	d101      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80033c4:	2301      	movs	r3, #1
 80033c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80033d0:	2301      	movs	r3, #1
 80033d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 808a 	beq.w	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	4b39      	ldr	r3, [pc, #228]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	4a38      	ldr	r2, [pc, #224]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f0:	6413      	str	r3, [r2, #64]	; 0x40
 80033f2:	4b36      	ldr	r3, [pc, #216]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fa:	60bb      	str	r3, [r7, #8]
 80033fc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80033fe:	4b34      	ldr	r3, [pc, #208]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a33      	ldr	r2, [pc, #204]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003408:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800340a:	f7fe f8a9 	bl	8001560 <HAL_GetTick>
 800340e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003410:	e008      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003412:	f7fe f8a5 	bl	8001560 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e278      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003424:	4b2a      	ldr	r3, [pc, #168]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003430:	4b26      	ldr	r3, [pc, #152]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003438:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d02f      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003448:	6a3a      	ldr	r2, [r7, #32]
 800344a:	429a      	cmp	r2, r3
 800344c:	d028      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800344e:	4b1f      	ldr	r3, [pc, #124]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003456:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003458:	4b1e      	ldr	r3, [pc, #120]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800345a:	2201      	movs	r2, #1
 800345c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800345e:	4b1d      	ldr	r3, [pc, #116]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003464:	4a19      	ldr	r2, [pc, #100]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800346a:	4b18      	ldr	r3, [pc, #96]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b01      	cmp	r3, #1
 8003474:	d114      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003476:	f7fe f873 	bl	8001560 <HAL_GetTick>
 800347a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347c:	e00a      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800347e:	f7fe f86f 	bl	8001560 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	f241 3288 	movw	r2, #5000	; 0x1388
 800348c:	4293      	cmp	r3, r2
 800348e:	d901      	bls.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e240      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003494:	4b0d      	ldr	r3, [pc, #52]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0ee      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034ac:	d114      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80034ae:	4b07      	ldr	r3, [pc, #28]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80034be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c2:	4902      	ldr	r1, [pc, #8]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	608b      	str	r3, [r1, #8]
 80034c8:	e00c      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80034ca:	bf00      	nop
 80034cc:	40023800 	.word	0x40023800
 80034d0:	40007000 	.word	0x40007000
 80034d4:	42470e40 	.word	0x42470e40
 80034d8:	4b4a      	ldr	r3, [pc, #296]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	4a49      	ldr	r2, [pc, #292]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80034e2:	6093      	str	r3, [r2, #8]
 80034e4:	4b47      	ldr	r3, [pc, #284]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f0:	4944      	ldr	r1, [pc, #272]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d004      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003508:	4b3f      	ldr	r3, [pc, #252]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800350a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003518:	4b3a      	ldr	r3, [pc, #232]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800351a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800351e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003526:	4937      	ldr	r1, [pc, #220]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800353a:	4b32      	ldr	r3, [pc, #200]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800353c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003540:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003548:	492e      	ldr	r1, [pc, #184]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003558:	2b00      	cmp	r3, #0
 800355a:	d011      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800355c:	4b29      	ldr	r3, [pc, #164]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800355e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003562:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356a:	4926      	ldr	r1, [pc, #152]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003576:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800357a:	d101      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800357c:	2301      	movs	r3, #1
 800357e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800358c:	4b1d      	ldr	r3, [pc, #116]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800358e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003592:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	491a      	ldr	r1, [pc, #104]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d011      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80035ae:	4b15      	ldr	r3, [pc, #84]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035bc:	4911      	ldr	r1, [pc, #68]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035cc:	d101      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80035ce:	2301      	movs	r3, #1
 80035d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80035d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d005      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035e0:	f040 80ff 	bne.w	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80035e4:	4b09      	ldr	r3, [pc, #36]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80035ea:	f7fd ffb9 	bl	8001560 <HAL_GetTick>
 80035ee:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035f0:	e00e      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80035f2:	f7fd ffb5 	bl	8001560 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d907      	bls.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e188      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003604:	40023800 	.word	0x40023800
 8003608:	424711e0 	.word	0x424711e0
 800360c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003610:	4b7e      	ldr	r3, [pc, #504]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1ea      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362c:	2b00      	cmp	r3, #0
 800362e:	d009      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003638:	2b00      	cmp	r3, #0
 800363a:	d028      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003640:	2b00      	cmp	r3, #0
 8003642:	d124      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003644:	4b71      	ldr	r3, [pc, #452]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800364a:	0c1b      	lsrs	r3, r3, #16
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	3301      	adds	r3, #1
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003656:	4b6d      	ldr	r3, [pc, #436]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800365c:	0e1b      	lsrs	r3, r3, #24
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	019b      	lsls	r3, r3, #6
 800366e:	431a      	orrs	r2, r3
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	085b      	lsrs	r3, r3, #1
 8003674:	3b01      	subs	r3, #1
 8003676:	041b      	lsls	r3, r3, #16
 8003678:	431a      	orrs	r2, r3
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	061b      	lsls	r3, r3, #24
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	071b      	lsls	r3, r3, #28
 8003686:	4961      	ldr	r1, [pc, #388]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b00      	cmp	r3, #0
 8003698:	d004      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036a2:	d00a      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d035      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036b8:	d130      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80036ba:	4b54      	ldr	r3, [pc, #336]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036c0:	0c1b      	lsrs	r3, r3, #16
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	3301      	adds	r3, #1
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036cc:	4b4f      	ldr	r3, [pc, #316]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d2:	0f1b      	lsrs	r3, r3, #28
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	019b      	lsls	r3, r3, #6
 80036e4:	431a      	orrs	r2, r3
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	085b      	lsrs	r3, r3, #1
 80036ea:	3b01      	subs	r3, #1
 80036ec:	041b      	lsls	r3, r3, #16
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	061b      	lsls	r3, r3, #24
 80036f6:	431a      	orrs	r2, r3
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	071b      	lsls	r3, r3, #28
 80036fc:	4943      	ldr	r1, [pc, #268]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003704:	4b41      	ldr	r3, [pc, #260]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800370a:	f023 021f 	bic.w	r2, r3, #31
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	3b01      	subs	r3, #1
 8003714:	493d      	ldr	r1, [pc, #244]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003724:	2b00      	cmp	r3, #0
 8003726:	d029      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003730:	d124      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003732:	4b36      	ldr	r3, [pc, #216]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003738:	0c1b      	lsrs	r3, r3, #16
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	3301      	adds	r3, #1
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003744:	4b31      	ldr	r3, [pc, #196]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800374a:	0f1b      	lsrs	r3, r3, #28
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	019b      	lsls	r3, r3, #6
 800375c:	431a      	orrs	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	085b      	lsrs	r3, r3, #1
 8003764:	3b01      	subs	r3, #1
 8003766:	041b      	lsls	r3, r3, #16
 8003768:	431a      	orrs	r2, r3
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	061b      	lsls	r3, r3, #24
 800376e:	431a      	orrs	r2, r3
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	071b      	lsls	r3, r3, #28
 8003774:	4925      	ldr	r1, [pc, #148]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003784:	2b00      	cmp	r3, #0
 8003786:	d016      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	019b      	lsls	r3, r3, #6
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	085b      	lsrs	r3, r3, #1
 800379a:	3b01      	subs	r3, #1
 800379c:	041b      	lsls	r3, r3, #16
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	061b      	lsls	r3, r3, #24
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	071b      	lsls	r3, r3, #28
 80037ae:	4917      	ldr	r1, [pc, #92]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80037b6:	4b16      	ldr	r3, [pc, #88]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80037bc:	f7fd fed0 	bl	8001560 <HAL_GetTick>
 80037c0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80037c4:	f7fd fecc 	bl	8001560 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e09f      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037d6:	4b0d      	ldr	r3, [pc, #52]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f0      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80037e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	f040 8095 	bne.w	8003914 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80037ea:	4b0a      	ldr	r3, [pc, #40]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80037f0:	f7fd feb6 	bl	8001560 <HAL_GetTick>
 80037f4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037f6:	e00f      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80037f8:	f7fd feb2 	bl	8001560 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d908      	bls.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e085      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800380a:	bf00      	nop
 800380c:	40023800 	.word	0x40023800
 8003810:	42470068 	.word	0x42470068
 8003814:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003818:	4b41      	ldr	r3, [pc, #260]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003824:	d0e8      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	2b00      	cmp	r3, #0
 8003838:	d009      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003842:	2b00      	cmp	r3, #0
 8003844:	d02b      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384a:	2b00      	cmp	r3, #0
 800384c:	d127      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800384e:	4b34      	ldr	r3, [pc, #208]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003854:	0c1b      	lsrs	r3, r3, #16
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	3301      	adds	r3, #1
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699a      	ldr	r2, [r3, #24]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	019b      	lsls	r3, r3, #6
 800386a:	431a      	orrs	r2, r3
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	085b      	lsrs	r3, r3, #1
 8003870:	3b01      	subs	r3, #1
 8003872:	041b      	lsls	r3, r3, #16
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	061b      	lsls	r3, r3, #24
 800387c:	4928      	ldr	r1, [pc, #160]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003884:	4b26      	ldr	r3, [pc, #152]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003886:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800388a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	3b01      	subs	r3, #1
 8003894:	021b      	lsls	r3, r3, #8
 8003896:	4922      	ldr	r1, [pc, #136]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d01d      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038b2:	d118      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038b4:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ba:	0e1b      	lsrs	r3, r3, #24
 80038bc:	f003 030f 	and.w	r3, r3, #15
 80038c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699a      	ldr	r2, [r3, #24]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	019b      	lsls	r3, r3, #6
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	085b      	lsrs	r3, r3, #1
 80038d4:	3b01      	subs	r3, #1
 80038d6:	041b      	lsls	r3, r3, #16
 80038d8:	431a      	orrs	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	061b      	lsls	r3, r3, #24
 80038de:	4910      	ldr	r1, [pc, #64]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80038e6:	4b0f      	ldr	r3, [pc, #60]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038ec:	f7fd fe38 	bl	8001560 <HAL_GetTick>
 80038f0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80038f4:	f7fd fe34 	bl	8001560 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e007      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003906:	4b06      	ldr	r3, [pc, #24]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800390e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003912:	d1ef      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3730      	adds	r7, #48	; 0x30
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40023800 	.word	0x40023800
 8003924:	42470070 	.word	0x42470070

08003928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800392c:	b0ae      	sub	sp, #184	; 0xb8
 800392e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003930:	2300      	movs	r3, #0
 8003932:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003942:	2300      	movs	r3, #0
 8003944:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800394e:	4bcb      	ldr	r3, [pc, #812]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	2b0c      	cmp	r3, #12
 8003958:	f200 8206 	bhi.w	8003d68 <HAL_RCC_GetSysClockFreq+0x440>
 800395c:	a201      	add	r2, pc, #4	; (adr r2, 8003964 <HAL_RCC_GetSysClockFreq+0x3c>)
 800395e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003962:	bf00      	nop
 8003964:	08003999 	.word	0x08003999
 8003968:	08003d69 	.word	0x08003d69
 800396c:	08003d69 	.word	0x08003d69
 8003970:	08003d69 	.word	0x08003d69
 8003974:	080039a1 	.word	0x080039a1
 8003978:	08003d69 	.word	0x08003d69
 800397c:	08003d69 	.word	0x08003d69
 8003980:	08003d69 	.word	0x08003d69
 8003984:	080039a9 	.word	0x080039a9
 8003988:	08003d69 	.word	0x08003d69
 800398c:	08003d69 	.word	0x08003d69
 8003990:	08003d69 	.word	0x08003d69
 8003994:	08003b99 	.word	0x08003b99
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003998:	4bb9      	ldr	r3, [pc, #740]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x358>)
 800399a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800399e:	e1e7      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039a0:	4bb8      	ldr	r3, [pc, #736]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x35c>)
 80039a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80039a6:	e1e3      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039a8:	4bb4      	ldr	r3, [pc, #720]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x354>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039b4:	4bb1      	ldr	r3, [pc, #708]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x354>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d071      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039c0:	4bae      	ldr	r3, [pc, #696]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x354>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	099b      	lsrs	r3, r3, #6
 80039c6:	2200      	movs	r2, #0
 80039c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039cc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80039d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039dc:	2300      	movs	r3, #0
 80039de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80039e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039e6:	4622      	mov	r2, r4
 80039e8:	462b      	mov	r3, r5
 80039ea:	f04f 0000 	mov.w	r0, #0
 80039ee:	f04f 0100 	mov.w	r1, #0
 80039f2:	0159      	lsls	r1, r3, #5
 80039f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039f8:	0150      	lsls	r0, r2, #5
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	4621      	mov	r1, r4
 8003a00:	1a51      	subs	r1, r2, r1
 8003a02:	6439      	str	r1, [r7, #64]	; 0x40
 8003a04:	4629      	mov	r1, r5
 8003a06:	eb63 0301 	sbc.w	r3, r3, r1
 8003a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	f04f 0300 	mov.w	r3, #0
 8003a14:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003a18:	4649      	mov	r1, r9
 8003a1a:	018b      	lsls	r3, r1, #6
 8003a1c:	4641      	mov	r1, r8
 8003a1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a22:	4641      	mov	r1, r8
 8003a24:	018a      	lsls	r2, r1, #6
 8003a26:	4641      	mov	r1, r8
 8003a28:	1a51      	subs	r1, r2, r1
 8003a2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a2c:	4649      	mov	r1, r9
 8003a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	f04f 0300 	mov.w	r3, #0
 8003a3c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003a40:	4649      	mov	r1, r9
 8003a42:	00cb      	lsls	r3, r1, #3
 8003a44:	4641      	mov	r1, r8
 8003a46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a4a:	4641      	mov	r1, r8
 8003a4c:	00ca      	lsls	r2, r1, #3
 8003a4e:	4610      	mov	r0, r2
 8003a50:	4619      	mov	r1, r3
 8003a52:	4603      	mov	r3, r0
 8003a54:	4622      	mov	r2, r4
 8003a56:	189b      	adds	r3, r3, r2
 8003a58:	633b      	str	r3, [r7, #48]	; 0x30
 8003a5a:	462b      	mov	r3, r5
 8003a5c:	460a      	mov	r2, r1
 8003a5e:	eb42 0303 	adc.w	r3, r2, r3
 8003a62:	637b      	str	r3, [r7, #52]	; 0x34
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a70:	4629      	mov	r1, r5
 8003a72:	024b      	lsls	r3, r1, #9
 8003a74:	4621      	mov	r1, r4
 8003a76:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a7a:	4621      	mov	r1, r4
 8003a7c:	024a      	lsls	r2, r1, #9
 8003a7e:	4610      	mov	r0, r2
 8003a80:	4619      	mov	r1, r3
 8003a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a86:	2200      	movs	r2, #0
 8003a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a90:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003a94:	f7fd f8a8 	bl	8000be8 <__aeabi_uldivmod>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003aa2:	e067      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aa4:	4b75      	ldr	r3, [pc, #468]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	099b      	lsrs	r3, r3, #6
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ab0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003ab4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003abc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003abe:	2300      	movs	r3, #0
 8003ac0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ac2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003ac6:	4622      	mov	r2, r4
 8003ac8:	462b      	mov	r3, r5
 8003aca:	f04f 0000 	mov.w	r0, #0
 8003ace:	f04f 0100 	mov.w	r1, #0
 8003ad2:	0159      	lsls	r1, r3, #5
 8003ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ad8:	0150      	lsls	r0, r2, #5
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	4621      	mov	r1, r4
 8003ae0:	1a51      	subs	r1, r2, r1
 8003ae2:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ae4:	4629      	mov	r1, r5
 8003ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8003aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003af8:	4649      	mov	r1, r9
 8003afa:	018b      	lsls	r3, r1, #6
 8003afc:	4641      	mov	r1, r8
 8003afe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b02:	4641      	mov	r1, r8
 8003b04:	018a      	lsls	r2, r1, #6
 8003b06:	4641      	mov	r1, r8
 8003b08:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b0c:	4649      	mov	r1, r9
 8003b0e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b1e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b26:	4692      	mov	sl, r2
 8003b28:	469b      	mov	fp, r3
 8003b2a:	4623      	mov	r3, r4
 8003b2c:	eb1a 0303 	adds.w	r3, sl, r3
 8003b30:	623b      	str	r3, [r7, #32]
 8003b32:	462b      	mov	r3, r5
 8003b34:	eb4b 0303 	adc.w	r3, fp, r3
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003b46:	4629      	mov	r1, r5
 8003b48:	028b      	lsls	r3, r1, #10
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b50:	4621      	mov	r1, r4
 8003b52:	028a      	lsls	r2, r1, #10
 8003b54:	4610      	mov	r0, r2
 8003b56:	4619      	mov	r1, r3
 8003b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	673b      	str	r3, [r7, #112]	; 0x70
 8003b60:	677a      	str	r2, [r7, #116]	; 0x74
 8003b62:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003b66:	f7fd f83f 	bl	8000be8 <__aeabi_uldivmod>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	4613      	mov	r3, r2
 8003b70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b74:	4b41      	ldr	r3, [pc, #260]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	0c1b      	lsrs	r3, r3, #16
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	3301      	adds	r3, #1
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003b86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b96:	e0eb      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b98:	4b38      	ldr	r3, [pc, #224]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ba4:	4b35      	ldr	r3, [pc, #212]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d06b      	beq.n	8003c88 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bb0:	4b32      	ldr	r3, [pc, #200]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	099b      	lsrs	r3, r3, #6
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003bbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc2:	663b      	str	r3, [r7, #96]	; 0x60
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	667b      	str	r3, [r7, #100]	; 0x64
 8003bc8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003bcc:	4622      	mov	r2, r4
 8003bce:	462b      	mov	r3, r5
 8003bd0:	f04f 0000 	mov.w	r0, #0
 8003bd4:	f04f 0100 	mov.w	r1, #0
 8003bd8:	0159      	lsls	r1, r3, #5
 8003bda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bde:	0150      	lsls	r0, r2, #5
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4621      	mov	r1, r4
 8003be6:	1a51      	subs	r1, r2, r1
 8003be8:	61b9      	str	r1, [r7, #24]
 8003bea:	4629      	mov	r1, r5
 8003bec:	eb63 0301 	sbc.w	r3, r3, r1
 8003bf0:	61fb      	str	r3, [r7, #28]
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003bfe:	4659      	mov	r1, fp
 8003c00:	018b      	lsls	r3, r1, #6
 8003c02:	4651      	mov	r1, sl
 8003c04:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c08:	4651      	mov	r1, sl
 8003c0a:	018a      	lsls	r2, r1, #6
 8003c0c:	4651      	mov	r1, sl
 8003c0e:	ebb2 0801 	subs.w	r8, r2, r1
 8003c12:	4659      	mov	r1, fp
 8003c14:	eb63 0901 	sbc.w	r9, r3, r1
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c24:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c28:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c2c:	4690      	mov	r8, r2
 8003c2e:	4699      	mov	r9, r3
 8003c30:	4623      	mov	r3, r4
 8003c32:	eb18 0303 	adds.w	r3, r8, r3
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	462b      	mov	r3, r5
 8003c3a:	eb49 0303 	adc.w	r3, r9, r3
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003c4c:	4629      	mov	r1, r5
 8003c4e:	024b      	lsls	r3, r1, #9
 8003c50:	4621      	mov	r1, r4
 8003c52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c56:	4621      	mov	r1, r4
 8003c58:	024a      	lsls	r2, r1, #9
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c62:	2200      	movs	r2, #0
 8003c64:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c66:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c68:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c6c:	f7fc ffbc 	bl	8000be8 <__aeabi_uldivmod>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4613      	mov	r3, r2
 8003c76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c7a:	e065      	b.n	8003d48 <HAL_RCC_GetSysClockFreq+0x420>
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	00f42400 	.word	0x00f42400
 8003c84:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c88:	4b3d      	ldr	r3, [pc, #244]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	099b      	lsrs	r3, r3, #6
 8003c8e:	2200      	movs	r2, #0
 8003c90:	4618      	mov	r0, r3
 8003c92:	4611      	mov	r1, r2
 8003c94:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c98:	653b      	str	r3, [r7, #80]	; 0x50
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	657b      	str	r3, [r7, #84]	; 0x54
 8003c9e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003ca2:	4642      	mov	r2, r8
 8003ca4:	464b      	mov	r3, r9
 8003ca6:	f04f 0000 	mov.w	r0, #0
 8003caa:	f04f 0100 	mov.w	r1, #0
 8003cae:	0159      	lsls	r1, r3, #5
 8003cb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cb4:	0150      	lsls	r0, r2, #5
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4641      	mov	r1, r8
 8003cbc:	1a51      	subs	r1, r2, r1
 8003cbe:	60b9      	str	r1, [r7, #8]
 8003cc0:	4649      	mov	r1, r9
 8003cc2:	eb63 0301 	sbc.w	r3, r3, r1
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003cd4:	4659      	mov	r1, fp
 8003cd6:	018b      	lsls	r3, r1, #6
 8003cd8:	4651      	mov	r1, sl
 8003cda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cde:	4651      	mov	r1, sl
 8003ce0:	018a      	lsls	r2, r1, #6
 8003ce2:	4651      	mov	r1, sl
 8003ce4:	1a54      	subs	r4, r2, r1
 8003ce6:	4659      	mov	r1, fp
 8003ce8:	eb63 0501 	sbc.w	r5, r3, r1
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	00eb      	lsls	r3, r5, #3
 8003cf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cfa:	00e2      	lsls	r2, r4, #3
 8003cfc:	4614      	mov	r4, r2
 8003cfe:	461d      	mov	r5, r3
 8003d00:	4643      	mov	r3, r8
 8003d02:	18e3      	adds	r3, r4, r3
 8003d04:	603b      	str	r3, [r7, #0]
 8003d06:	464b      	mov	r3, r9
 8003d08:	eb45 0303 	adc.w	r3, r5, r3
 8003d0c:	607b      	str	r3, [r7, #4]
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	f04f 0300 	mov.w	r3, #0
 8003d16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d1a:	4629      	mov	r1, r5
 8003d1c:	028b      	lsls	r3, r1, #10
 8003d1e:	4621      	mov	r1, r4
 8003d20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d24:	4621      	mov	r1, r4
 8003d26:	028a      	lsls	r2, r1, #10
 8003d28:	4610      	mov	r0, r2
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d30:	2200      	movs	r2, #0
 8003d32:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d34:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003d36:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d3a:	f7fc ff55 	bl	8000be8 <__aeabi_uldivmod>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	4613      	mov	r3, r2
 8003d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003d48:	4b0d      	ldr	r3, [pc, #52]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	0f1b      	lsrs	r3, r3, #28
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003d56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d66:	e003      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d68:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	37b8      	adds	r7, #184	; 0xb8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d7e:	bf00      	nop
 8003d80:	40023800 	.word	0x40023800
 8003d84:	00f42400 	.word	0x00f42400

08003d88 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e28d      	b.n	80042b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 8083 	beq.w	8003eae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003da8:	4b94      	ldr	r3, [pc, #592]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 030c 	and.w	r3, r3, #12
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d019      	beq.n	8003de8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003db4:	4b91      	ldr	r3, [pc, #580]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d106      	bne.n	8003dce <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003dc0:	4b8e      	ldr	r3, [pc, #568]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dcc:	d00c      	beq.n	8003de8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dce:	4b8b      	ldr	r3, [pc, #556]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003dd6:	2b0c      	cmp	r3, #12
 8003dd8:	d112      	bne.n	8003e00 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dda:	4b88      	ldr	r3, [pc, #544]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003de2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003de6:	d10b      	bne.n	8003e00 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de8:	4b84      	ldr	r3, [pc, #528]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d05b      	beq.n	8003eac <HAL_RCC_OscConfig+0x124>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d157      	bne.n	8003eac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e25a      	b.n	80042b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e08:	d106      	bne.n	8003e18 <HAL_RCC_OscConfig+0x90>
 8003e0a:	4b7c      	ldr	r3, [pc, #496]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a7b      	ldr	r2, [pc, #492]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	e01d      	b.n	8003e54 <HAL_RCC_OscConfig+0xcc>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e20:	d10c      	bne.n	8003e3c <HAL_RCC_OscConfig+0xb4>
 8003e22:	4b76      	ldr	r3, [pc, #472]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a75      	ldr	r2, [pc, #468]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003e28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	4b73      	ldr	r3, [pc, #460]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a72      	ldr	r2, [pc, #456]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	e00b      	b.n	8003e54 <HAL_RCC_OscConfig+0xcc>
 8003e3c:	4b6f      	ldr	r3, [pc, #444]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a6e      	ldr	r2, [pc, #440]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	4b6c      	ldr	r3, [pc, #432]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a6b      	ldr	r2, [pc, #428]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d013      	beq.n	8003e84 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5c:	f7fd fb80 	bl	8001560 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e64:	f7fd fb7c 	bl	8001560 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b64      	cmp	r3, #100	; 0x64
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e21f      	b.n	80042b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e76:	4b61      	ldr	r3, [pc, #388]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0f0      	beq.n	8003e64 <HAL_RCC_OscConfig+0xdc>
 8003e82:	e014      	b.n	8003eae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e84:	f7fd fb6c 	bl	8001560 <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e8c:	f7fd fb68 	bl	8001560 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b64      	cmp	r3, #100	; 0x64
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e20b      	b.n	80042b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e9e:	4b57      	ldr	r3, [pc, #348]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1f0      	bne.n	8003e8c <HAL_RCC_OscConfig+0x104>
 8003eaa:	e000      	b.n	8003eae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d06f      	beq.n	8003f9a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003eba:	4b50      	ldr	r3, [pc, #320]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 030c 	and.w	r3, r3, #12
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d017      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ec6:	4b4d      	ldr	r3, [pc, #308]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d105      	bne.n	8003ede <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ed2:	4b4a      	ldr	r3, [pc, #296]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00b      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ede:	4b47      	ldr	r3, [pc, #284]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ee6:	2b0c      	cmp	r3, #12
 8003ee8:	d11c      	bne.n	8003f24 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eea:	4b44      	ldr	r3, [pc, #272]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d116      	bne.n	8003f24 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ef6:	4b41      	ldr	r3, [pc, #260]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d005      	beq.n	8003f0e <HAL_RCC_OscConfig+0x186>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d001      	beq.n	8003f0e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e1d3      	b.n	80042b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f0e:	4b3b      	ldr	r3, [pc, #236]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	4937      	ldr	r1, [pc, #220]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f22:	e03a      	b.n	8003f9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d020      	beq.n	8003f6e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f2c:	4b34      	ldr	r3, [pc, #208]	; (8004000 <HAL_RCC_OscConfig+0x278>)
 8003f2e:	2201      	movs	r2, #1
 8003f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f32:	f7fd fb15 	bl	8001560 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f3a:	f7fd fb11 	bl	8001560 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e1b4      	b.n	80042b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f4c:	4b2b      	ldr	r3, [pc, #172]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0f0      	beq.n	8003f3a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f58:	4b28      	ldr	r3, [pc, #160]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	4925      	ldr	r1, [pc, #148]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	600b      	str	r3, [r1, #0]
 8003f6c:	e015      	b.n	8003f9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f6e:	4b24      	ldr	r3, [pc, #144]	; (8004000 <HAL_RCC_OscConfig+0x278>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f74:	f7fd faf4 	bl	8001560 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f7c:	f7fd faf0 	bl	8001560 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e193      	b.n	80042b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8e:	4b1b      	ldr	r3, [pc, #108]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f0      	bne.n	8003f7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d036      	beq.n	8004014 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d016      	beq.n	8003fdc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fae:	4b15      	ldr	r3, [pc, #84]	; (8004004 <HAL_RCC_OscConfig+0x27c>)
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb4:	f7fd fad4 	bl	8001560 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fbc:	f7fd fad0 	bl	8001560 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e173      	b.n	80042b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fce:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <HAL_RCC_OscConfig+0x274>)
 8003fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0x234>
 8003fda:	e01b      	b.n	8004014 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fdc:	4b09      	ldr	r3, [pc, #36]	; (8004004 <HAL_RCC_OscConfig+0x27c>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe2:	f7fd fabd 	bl	8001560 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe8:	e00e      	b.n	8004008 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fea:	f7fd fab9 	bl	8001560 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d907      	bls.n	8004008 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e15c      	b.n	80042b6 <HAL_RCC_OscConfig+0x52e>
 8003ffc:	40023800 	.word	0x40023800
 8004000:	42470000 	.word	0x42470000
 8004004:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004008:	4b8a      	ldr	r3, [pc, #552]	; (8004234 <HAL_RCC_OscConfig+0x4ac>)
 800400a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1ea      	bne.n	8003fea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 8097 	beq.w	8004150 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004022:	2300      	movs	r3, #0
 8004024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004026:	4b83      	ldr	r3, [pc, #524]	; (8004234 <HAL_RCC_OscConfig+0x4ac>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10f      	bne.n	8004052 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004032:	2300      	movs	r3, #0
 8004034:	60bb      	str	r3, [r7, #8]
 8004036:	4b7f      	ldr	r3, [pc, #508]	; (8004234 <HAL_RCC_OscConfig+0x4ac>)
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	4a7e      	ldr	r2, [pc, #504]	; (8004234 <HAL_RCC_OscConfig+0x4ac>)
 800403c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004040:	6413      	str	r3, [r2, #64]	; 0x40
 8004042:	4b7c      	ldr	r3, [pc, #496]	; (8004234 <HAL_RCC_OscConfig+0x4ac>)
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404a:	60bb      	str	r3, [r7, #8]
 800404c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800404e:	2301      	movs	r3, #1
 8004050:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004052:	4b79      	ldr	r3, [pc, #484]	; (8004238 <HAL_RCC_OscConfig+0x4b0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405a:	2b00      	cmp	r3, #0
 800405c:	d118      	bne.n	8004090 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800405e:	4b76      	ldr	r3, [pc, #472]	; (8004238 <HAL_RCC_OscConfig+0x4b0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a75      	ldr	r2, [pc, #468]	; (8004238 <HAL_RCC_OscConfig+0x4b0>)
 8004064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800406a:	f7fd fa79 	bl	8001560 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004072:	f7fd fa75 	bl	8001560 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e118      	b.n	80042b6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004084:	4b6c      	ldr	r3, [pc, #432]	; (8004238 <HAL_RCC_OscConfig+0x4b0>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0f0      	beq.n	8004072 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d106      	bne.n	80040a6 <HAL_RCC_OscConfig+0x31e>
 8004098:	4b66      	ldr	r3, [pc, #408]	; (8004234 <HAL_RCC_OscConfig+0x4ac>)
 800409a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409c:	4a65      	ldr	r2, [pc, #404]	; (8004234 <HAL_RCC_OscConfig+0x4ac>)
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	6713      	str	r3, [r2, #112]	; 0x70
 80040a4:	e01c      	b.n	80040e0 <HAL_RCC_OscConfig+0x358>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	2b05      	cmp	r3, #5
 80040ac:	d10c      	bne.n	80040c8 <HAL_RCC_OscConfig+0x340>
 80040ae:	4b61      	ldr	r3, [pc, #388]	; (8004234 <HAL_RCC_OscConfig+0x4ac>)
 80040b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b2:	4a60      	ldr	r2, [pc, #384]	; (8004234 <HAL_RCC_OscConfig+0x4ac>)
 80040b4:	f043 0304 	orr.w	r3, r3, #4
 80040b8:	6713      	str	r3, [r2, #112]	; 0x70
 80040ba:	4b5e      	ldr	r3, [pc, #376]	; (8004234 <HAL_RCC_OscConfig+0x4ac>)
 80040bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040be:	4a5d      	ldr	r2, [pc, #372]	; (8004234 <HAL_RCC_OscConfig+0x4ac>)
 80040c0:	f043 0301 	orr.w	r3, r3, #1
 80040c4:	6713      	str	r3, [r2, #112]	; 0x70
 80040c6:	e00b      	b.n	80040e0 <HAL_RCC_OscConfig+0x358>
 80040c8:	4b5a      	ldr	r3, [pc, #360]	; (8004234 <HAL_RCC_OscConfig+0x4ac>)
 80040ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040cc:	4a59      	ldr	r2, [pc, #356]	; (8004234 <HAL_RCC_OscConfig+0x4ac>)
 80040ce:	f023 0301 	bic.w	r3, r3, #1
 80040d2:	6713      	str	r3, [r2, #112]	; 0x70
 80040d4:	4b57      	ldr	r3, [pc, #348]	; (8004234 <HAL_RCC_OscConfig+0x4ac>)
 80040d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d8:	4a56      	ldr	r2, [pc, #344]	; (8004234 <HAL_RCC_OscConfig+0x4ac>)
 80040da:	f023 0304 	bic.w	r3, r3, #4
 80040de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d015      	beq.n	8004114 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e8:	f7fd fa3a 	bl	8001560 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ee:	e00a      	b.n	8004106 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040f0:	f7fd fa36 	bl	8001560 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fe:	4293      	cmp	r3, r2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e0d7      	b.n	80042b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004106:	4b4b      	ldr	r3, [pc, #300]	; (8004234 <HAL_RCC_OscConfig+0x4ac>)
 8004108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0ee      	beq.n	80040f0 <HAL_RCC_OscConfig+0x368>
 8004112:	e014      	b.n	800413e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004114:	f7fd fa24 	bl	8001560 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800411a:	e00a      	b.n	8004132 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800411c:	f7fd fa20 	bl	8001560 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	f241 3288 	movw	r2, #5000	; 0x1388
 800412a:	4293      	cmp	r3, r2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e0c1      	b.n	80042b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004132:	4b40      	ldr	r3, [pc, #256]	; (8004234 <HAL_RCC_OscConfig+0x4ac>)
 8004134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1ee      	bne.n	800411c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800413e:	7dfb      	ldrb	r3, [r7, #23]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d105      	bne.n	8004150 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004144:	4b3b      	ldr	r3, [pc, #236]	; (8004234 <HAL_RCC_OscConfig+0x4ac>)
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	4a3a      	ldr	r2, [pc, #232]	; (8004234 <HAL_RCC_OscConfig+0x4ac>)
 800414a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800414e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 80ad 	beq.w	80042b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800415a:	4b36      	ldr	r3, [pc, #216]	; (8004234 <HAL_RCC_OscConfig+0x4ac>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 030c 	and.w	r3, r3, #12
 8004162:	2b08      	cmp	r3, #8
 8004164:	d060      	beq.n	8004228 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d145      	bne.n	80041fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800416e:	4b33      	ldr	r3, [pc, #204]	; (800423c <HAL_RCC_OscConfig+0x4b4>)
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fd f9f4 	bl	8001560 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800417c:	f7fd f9f0 	bl	8001560 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e093      	b.n	80042b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418e:	4b29      	ldr	r3, [pc, #164]	; (8004234 <HAL_RCC_OscConfig+0x4ac>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69da      	ldr	r2, [r3, #28]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	019b      	lsls	r3, r3, #6
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b0:	085b      	lsrs	r3, r3, #1
 80041b2:	3b01      	subs	r3, #1
 80041b4:	041b      	lsls	r3, r3, #16
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	061b      	lsls	r3, r3, #24
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c4:	071b      	lsls	r3, r3, #28
 80041c6:	491b      	ldr	r1, [pc, #108]	; (8004234 <HAL_RCC_OscConfig+0x4ac>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041cc:	4b1b      	ldr	r3, [pc, #108]	; (800423c <HAL_RCC_OscConfig+0x4b4>)
 80041ce:	2201      	movs	r2, #1
 80041d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d2:	f7fd f9c5 	bl	8001560 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041da:	f7fd f9c1 	bl	8001560 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e064      	b.n	80042b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ec:	4b11      	ldr	r3, [pc, #68]	; (8004234 <HAL_RCC_OscConfig+0x4ac>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0f0      	beq.n	80041da <HAL_RCC_OscConfig+0x452>
 80041f8:	e05c      	b.n	80042b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fa:	4b10      	ldr	r3, [pc, #64]	; (800423c <HAL_RCC_OscConfig+0x4b4>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004200:	f7fd f9ae 	bl	8001560 <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004208:	f7fd f9aa 	bl	8001560 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e04d      	b.n	80042b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421a:	4b06      	ldr	r3, [pc, #24]	; (8004234 <HAL_RCC_OscConfig+0x4ac>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f0      	bne.n	8004208 <HAL_RCC_OscConfig+0x480>
 8004226:	e045      	b.n	80042b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d107      	bne.n	8004240 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e040      	b.n	80042b6 <HAL_RCC_OscConfig+0x52e>
 8004234:	40023800 	.word	0x40023800
 8004238:	40007000 	.word	0x40007000
 800423c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004240:	4b1f      	ldr	r3, [pc, #124]	; (80042c0 <HAL_RCC_OscConfig+0x538>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d030      	beq.n	80042b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004258:	429a      	cmp	r2, r3
 800425a:	d129      	bne.n	80042b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004266:	429a      	cmp	r2, r3
 8004268:	d122      	bne.n	80042b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004270:	4013      	ands	r3, r2
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004276:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004278:	4293      	cmp	r3, r2
 800427a:	d119      	bne.n	80042b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	085b      	lsrs	r3, r3, #1
 8004288:	3b01      	subs	r3, #1
 800428a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800428c:	429a      	cmp	r2, r3
 800428e:	d10f      	bne.n	80042b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800429c:	429a      	cmp	r2, r3
 800429e:	d107      	bne.n	80042b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d001      	beq.n	80042b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e000      	b.n	80042b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40023800 	.word	0x40023800

080042c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e03f      	b.n	8004356 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d106      	bne.n	80042f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7fc ff66 	bl	80011bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2224      	movs	r2, #36	; 0x24
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004306:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f929 	bl	8004560 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	691a      	ldr	r2, [r3, #16]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800431c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695a      	ldr	r2, [r3, #20]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800432c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68da      	ldr	r2, [r3, #12]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800433c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b08a      	sub	sp, #40	; 0x28
 8004362:	af02      	add	r7, sp, #8
 8004364:	60f8      	str	r0, [r7, #12]
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	603b      	str	r3, [r7, #0]
 800436a:	4613      	mov	r3, r2
 800436c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b20      	cmp	r3, #32
 800437c:	d17c      	bne.n	8004478 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <HAL_UART_Transmit+0x2c>
 8004384:	88fb      	ldrh	r3, [r7, #6]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e075      	b.n	800447a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_UART_Transmit+0x3e>
 8004398:	2302      	movs	r3, #2
 800439a:	e06e      	b.n	800447a <HAL_UART_Transmit+0x11c>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2221      	movs	r2, #33	; 0x21
 80043ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043b2:	f7fd f8d5 	bl	8001560 <HAL_GetTick>
 80043b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	88fa      	ldrh	r2, [r7, #6]
 80043bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	88fa      	ldrh	r2, [r7, #6]
 80043c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043cc:	d108      	bne.n	80043e0 <HAL_UART_Transmit+0x82>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d104      	bne.n	80043e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	61bb      	str	r3, [r7, #24]
 80043de:	e003      	b.n	80043e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80043f0:	e02a      	b.n	8004448 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2200      	movs	r2, #0
 80043fa:	2180      	movs	r1, #128	; 0x80
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 f840 	bl	8004482 <UART_WaitOnFlagUntilTimeout>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e036      	b.n	800447a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10b      	bne.n	800442a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004420:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	3302      	adds	r3, #2
 8004426:	61bb      	str	r3, [r7, #24]
 8004428:	e007      	b.n	800443a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	781a      	ldrb	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	3301      	adds	r3, #1
 8004438:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1cf      	bne.n	80043f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2200      	movs	r2, #0
 800445a:	2140      	movs	r1, #64	; 0x40
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f810 	bl	8004482 <UART_WaitOnFlagUntilTimeout>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e006      	b.n	800447a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2220      	movs	r2, #32
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	e000      	b.n	800447a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004478:	2302      	movs	r3, #2
  }
}
 800447a:	4618      	mov	r0, r3
 800447c:	3720      	adds	r7, #32
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b090      	sub	sp, #64	; 0x40
 8004486:	af00      	add	r7, sp, #0
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	603b      	str	r3, [r7, #0]
 800448e:	4613      	mov	r3, r2
 8004490:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004492:	e050      	b.n	8004536 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449a:	d04c      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800449c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d007      	beq.n	80044b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80044a2:	f7fd f85d 	bl	8001560 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d241      	bcs.n	8004536 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	330c      	adds	r3, #12
 80044b8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044bc:	e853 3f00 	ldrex	r3, [r3]
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	330c      	adds	r3, #12
 80044d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044d2:	637a      	str	r2, [r7, #52]	; 0x34
 80044d4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044da:	e841 2300 	strex	r3, r2, [r1]
 80044de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1e5      	bne.n	80044b2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	3314      	adds	r3, #20
 80044ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	e853 3f00 	ldrex	r3, [r3]
 80044f4:	613b      	str	r3, [r7, #16]
   return(result);
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f023 0301 	bic.w	r3, r3, #1
 80044fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	3314      	adds	r3, #20
 8004504:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004506:	623a      	str	r2, [r7, #32]
 8004508:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450a:	69f9      	ldr	r1, [r7, #28]
 800450c:	6a3a      	ldr	r2, [r7, #32]
 800450e:	e841 2300 	strex	r3, r2, [r1]
 8004512:	61bb      	str	r3, [r7, #24]
   return(result);
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1e5      	bne.n	80044e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2220      	movs	r2, #32
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e00f      	b.n	8004556 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4013      	ands	r3, r2
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	429a      	cmp	r2, r3
 8004544:	bf0c      	ite	eq
 8004546:	2301      	moveq	r3, #1
 8004548:	2300      	movne	r3, #0
 800454a:	b2db      	uxtb	r3, r3
 800454c:	461a      	mov	r2, r3
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	429a      	cmp	r2, r3
 8004552:	d09f      	beq.n	8004494 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3740      	adds	r7, #64	; 0x40
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004564:	b0c0      	sub	sp, #256	; 0x100
 8004566:	af00      	add	r7, sp, #0
 8004568:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800456c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457c:	68d9      	ldr	r1, [r3, #12]
 800457e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	ea40 0301 	orr.w	r3, r0, r1
 8004588:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800458a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	431a      	orrs	r2, r3
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	431a      	orrs	r2, r3
 80045a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045b8:	f021 010c 	bic.w	r1, r1, #12
 80045bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045c6:	430b      	orrs	r3, r1
 80045c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045da:	6999      	ldr	r1, [r3, #24]
 80045dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	ea40 0301 	orr.w	r3, r0, r1
 80045e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	4b8f      	ldr	r3, [pc, #572]	; (800482c <UART_SetConfig+0x2cc>)
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d005      	beq.n	8004600 <UART_SetConfig+0xa0>
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	4b8d      	ldr	r3, [pc, #564]	; (8004830 <UART_SetConfig+0x2d0>)
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d104      	bne.n	800460a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004600:	f7fe fe54 	bl	80032ac <HAL_RCC_GetPCLK2Freq>
 8004604:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004608:	e003      	b.n	8004612 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800460a:	f7fe fe3b 	bl	8003284 <HAL_RCC_GetPCLK1Freq>
 800460e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800461c:	f040 810c 	bne.w	8004838 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004624:	2200      	movs	r2, #0
 8004626:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800462a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800462e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004632:	4622      	mov	r2, r4
 8004634:	462b      	mov	r3, r5
 8004636:	1891      	adds	r1, r2, r2
 8004638:	65b9      	str	r1, [r7, #88]	; 0x58
 800463a:	415b      	adcs	r3, r3
 800463c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800463e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004642:	4621      	mov	r1, r4
 8004644:	eb12 0801 	adds.w	r8, r2, r1
 8004648:	4629      	mov	r1, r5
 800464a:	eb43 0901 	adc.w	r9, r3, r1
 800464e:	f04f 0200 	mov.w	r2, #0
 8004652:	f04f 0300 	mov.w	r3, #0
 8004656:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800465a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800465e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004662:	4690      	mov	r8, r2
 8004664:	4699      	mov	r9, r3
 8004666:	4623      	mov	r3, r4
 8004668:	eb18 0303 	adds.w	r3, r8, r3
 800466c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004670:	462b      	mov	r3, r5
 8004672:	eb49 0303 	adc.w	r3, r9, r3
 8004676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800467a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004686:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800468a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800468e:	460b      	mov	r3, r1
 8004690:	18db      	adds	r3, r3, r3
 8004692:	653b      	str	r3, [r7, #80]	; 0x50
 8004694:	4613      	mov	r3, r2
 8004696:	eb42 0303 	adc.w	r3, r2, r3
 800469a:	657b      	str	r3, [r7, #84]	; 0x54
 800469c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80046a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80046a4:	f7fc faa0 	bl	8000be8 <__aeabi_uldivmod>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4b61      	ldr	r3, [pc, #388]	; (8004834 <UART_SetConfig+0x2d4>)
 80046ae:	fba3 2302 	umull	r2, r3, r3, r2
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	011c      	lsls	r4, r3, #4
 80046b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80046c8:	4642      	mov	r2, r8
 80046ca:	464b      	mov	r3, r9
 80046cc:	1891      	adds	r1, r2, r2
 80046ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80046d0:	415b      	adcs	r3, r3
 80046d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046d8:	4641      	mov	r1, r8
 80046da:	eb12 0a01 	adds.w	sl, r2, r1
 80046de:	4649      	mov	r1, r9
 80046e0:	eb43 0b01 	adc.w	fp, r3, r1
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	f04f 0300 	mov.w	r3, #0
 80046ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046f8:	4692      	mov	sl, r2
 80046fa:	469b      	mov	fp, r3
 80046fc:	4643      	mov	r3, r8
 80046fe:	eb1a 0303 	adds.w	r3, sl, r3
 8004702:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004706:	464b      	mov	r3, r9
 8004708:	eb4b 0303 	adc.w	r3, fp, r3
 800470c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800471c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004720:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004724:	460b      	mov	r3, r1
 8004726:	18db      	adds	r3, r3, r3
 8004728:	643b      	str	r3, [r7, #64]	; 0x40
 800472a:	4613      	mov	r3, r2
 800472c:	eb42 0303 	adc.w	r3, r2, r3
 8004730:	647b      	str	r3, [r7, #68]	; 0x44
 8004732:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004736:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800473a:	f7fc fa55 	bl	8000be8 <__aeabi_uldivmod>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4611      	mov	r1, r2
 8004744:	4b3b      	ldr	r3, [pc, #236]	; (8004834 <UART_SetConfig+0x2d4>)
 8004746:	fba3 2301 	umull	r2, r3, r3, r1
 800474a:	095b      	lsrs	r3, r3, #5
 800474c:	2264      	movs	r2, #100	; 0x64
 800474e:	fb02 f303 	mul.w	r3, r2, r3
 8004752:	1acb      	subs	r3, r1, r3
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800475a:	4b36      	ldr	r3, [pc, #216]	; (8004834 <UART_SetConfig+0x2d4>)
 800475c:	fba3 2302 	umull	r2, r3, r3, r2
 8004760:	095b      	lsrs	r3, r3, #5
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004768:	441c      	add	r4, r3
 800476a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800476e:	2200      	movs	r2, #0
 8004770:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004774:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004778:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800477c:	4642      	mov	r2, r8
 800477e:	464b      	mov	r3, r9
 8004780:	1891      	adds	r1, r2, r2
 8004782:	63b9      	str	r1, [r7, #56]	; 0x38
 8004784:	415b      	adcs	r3, r3
 8004786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004788:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800478c:	4641      	mov	r1, r8
 800478e:	1851      	adds	r1, r2, r1
 8004790:	6339      	str	r1, [r7, #48]	; 0x30
 8004792:	4649      	mov	r1, r9
 8004794:	414b      	adcs	r3, r1
 8004796:	637b      	str	r3, [r7, #52]	; 0x34
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80047a4:	4659      	mov	r1, fp
 80047a6:	00cb      	lsls	r3, r1, #3
 80047a8:	4651      	mov	r1, sl
 80047aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ae:	4651      	mov	r1, sl
 80047b0:	00ca      	lsls	r2, r1, #3
 80047b2:	4610      	mov	r0, r2
 80047b4:	4619      	mov	r1, r3
 80047b6:	4603      	mov	r3, r0
 80047b8:	4642      	mov	r2, r8
 80047ba:	189b      	adds	r3, r3, r2
 80047bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047c0:	464b      	mov	r3, r9
 80047c2:	460a      	mov	r2, r1
 80047c4:	eb42 0303 	adc.w	r3, r2, r3
 80047c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80047e0:	460b      	mov	r3, r1
 80047e2:	18db      	adds	r3, r3, r3
 80047e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80047e6:	4613      	mov	r3, r2
 80047e8:	eb42 0303 	adc.w	r3, r2, r3
 80047ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047f6:	f7fc f9f7 	bl	8000be8 <__aeabi_uldivmod>
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
 80047fe:	4b0d      	ldr	r3, [pc, #52]	; (8004834 <UART_SetConfig+0x2d4>)
 8004800:	fba3 1302 	umull	r1, r3, r3, r2
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	2164      	movs	r1, #100	; 0x64
 8004808:	fb01 f303 	mul.w	r3, r1, r3
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	3332      	adds	r3, #50	; 0x32
 8004812:	4a08      	ldr	r2, [pc, #32]	; (8004834 <UART_SetConfig+0x2d4>)
 8004814:	fba2 2303 	umull	r2, r3, r2, r3
 8004818:	095b      	lsrs	r3, r3, #5
 800481a:	f003 0207 	and.w	r2, r3, #7
 800481e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4422      	add	r2, r4
 8004826:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004828:	e105      	b.n	8004a36 <UART_SetConfig+0x4d6>
 800482a:	bf00      	nop
 800482c:	40011000 	.word	0x40011000
 8004830:	40011400 	.word	0x40011400
 8004834:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004838:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800483c:	2200      	movs	r2, #0
 800483e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004842:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004846:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800484a:	4642      	mov	r2, r8
 800484c:	464b      	mov	r3, r9
 800484e:	1891      	adds	r1, r2, r2
 8004850:	6239      	str	r1, [r7, #32]
 8004852:	415b      	adcs	r3, r3
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
 8004856:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800485a:	4641      	mov	r1, r8
 800485c:	1854      	adds	r4, r2, r1
 800485e:	4649      	mov	r1, r9
 8004860:	eb43 0501 	adc.w	r5, r3, r1
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	00eb      	lsls	r3, r5, #3
 800486e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004872:	00e2      	lsls	r2, r4, #3
 8004874:	4614      	mov	r4, r2
 8004876:	461d      	mov	r5, r3
 8004878:	4643      	mov	r3, r8
 800487a:	18e3      	adds	r3, r4, r3
 800487c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004880:	464b      	mov	r3, r9
 8004882:	eb45 0303 	adc.w	r3, r5, r3
 8004886:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800488a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004896:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048a6:	4629      	mov	r1, r5
 80048a8:	008b      	lsls	r3, r1, #2
 80048aa:	4621      	mov	r1, r4
 80048ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048b0:	4621      	mov	r1, r4
 80048b2:	008a      	lsls	r2, r1, #2
 80048b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048b8:	f7fc f996 	bl	8000be8 <__aeabi_uldivmod>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	4b60      	ldr	r3, [pc, #384]	; (8004a44 <UART_SetConfig+0x4e4>)
 80048c2:	fba3 2302 	umull	r2, r3, r3, r2
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	011c      	lsls	r4, r3, #4
 80048ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ce:	2200      	movs	r2, #0
 80048d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80048dc:	4642      	mov	r2, r8
 80048de:	464b      	mov	r3, r9
 80048e0:	1891      	adds	r1, r2, r2
 80048e2:	61b9      	str	r1, [r7, #24]
 80048e4:	415b      	adcs	r3, r3
 80048e6:	61fb      	str	r3, [r7, #28]
 80048e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048ec:	4641      	mov	r1, r8
 80048ee:	1851      	adds	r1, r2, r1
 80048f0:	6139      	str	r1, [r7, #16]
 80048f2:	4649      	mov	r1, r9
 80048f4:	414b      	adcs	r3, r1
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	f04f 0300 	mov.w	r3, #0
 8004900:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004904:	4659      	mov	r1, fp
 8004906:	00cb      	lsls	r3, r1, #3
 8004908:	4651      	mov	r1, sl
 800490a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800490e:	4651      	mov	r1, sl
 8004910:	00ca      	lsls	r2, r1, #3
 8004912:	4610      	mov	r0, r2
 8004914:	4619      	mov	r1, r3
 8004916:	4603      	mov	r3, r0
 8004918:	4642      	mov	r2, r8
 800491a:	189b      	adds	r3, r3, r2
 800491c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004920:	464b      	mov	r3, r9
 8004922:	460a      	mov	r2, r1
 8004924:	eb42 0303 	adc.w	r3, r2, r3
 8004928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800492c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	67bb      	str	r3, [r7, #120]	; 0x78
 8004936:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004944:	4649      	mov	r1, r9
 8004946:	008b      	lsls	r3, r1, #2
 8004948:	4641      	mov	r1, r8
 800494a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800494e:	4641      	mov	r1, r8
 8004950:	008a      	lsls	r2, r1, #2
 8004952:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004956:	f7fc f947 	bl	8000be8 <__aeabi_uldivmod>
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	4b39      	ldr	r3, [pc, #228]	; (8004a44 <UART_SetConfig+0x4e4>)
 8004960:	fba3 1302 	umull	r1, r3, r3, r2
 8004964:	095b      	lsrs	r3, r3, #5
 8004966:	2164      	movs	r1, #100	; 0x64
 8004968:	fb01 f303 	mul.w	r3, r1, r3
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	3332      	adds	r3, #50	; 0x32
 8004972:	4a34      	ldr	r2, [pc, #208]	; (8004a44 <UART_SetConfig+0x4e4>)
 8004974:	fba2 2303 	umull	r2, r3, r2, r3
 8004978:	095b      	lsrs	r3, r3, #5
 800497a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800497e:	441c      	add	r4, r3
 8004980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004984:	2200      	movs	r2, #0
 8004986:	673b      	str	r3, [r7, #112]	; 0x70
 8004988:	677a      	str	r2, [r7, #116]	; 0x74
 800498a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800498e:	4642      	mov	r2, r8
 8004990:	464b      	mov	r3, r9
 8004992:	1891      	adds	r1, r2, r2
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	415b      	adcs	r3, r3
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800499e:	4641      	mov	r1, r8
 80049a0:	1851      	adds	r1, r2, r1
 80049a2:	6039      	str	r1, [r7, #0]
 80049a4:	4649      	mov	r1, r9
 80049a6:	414b      	adcs	r3, r1
 80049a8:	607b      	str	r3, [r7, #4]
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049b6:	4659      	mov	r1, fp
 80049b8:	00cb      	lsls	r3, r1, #3
 80049ba:	4651      	mov	r1, sl
 80049bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049c0:	4651      	mov	r1, sl
 80049c2:	00ca      	lsls	r2, r1, #3
 80049c4:	4610      	mov	r0, r2
 80049c6:	4619      	mov	r1, r3
 80049c8:	4603      	mov	r3, r0
 80049ca:	4642      	mov	r2, r8
 80049cc:	189b      	adds	r3, r3, r2
 80049ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80049d0:	464b      	mov	r3, r9
 80049d2:	460a      	mov	r2, r1
 80049d4:	eb42 0303 	adc.w	r3, r2, r3
 80049d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	663b      	str	r3, [r7, #96]	; 0x60
 80049e4:	667a      	str	r2, [r7, #100]	; 0x64
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80049f2:	4649      	mov	r1, r9
 80049f4:	008b      	lsls	r3, r1, #2
 80049f6:	4641      	mov	r1, r8
 80049f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049fc:	4641      	mov	r1, r8
 80049fe:	008a      	lsls	r2, r1, #2
 8004a00:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a04:	f7fc f8f0 	bl	8000be8 <__aeabi_uldivmod>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <UART_SetConfig+0x4e4>)
 8004a0e:	fba3 1302 	umull	r1, r3, r3, r2
 8004a12:	095b      	lsrs	r3, r3, #5
 8004a14:	2164      	movs	r1, #100	; 0x64
 8004a16:	fb01 f303 	mul.w	r3, r1, r3
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	3332      	adds	r3, #50	; 0x32
 8004a20:	4a08      	ldr	r2, [pc, #32]	; (8004a44 <UART_SetConfig+0x4e4>)
 8004a22:	fba2 2303 	umull	r2, r3, r2, r3
 8004a26:	095b      	lsrs	r3, r3, #5
 8004a28:	f003 020f 	and.w	r2, r3, #15
 8004a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4422      	add	r2, r4
 8004a34:	609a      	str	r2, [r3, #8]
}
 8004a36:	bf00      	nop
 8004a38:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a42:	bf00      	nop
 8004a44:	51eb851f 	.word	0x51eb851f

08004a48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a48:	b084      	sub	sp, #16
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b084      	sub	sp, #16
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	f107 001c 	add.w	r0, r7, #28
 8004a56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d122      	bne.n	8004aa6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d105      	bne.n	8004a9a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f001 fbe8 	bl	8006270 <USB_CoreReset>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	73fb      	strb	r3, [r7, #15]
 8004aa4:	e01a      	b.n	8004adc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f001 fbdc 	bl	8006270 <USB_CoreReset>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d106      	bne.n	8004ad0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	639a      	str	r2, [r3, #56]	; 0x38
 8004ace:	e005      	b.n	8004adc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d10b      	bne.n	8004afa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f043 0206 	orr.w	r2, r3, #6
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f043 0220 	orr.w	r2, r3, #32
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b06:	b004      	add	sp, #16
 8004b08:	4770      	bx	lr
	...

08004b0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	4613      	mov	r3, r2
 8004b18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004b1a:	79fb      	ldrb	r3, [r7, #7]
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d165      	bne.n	8004bec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	4a41      	ldr	r2, [pc, #260]	; (8004c28 <USB_SetTurnaroundTime+0x11c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d906      	bls.n	8004b36 <USB_SetTurnaroundTime+0x2a>
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4a40      	ldr	r2, [pc, #256]	; (8004c2c <USB_SetTurnaroundTime+0x120>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d202      	bcs.n	8004b36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004b30:	230f      	movs	r3, #15
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	e062      	b.n	8004bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	4a3c      	ldr	r2, [pc, #240]	; (8004c2c <USB_SetTurnaroundTime+0x120>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d306      	bcc.n	8004b4c <USB_SetTurnaroundTime+0x40>
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	4a3b      	ldr	r2, [pc, #236]	; (8004c30 <USB_SetTurnaroundTime+0x124>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d202      	bcs.n	8004b4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004b46:	230e      	movs	r3, #14
 8004b48:	617b      	str	r3, [r7, #20]
 8004b4a:	e057      	b.n	8004bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4a38      	ldr	r2, [pc, #224]	; (8004c30 <USB_SetTurnaroundTime+0x124>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d306      	bcc.n	8004b62 <USB_SetTurnaroundTime+0x56>
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4a37      	ldr	r2, [pc, #220]	; (8004c34 <USB_SetTurnaroundTime+0x128>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d202      	bcs.n	8004b62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004b5c:	230d      	movs	r3, #13
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	e04c      	b.n	8004bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	4a33      	ldr	r2, [pc, #204]	; (8004c34 <USB_SetTurnaroundTime+0x128>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d306      	bcc.n	8004b78 <USB_SetTurnaroundTime+0x6c>
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	4a32      	ldr	r2, [pc, #200]	; (8004c38 <USB_SetTurnaroundTime+0x12c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d802      	bhi.n	8004b78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004b72:	230c      	movs	r3, #12
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	e041      	b.n	8004bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4a2f      	ldr	r2, [pc, #188]	; (8004c38 <USB_SetTurnaroundTime+0x12c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d906      	bls.n	8004b8e <USB_SetTurnaroundTime+0x82>
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	4a2e      	ldr	r2, [pc, #184]	; (8004c3c <USB_SetTurnaroundTime+0x130>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d802      	bhi.n	8004b8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004b88:	230b      	movs	r3, #11
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	e036      	b.n	8004bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	4a2a      	ldr	r2, [pc, #168]	; (8004c3c <USB_SetTurnaroundTime+0x130>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d906      	bls.n	8004ba4 <USB_SetTurnaroundTime+0x98>
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	4a29      	ldr	r2, [pc, #164]	; (8004c40 <USB_SetTurnaroundTime+0x134>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d802      	bhi.n	8004ba4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004b9e:	230a      	movs	r3, #10
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	e02b      	b.n	8004bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	4a26      	ldr	r2, [pc, #152]	; (8004c40 <USB_SetTurnaroundTime+0x134>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d906      	bls.n	8004bba <USB_SetTurnaroundTime+0xae>
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4a25      	ldr	r2, [pc, #148]	; (8004c44 <USB_SetTurnaroundTime+0x138>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d202      	bcs.n	8004bba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004bb4:	2309      	movs	r3, #9
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	e020      	b.n	8004bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	4a21      	ldr	r2, [pc, #132]	; (8004c44 <USB_SetTurnaroundTime+0x138>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d306      	bcc.n	8004bd0 <USB_SetTurnaroundTime+0xc4>
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	4a20      	ldr	r2, [pc, #128]	; (8004c48 <USB_SetTurnaroundTime+0x13c>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d802      	bhi.n	8004bd0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004bca:	2308      	movs	r3, #8
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	e015      	b.n	8004bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	4a1d      	ldr	r2, [pc, #116]	; (8004c48 <USB_SetTurnaroundTime+0x13c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d906      	bls.n	8004be6 <USB_SetTurnaroundTime+0xda>
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4a1c      	ldr	r2, [pc, #112]	; (8004c4c <USB_SetTurnaroundTime+0x140>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d202      	bcs.n	8004be6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004be0:	2307      	movs	r3, #7
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	e00a      	b.n	8004bfc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004be6:	2306      	movs	r3, #6
 8004be8:	617b      	str	r3, [r7, #20]
 8004bea:	e007      	b.n	8004bfc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d102      	bne.n	8004bf8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004bf2:	2309      	movs	r3, #9
 8004bf4:	617b      	str	r3, [r7, #20]
 8004bf6:	e001      	b.n	8004bfc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004bf8:	2309      	movs	r3, #9
 8004bfa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	029b      	lsls	r3, r3, #10
 8004c10:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004c14:	431a      	orrs	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	371c      	adds	r7, #28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	00d8acbf 	.word	0x00d8acbf
 8004c2c:	00e4e1c0 	.word	0x00e4e1c0
 8004c30:	00f42400 	.word	0x00f42400
 8004c34:	01067380 	.word	0x01067380
 8004c38:	011a499f 	.word	0x011a499f
 8004c3c:	01312cff 	.word	0x01312cff
 8004c40:	014ca43f 	.word	0x014ca43f
 8004c44:	016e3600 	.word	0x016e3600
 8004c48:	01a6ab1f 	.word	0x01a6ab1f
 8004c4c:	01e84800 	.word	0x01e84800

08004c50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f043 0201 	orr.w	r2, r3, #1
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f023 0201 	bic.w	r2, r3, #1
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d115      	bne.n	8004ce2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004cc2:	2001      	movs	r0, #1
 8004cc4:	f7fc fc58 	bl	8001578 <HAL_Delay>
      ms++;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f001 fa3f 	bl	8006152 <USB_GetMode>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d01e      	beq.n	8004d18 <USB_SetCurrentMode+0x84>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b31      	cmp	r3, #49	; 0x31
 8004cde:	d9f0      	bls.n	8004cc2 <USB_SetCurrentMode+0x2e>
 8004ce0:	e01a      	b.n	8004d18 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ce2:	78fb      	ldrb	r3, [r7, #3]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d115      	bne.n	8004d14 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004cf4:	2001      	movs	r0, #1
 8004cf6:	f7fc fc3f 	bl	8001578 <HAL_Delay>
      ms++;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f001 fa26 	bl	8006152 <USB_GetMode>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d005      	beq.n	8004d18 <USB_SetCurrentMode+0x84>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b31      	cmp	r3, #49	; 0x31
 8004d10:	d9f0      	bls.n	8004cf4 <USB_SetCurrentMode+0x60>
 8004d12:	e001      	b.n	8004d18 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e005      	b.n	8004d24 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b32      	cmp	r3, #50	; 0x32
 8004d1c:	d101      	bne.n	8004d22 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e000      	b.n	8004d24 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d2c:	b084      	sub	sp, #16
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b086      	sub	sp, #24
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d46:	2300      	movs	r3, #0
 8004d48:	613b      	str	r3, [r7, #16]
 8004d4a:	e009      	b.n	8004d60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	3340      	adds	r3, #64	; 0x40
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	2200      	movs	r2, #0
 8004d58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	2b0e      	cmp	r3, #14
 8004d64:	d9f2      	bls.n	8004d4c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d11c      	bne.n	8004da6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d7a:	f043 0302 	orr.w	r3, r3, #2
 8004d7e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d84:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	e005      	b.n	8004db2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004daa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004db8:	461a      	mov	r2, r3
 8004dba:	2300      	movs	r3, #0
 8004dbc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dcc:	461a      	mov	r2, r3
 8004dce:	680b      	ldr	r3, [r1, #0]
 8004dd0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d10c      	bne.n	8004df2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d104      	bne.n	8004de8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004dde:	2100      	movs	r1, #0
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f965 	bl	80050b0 <USB_SetDevSpeed>
 8004de6:	e008      	b.n	8004dfa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004de8:	2101      	movs	r1, #1
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f960 	bl	80050b0 <USB_SetDevSpeed>
 8004df0:	e003      	b.n	8004dfa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004df2:	2103      	movs	r1, #3
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f95b 	bl	80050b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004dfa:	2110      	movs	r1, #16
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f8f3 	bl	8004fe8 <USB_FlushTxFifo>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f91f 	bl	8005050 <USB_FlushRxFifo>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e22:	461a      	mov	r2, r3
 8004e24:	2300      	movs	r3, #0
 8004e26:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2e:	461a      	mov	r2, r3
 8004e30:	2300      	movs	r3, #0
 8004e32:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e40:	2300      	movs	r3, #0
 8004e42:	613b      	str	r3, [r7, #16]
 8004e44:	e043      	b.n	8004ece <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e5c:	d118      	bne.n	8004e90 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10a      	bne.n	8004e7a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e70:	461a      	mov	r2, r3
 8004e72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e76:	6013      	str	r3, [r2, #0]
 8004e78:	e013      	b.n	8004ea2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e86:	461a      	mov	r2, r3
 8004e88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e8c:	6013      	str	r3, [r2, #0]
 8004e8e:	e008      	b.n	8004ea2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eae:	461a      	mov	r2, r3
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ec6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d3b7      	bcc.n	8004e46 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	613b      	str	r3, [r7, #16]
 8004eda:	e043      	b.n	8004f64 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004eee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ef2:	d118      	bne.n	8004f26 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10a      	bne.n	8004f10 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f06:	461a      	mov	r2, r3
 8004f08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	e013      	b.n	8004f38 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	e008      	b.n	8004f38 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f32:	461a      	mov	r2, r3
 8004f34:	2300      	movs	r3, #0
 8004f36:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f44:	461a      	mov	r2, r3
 8004f46:	2300      	movs	r3, #0
 8004f48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f56:	461a      	mov	r2, r3
 8004f58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	3301      	adds	r3, #1
 8004f62:	613b      	str	r3, [r7, #16]
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d3b7      	bcc.n	8004edc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f7e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f8c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d105      	bne.n	8004fa0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	f043 0210 	orr.w	r2, r3, #16
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	699a      	ldr	r2, [r3, #24]
 8004fa4:	4b0f      	ldr	r3, [pc, #60]	; (8004fe4 <USB_DevInit+0x2b8>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d005      	beq.n	8004fbe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	f043 0208 	orr.w	r2, r3, #8
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d107      	bne.n	8004fd4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fcc:	f043 0304 	orr.w	r3, r3, #4
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fe0:	b004      	add	sp, #16
 8004fe2:	4770      	bx	lr
 8004fe4:	803c3800 	.word	0x803c3800

08004fe8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4a13      	ldr	r2, [pc, #76]	; (800504c <USB_FlushTxFifo+0x64>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d901      	bls.n	8005008 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e01b      	b.n	8005040 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	daf2      	bge.n	8004ff6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	019b      	lsls	r3, r3, #6
 8005018:	f043 0220 	orr.w	r2, r3, #32
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	3301      	adds	r3, #1
 8005024:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4a08      	ldr	r2, [pc, #32]	; (800504c <USB_FlushTxFifo+0x64>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d901      	bls.n	8005032 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e006      	b.n	8005040 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f003 0320 	and.w	r3, r3, #32
 800503a:	2b20      	cmp	r3, #32
 800503c:	d0f0      	beq.n	8005020 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	00030d40 	.word	0x00030d40

08005050 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	3301      	adds	r3, #1
 8005060:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4a11      	ldr	r2, [pc, #68]	; (80050ac <USB_FlushRxFifo+0x5c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d901      	bls.n	800506e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e018      	b.n	80050a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	daf2      	bge.n	800505c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2210      	movs	r2, #16
 800507e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	3301      	adds	r3, #1
 8005084:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4a08      	ldr	r2, [pc, #32]	; (80050ac <USB_FlushRxFifo+0x5c>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d901      	bls.n	8005092 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e006      	b.n	80050a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f003 0310 	and.w	r3, r3, #16
 800509a:	2b10      	cmp	r3, #16
 800509c:	d0f0      	beq.n	8005080 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	00030d40 	.word	0x00030d40

080050b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	460b      	mov	r3, r1
 80050ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	78fb      	ldrb	r3, [r7, #3]
 80050ca:	68f9      	ldr	r1, [r7, #12]
 80050cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050d0:	4313      	orrs	r3, r2
 80050d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b087      	sub	sp, #28
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 0306 	and.w	r3, r3, #6
 80050fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d102      	bne.n	8005108 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005102:	2300      	movs	r3, #0
 8005104:	75fb      	strb	r3, [r7, #23]
 8005106:	e00a      	b.n	800511e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d002      	beq.n	8005114 <USB_GetDevSpeed+0x32>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b06      	cmp	r3, #6
 8005112:	d102      	bne.n	800511a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005114:	2302      	movs	r3, #2
 8005116:	75fb      	strb	r3, [r7, #23]
 8005118:	e001      	b.n	800511e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800511a:	230f      	movs	r3, #15
 800511c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800511e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005120:	4618      	mov	r0, r3
 8005122:	371c      	adds	r7, #28
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	785b      	ldrb	r3, [r3, #1]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d13a      	bne.n	80051be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514e:	69da      	ldr	r2, [r3, #28]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	2101      	movs	r1, #1
 800515a:	fa01 f303 	lsl.w	r3, r1, r3
 800515e:	b29b      	uxth	r3, r3
 8005160:	68f9      	ldr	r1, [r7, #12]
 8005162:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005166:	4313      	orrs	r3, r2
 8005168:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4413      	add	r3, r2
 8005172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d155      	bne.n	800522c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	791b      	ldrb	r3, [r3, #4]
 800519a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800519c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	059b      	lsls	r3, r3, #22
 80051a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051a4:	4313      	orrs	r3, r2
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	0151      	lsls	r1, r2, #5
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	440a      	add	r2, r1
 80051ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	e036      	b.n	800522c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c4:	69da      	ldr	r2, [r3, #28]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	2101      	movs	r1, #1
 80051d0:	fa01 f303 	lsl.w	r3, r1, r3
 80051d4:	041b      	lsls	r3, r3, #16
 80051d6:	68f9      	ldr	r1, [r7, #12]
 80051d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051dc:	4313      	orrs	r3, r2
 80051de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d11a      	bne.n	800522c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	791b      	ldrb	r3, [r3, #4]
 8005210:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005212:	430b      	orrs	r3, r1
 8005214:	4313      	orrs	r3, r2
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	0151      	lsls	r1, r2, #5
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	440a      	add	r2, r1
 800521e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800522a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
	...

0800523c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	785b      	ldrb	r3, [r3, #1]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d161      	bne.n	800531c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4413      	add	r3, r2
 8005260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800526a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800526e:	d11f      	bne.n	80052b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	0151      	lsls	r1, r2, #5
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	440a      	add	r2, r1
 8005286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800528a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800528e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	0151      	lsls	r1, r2, #5
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	440a      	add	r2, r1
 80052a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	f003 030f 	and.w	r3, r3, #15
 80052c0:	2101      	movs	r1, #1
 80052c2:	fa01 f303 	lsl.w	r3, r1, r3
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	43db      	mvns	r3, r3
 80052ca:	68f9      	ldr	r1, [r7, #12]
 80052cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052d0:	4013      	ands	r3, r2
 80052d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052da:	69da      	ldr	r2, [r3, #28]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	f003 030f 	and.w	r3, r3, #15
 80052e4:	2101      	movs	r1, #1
 80052e6:	fa01 f303 	lsl.w	r3, r1, r3
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	43db      	mvns	r3, r3
 80052ee:	68f9      	ldr	r1, [r7, #12]
 80052f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052f4:	4013      	ands	r3, r2
 80052f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	0159      	lsls	r1, r3, #5
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	440b      	add	r3, r1
 800530e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005312:	4619      	mov	r1, r3
 8005314:	4b35      	ldr	r3, [pc, #212]	; (80053ec <USB_DeactivateEndpoint+0x1b0>)
 8005316:	4013      	ands	r3, r2
 8005318:	600b      	str	r3, [r1, #0]
 800531a:	e060      	b.n	80053de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800532e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005332:	d11f      	bne.n	8005374 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4413      	add	r3, r2
 800533c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	0151      	lsls	r1, r2, #5
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	440a      	add	r2, r1
 800534a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800534e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005352:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	0151      	lsls	r1, r2, #5
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	440a      	add	r2, r1
 800536a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800536e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005372:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	f003 030f 	and.w	r3, r3, #15
 8005384:	2101      	movs	r1, #1
 8005386:	fa01 f303 	lsl.w	r3, r1, r3
 800538a:	041b      	lsls	r3, r3, #16
 800538c:	43db      	mvns	r3, r3
 800538e:	68f9      	ldr	r1, [r7, #12]
 8005390:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005394:	4013      	ands	r3, r2
 8005396:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539e:	69da      	ldr	r2, [r3, #28]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	f003 030f 	and.w	r3, r3, #15
 80053a8:	2101      	movs	r1, #1
 80053aa:	fa01 f303 	lsl.w	r3, r1, r3
 80053ae:	041b      	lsls	r3, r3, #16
 80053b0:	43db      	mvns	r3, r3
 80053b2:	68f9      	ldr	r1, [r7, #12]
 80053b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053b8:	4013      	ands	r3, r2
 80053ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	0159      	lsls	r1, r3, #5
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	440b      	add	r3, r1
 80053d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d6:	4619      	mov	r1, r3
 80053d8:	4b05      	ldr	r3, [pc, #20]	; (80053f0 <USB_DeactivateEndpoint+0x1b4>)
 80053da:	4013      	ands	r3, r2
 80053dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	ec337800 	.word	0xec337800
 80053f0:	eff37800 	.word	0xeff37800

080053f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b08a      	sub	sp, #40	; 0x28
 80053f8:	af02      	add	r7, sp, #8
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	4613      	mov	r3, r2
 8005400:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	785b      	ldrb	r3, [r3, #1]
 8005410:	2b01      	cmp	r3, #1
 8005412:	f040 815c 	bne.w	80056ce <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d132      	bne.n	8005484 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	4413      	add	r3, r2
 8005426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	0151      	lsls	r1, r2, #5
 8005430:	69fa      	ldr	r2, [r7, #28]
 8005432:	440a      	add	r2, r1
 8005434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005438:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800543c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005440:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	4413      	add	r3, r2
 800544a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	0151      	lsls	r1, r2, #5
 8005454:	69fa      	ldr	r2, [r7, #28]
 8005456:	440a      	add	r2, r1
 8005458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800545c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005460:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	4413      	add	r3, r2
 800546a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	0151      	lsls	r1, r2, #5
 8005474:	69fa      	ldr	r2, [r7, #28]
 8005476:	440a      	add	r2, r1
 8005478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800547c:	0cdb      	lsrs	r3, r3, #19
 800547e:	04db      	lsls	r3, r3, #19
 8005480:	6113      	str	r3, [r2, #16]
 8005482:	e074      	b.n	800556e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	0151      	lsls	r1, r2, #5
 8005496:	69fa      	ldr	r2, [r7, #28]
 8005498:	440a      	add	r2, r1
 800549a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800549e:	0cdb      	lsrs	r3, r3, #19
 80054a0:	04db      	lsls	r3, r3, #19
 80054a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	0151      	lsls	r1, r2, #5
 80054b6:	69fa      	ldr	r2, [r7, #28]
 80054b8:	440a      	add	r2, r1
 80054ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	6999      	ldr	r1, [r3, #24]
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	440b      	add	r3, r1
 80054e0:	1e59      	subs	r1, r3, #1
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80054ea:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80054ec:	4b9d      	ldr	r3, [pc, #628]	; (8005764 <USB_EPStartXfer+0x370>)
 80054ee:	400b      	ands	r3, r1
 80054f0:	69b9      	ldr	r1, [r7, #24]
 80054f2:	0148      	lsls	r0, r1, #5
 80054f4:	69f9      	ldr	r1, [r7, #28]
 80054f6:	4401      	add	r1, r0
 80054f8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80054fc:	4313      	orrs	r3, r2
 80054fe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550c:	691a      	ldr	r2, [r3, #16]
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005516:	69b9      	ldr	r1, [r7, #24]
 8005518:	0148      	lsls	r0, r1, #5
 800551a:	69f9      	ldr	r1, [r7, #28]
 800551c:	4401      	add	r1, r0
 800551e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005522:	4313      	orrs	r3, r2
 8005524:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	791b      	ldrb	r3, [r3, #4]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d11f      	bne.n	800556e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	4413      	add	r3, r2
 8005536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	0151      	lsls	r1, r2, #5
 8005540:	69fa      	ldr	r2, [r7, #28]
 8005542:	440a      	add	r2, r1
 8005544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005548:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800554c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	0151      	lsls	r1, r2, #5
 8005560:	69fa      	ldr	r2, [r7, #28]
 8005562:	440a      	add	r2, r1
 8005564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005568:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800556c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800556e:	79fb      	ldrb	r3, [r7, #7]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d14b      	bne.n	800560c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d009      	beq.n	8005590 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005588:	461a      	mov	r2, r3
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	791b      	ldrb	r3, [r3, #4]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d128      	bne.n	80055ea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d110      	bne.n	80055ca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	0151      	lsls	r1, r2, #5
 80055ba:	69fa      	ldr	r2, [r7, #28]
 80055bc:	440a      	add	r2, r1
 80055be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055c6:	6013      	str	r3, [r2, #0]
 80055c8:	e00f      	b.n	80055ea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	0151      	lsls	r1, r2, #5
 80055dc:	69fa      	ldr	r2, [r7, #28]
 80055de:	440a      	add	r2, r1
 80055e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	0151      	lsls	r1, r2, #5
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	440a      	add	r2, r1
 8005600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005604:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	e133      	b.n	8005874 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	0151      	lsls	r1, r2, #5
 800561e:	69fa      	ldr	r2, [r7, #28]
 8005620:	440a      	add	r2, r1
 8005622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005626:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800562a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	791b      	ldrb	r3, [r3, #4]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d015      	beq.n	8005660 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 811b 	beq.w	8005874 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	2101      	movs	r1, #1
 8005650:	fa01 f303 	lsl.w	r3, r1, r3
 8005654:	69f9      	ldr	r1, [r7, #28]
 8005656:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800565a:	4313      	orrs	r3, r2
 800565c:	634b      	str	r3, [r1, #52]	; 0x34
 800565e:	e109      	b.n	8005874 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566c:	2b00      	cmp	r3, #0
 800566e:	d110      	bne.n	8005692 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	0151      	lsls	r1, r2, #5
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	440a      	add	r2, r1
 8005686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800568a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	e00f      	b.n	80056b2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	0151      	lsls	r1, r2, #5
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	440a      	add	r2, r1
 80056a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056b0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	6919      	ldr	r1, [r3, #16]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	781a      	ldrb	r2, [r3, #0]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	b298      	uxth	r0, r3
 80056c0:	79fb      	ldrb	r3, [r7, #7]
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	4603      	mov	r3, r0
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 fade 	bl	8005c88 <USB_WritePacket>
 80056cc:	e0d2      	b.n	8005874 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	0151      	lsls	r1, r2, #5
 80056e0:	69fa      	ldr	r2, [r7, #28]
 80056e2:	440a      	add	r2, r1
 80056e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056e8:	0cdb      	lsrs	r3, r3, #19
 80056ea:	04db      	lsls	r3, r3, #19
 80056ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	0151      	lsls	r1, r2, #5
 8005700:	69fa      	ldr	r2, [r7, #28]
 8005702:	440a      	add	r2, r1
 8005704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005708:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800570c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005710:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d126      	bne.n	8005768 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005726:	691a      	ldr	r2, [r3, #16]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005730:	69b9      	ldr	r1, [r7, #24]
 8005732:	0148      	lsls	r0, r1, #5
 8005734:	69f9      	ldr	r1, [r7, #28]
 8005736:	4401      	add	r1, r0
 8005738:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800573c:	4313      	orrs	r3, r2
 800573e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	0151      	lsls	r1, r2, #5
 8005752:	69fa      	ldr	r2, [r7, #28]
 8005754:	440a      	add	r2, r1
 8005756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800575a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800575e:	6113      	str	r3, [r2, #16]
 8005760:	e03a      	b.n	80057d8 <USB_EPStartXfer+0x3e4>
 8005762:	bf00      	nop
 8005764:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	699a      	ldr	r2, [r3, #24]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	4413      	add	r3, r2
 8005772:	1e5a      	subs	r2, r3, #1
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	fbb2 f3f3 	udiv	r3, r2, r3
 800577c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	8afa      	ldrh	r2, [r7, #22]
 8005784:	fb03 f202 	mul.w	r2, r3, r2
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005798:	691a      	ldr	r2, [r3, #16]
 800579a:	8afb      	ldrh	r3, [r7, #22]
 800579c:	04d9      	lsls	r1, r3, #19
 800579e:	4b38      	ldr	r3, [pc, #224]	; (8005880 <USB_EPStartXfer+0x48c>)
 80057a0:	400b      	ands	r3, r1
 80057a2:	69b9      	ldr	r1, [r7, #24]
 80057a4:	0148      	lsls	r0, r1, #5
 80057a6:	69f9      	ldr	r1, [r7, #28]
 80057a8:	4401      	add	r1, r0
 80057aa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057ae:	4313      	orrs	r3, r2
 80057b0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	69db      	ldr	r3, [r3, #28]
 80057c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057c8:	69b9      	ldr	r1, [r7, #24]
 80057ca:	0148      	lsls	r0, r1, #5
 80057cc:	69f9      	ldr	r1, [r7, #28]
 80057ce:	4401      	add	r1, r0
 80057d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057d4:	4313      	orrs	r3, r2
 80057d6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80057d8:	79fb      	ldrb	r3, [r7, #7]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d10d      	bne.n	80057fa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d009      	beq.n	80057fa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	6919      	ldr	r1, [r3, #16]
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f6:	460a      	mov	r2, r1
 80057f8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	791b      	ldrb	r3, [r3, #4]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d128      	bne.n	8005854 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580e:	2b00      	cmp	r3, #0
 8005810:	d110      	bne.n	8005834 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	4413      	add	r3, r2
 800581a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	0151      	lsls	r1, r2, #5
 8005824:	69fa      	ldr	r2, [r7, #28]
 8005826:	440a      	add	r2, r1
 8005828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800582c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005830:	6013      	str	r3, [r2, #0]
 8005832:	e00f      	b.n	8005854 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	0151      	lsls	r1, r2, #5
 8005846:	69fa      	ldr	r2, [r7, #28]
 8005848:	440a      	add	r2, r1
 800584a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800584e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005852:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	0151      	lsls	r1, r2, #5
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	440a      	add	r2, r1
 800586a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800586e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005872:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3720      	adds	r7, #32
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	1ff80000 	.word	0x1ff80000

08005884 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	4613      	mov	r3, r2
 8005890:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	785b      	ldrb	r3, [r3, #1]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	f040 80ce 	bne.w	8005a42 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d132      	bne.n	8005914 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	0151      	lsls	r1, r2, #5
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	440a      	add	r2, r1
 80058c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	0151      	lsls	r1, r2, #5
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	440a      	add	r2, r1
 80058e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	0151      	lsls	r1, r2, #5
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	440a      	add	r2, r1
 8005908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800590c:	0cdb      	lsrs	r3, r3, #19
 800590e:	04db      	lsls	r3, r3, #19
 8005910:	6113      	str	r3, [r2, #16]
 8005912:	e04e      	b.n	80059b2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	0151      	lsls	r1, r2, #5
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	440a      	add	r2, r1
 800592a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592e:	0cdb      	lsrs	r3, r3, #19
 8005930:	04db      	lsls	r3, r3, #19
 8005932:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	0151      	lsls	r1, r2, #5
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	440a      	add	r2, r1
 800594a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800594e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005952:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005956:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	699a      	ldr	r2, [r3, #24]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	429a      	cmp	r2, r3
 8005962:	d903      	bls.n	800596c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	68da      	ldr	r2, [r3, #12]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	0151      	lsls	r1, r2, #5
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	440a      	add	r2, r1
 8005982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005986:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800598a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	4413      	add	r3, r2
 8005994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005998:	691a      	ldr	r2, [r3, #16]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059a2:	6939      	ldr	r1, [r7, #16]
 80059a4:	0148      	lsls	r0, r1, #5
 80059a6:	6979      	ldr	r1, [r7, #20]
 80059a8:	4401      	add	r1, r0
 80059aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80059ae:	4313      	orrs	r3, r2
 80059b0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80059b2:	79fb      	ldrb	r3, [r7, #7]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d11e      	bne.n	80059f6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d009      	beq.n	80059d4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059cc:	461a      	mov	r2, r3
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	0151      	lsls	r1, r2, #5
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	440a      	add	r2, r1
 80059ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059f2:	6013      	str	r3, [r2, #0]
 80059f4:	e097      	b.n	8005b26 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a14:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 8083 	beq.w	8005b26 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	f003 030f 	and.w	r3, r3, #15
 8005a30:	2101      	movs	r1, #1
 8005a32:	fa01 f303 	lsl.w	r3, r1, r3
 8005a36:	6979      	ldr	r1, [r7, #20]
 8005a38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	634b      	str	r3, [r1, #52]	; 0x34
 8005a40:	e071      	b.n	8005b26 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	0151      	lsls	r1, r2, #5
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	440a      	add	r2, r1
 8005a58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a5c:	0cdb      	lsrs	r3, r3, #19
 8005a5e:	04db      	lsls	r3, r3, #19
 8005a60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	0151      	lsls	r1, r2, #5
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	440a      	add	r2, r1
 8005a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a84:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	68da      	ldr	r2, [r3, #12]
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	0151      	lsls	r1, r2, #5
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	440a      	add	r2, r1
 8005ab4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ab8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005abc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aca:	691a      	ldr	r2, [r3, #16]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ad4:	6939      	ldr	r1, [r7, #16]
 8005ad6:	0148      	lsls	r0, r1, #5
 8005ad8:	6979      	ldr	r1, [r7, #20]
 8005ada:	4401      	add	r1, r0
 8005adc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005ae4:	79fb      	ldrb	r3, [r7, #7]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d10d      	bne.n	8005b06 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d009      	beq.n	8005b06 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	6919      	ldr	r1, [r3, #16]
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b02:	460a      	mov	r2, r1
 8005b04:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	0151      	lsls	r1, r2, #5
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	440a      	add	r2, r1
 8005b1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	371c      	adds	r7, #28
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	785b      	ldrb	r3, [r3, #1]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d14a      	bne.n	8005be8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b6a:	f040 8086 	bne.w	8005c7a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	7812      	ldrb	r2, [r2, #0]
 8005b82:	0151      	lsls	r1, r2, #5
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	440a      	add	r2, r1
 8005b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b90:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	7812      	ldrb	r2, [r2, #0]
 8005ba6:	0151      	lsls	r1, r2, #5
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	440a      	add	r2, r1
 8005bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f242 7210 	movw	r2, #10000	; 0x2710
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d902      	bls.n	8005bcc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	75fb      	strb	r3, [r7, #23]
          break;
 8005bca:	e056      	b.n	8005c7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005be0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005be4:	d0e7      	beq.n	8005bb6 <USB_EPStopXfer+0x82>
 8005be6:	e048      	b.n	8005c7a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c00:	d13b      	bne.n	8005c7a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	7812      	ldrb	r2, [r2, #0]
 8005c16:	0151      	lsls	r1, r2, #5
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	440a      	add	r2, r1
 8005c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c24:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	7812      	ldrb	r2, [r2, #0]
 8005c3a:	0151      	lsls	r1, r2, #5
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	440a      	add	r2, r1
 8005c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f242 7210 	movw	r2, #10000	; 0x2710
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d902      	bls.n	8005c60 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	75fb      	strb	r3, [r7, #23]
          break;
 8005c5e:	e00c      	b.n	8005c7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c78:	d0e7      	beq.n	8005c4a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	371c      	adds	r7, #28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b089      	sub	sp, #36	; 0x24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	4611      	mov	r1, r2
 8005c94:	461a      	mov	r2, r3
 8005c96:	460b      	mov	r3, r1
 8005c98:	71fb      	strb	r3, [r7, #7]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005ca6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d123      	bne.n	8005cf6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005cae:	88bb      	ldrh	r3, [r7, #4]
 8005cb0:	3303      	adds	r3, #3
 8005cb2:	089b      	lsrs	r3, r3, #2
 8005cb4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	61bb      	str	r3, [r7, #24]
 8005cba:	e018      	b.n	8005cee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005cbc:	79fb      	ldrb	r3, [r7, #7]
 8005cbe:	031a      	lsls	r2, r3, #12
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cc8:	461a      	mov	r2, r3
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	3301      	adds	r3, #1
 8005cec:	61bb      	str	r3, [r7, #24]
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d3e2      	bcc.n	8005cbc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3724      	adds	r7, #36	; 0x24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b08b      	sub	sp, #44	; 0x2c
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005d1a:	88fb      	ldrh	r3, [r7, #6]
 8005d1c:	089b      	lsrs	r3, r3, #2
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005d22:	88fb      	ldrh	r3, [r7, #6]
 8005d24:	f003 0303 	and.w	r3, r3, #3
 8005d28:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	623b      	str	r3, [r7, #32]
 8005d2e:	e014      	b.n	8005d5a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	3301      	adds	r3, #1
 8005d40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	3301      	adds	r3, #1
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	3301      	adds	r3, #1
 8005d52:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	3301      	adds	r3, #1
 8005d58:	623b      	str	r3, [r7, #32]
 8005d5a:	6a3a      	ldr	r2, [r7, #32]
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d3e6      	bcc.n	8005d30 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005d62:	8bfb      	ldrh	r3, [r7, #30]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d01e      	beq.n	8005da6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d72:	461a      	mov	r2, r3
 8005d74:	f107 0310 	add.w	r3, r7, #16
 8005d78:	6812      	ldr	r2, [r2, #0]
 8005d7a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	fa22 f303 	lsr.w	r3, r2, r3
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	701a      	strb	r2, [r3, #0]
      i++;
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	3301      	adds	r3, #1
 8005d92:	623b      	str	r3, [r7, #32]
      pDest++;
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	3301      	adds	r3, #1
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005d9a:	8bfb      	ldrh	r3, [r7, #30]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005da0:	8bfb      	ldrh	r3, [r7, #30]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1ea      	bne.n	8005d7c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	372c      	adds	r7, #44	; 0x2c
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	785b      	ldrb	r3, [r3, #1]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d12c      	bne.n	8005e2a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	db12      	blt.n	8005e08 <USB_EPSetStall+0x54>
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00f      	beq.n	8005e08 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	0151      	lsls	r1, r2, #5
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	440a      	add	r2, r1
 8005dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e06:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	0151      	lsls	r1, r2, #5
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	440a      	add	r2, r1
 8005e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e26:	6013      	str	r3, [r2, #0]
 8005e28:	e02b      	b.n	8005e82 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	db12      	blt.n	8005e62 <USB_EPSetStall+0xae>
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00f      	beq.n	8005e62 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	0151      	lsls	r1, r2, #5
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	440a      	add	r2, r1
 8005e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e60:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	0151      	lsls	r1, r2, #5
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	440a      	add	r2, r1
 8005e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e80:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	785b      	ldrb	r3, [r3, #1]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d128      	bne.n	8005efe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	0151      	lsls	r1, r2, #5
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	440a      	add	r2, r1
 8005ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005eca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	791b      	ldrb	r3, [r3, #4]
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d003      	beq.n	8005edc <USB_EPClearStall+0x4c>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	791b      	ldrb	r3, [r3, #4]
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d138      	bne.n	8005f4e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	0151      	lsls	r1, r2, #5
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	440a      	add	r2, r1
 8005ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005efa:	6013      	str	r3, [r2, #0]
 8005efc:	e027      	b.n	8005f4e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	0151      	lsls	r1, r2, #5
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	440a      	add	r2, r1
 8005f14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f1c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	791b      	ldrb	r3, [r3, #4]
 8005f22:	2b03      	cmp	r3, #3
 8005f24:	d003      	beq.n	8005f2e <USB_EPClearStall+0x9e>
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	791b      	ldrb	r3, [r3, #4]
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d10f      	bne.n	8005f4e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	0151      	lsls	r1, r2, #5
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	440a      	add	r2, r1
 8005f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f4c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	460b      	mov	r3, r1
 8005f66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f7a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005f7e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	011b      	lsls	r3, r3, #4
 8005f8c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005f90:	68f9      	ldr	r1, [r7, #12]
 8005f92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f96:	4313      	orrs	r3, r2
 8005f98:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005fc2:	f023 0303 	bic.w	r3, r3, #3
 8005fc6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fd6:	f023 0302 	bic.w	r3, r3, #2
 8005fda:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b085      	sub	sp, #20
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006004:	f023 0303 	bic.w	r3, r3, #3
 8006008:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006018:	f043 0302 	orr.w	r3, r3, #2
 800601c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	4013      	ands	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006044:	68fb      	ldr	r3, [r7, #12]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006052:	b480      	push	{r7}
 8006054:	b085      	sub	sp, #20
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	4013      	ands	r3, r2
 8006074:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	0c1b      	lsrs	r3, r3, #16
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006086:	b480      	push	{r7}
 8006088:	b085      	sub	sp, #20
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	4013      	ands	r3, r2
 80060a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	b29b      	uxth	r3, r3
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b085      	sub	sp, #20
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
 80060c2:	460b      	mov	r3, r1
 80060c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80060ca:	78fb      	ldrb	r3, [r7, #3]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	4013      	ands	r3, r2
 80060e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80060e8:	68bb      	ldr	r3, [r7, #8]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b087      	sub	sp, #28
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	460b      	mov	r3, r1
 8006100:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006118:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800611a:	78fb      	ldrb	r3, [r7, #3]
 800611c:	f003 030f 	and.w	r3, r3, #15
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	fa22 f303 	lsr.w	r3, r2, r3
 8006126:	01db      	lsls	r3, r3, #7
 8006128:	b2db      	uxtb	r3, r3
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	4313      	orrs	r3, r2
 800612e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006130:	78fb      	ldrb	r3, [r7, #3]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	4013      	ands	r3, r2
 8006142:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006144:	68bb      	ldr	r3, [r7, #8]
}
 8006146:	4618      	mov	r0, r3
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006152:	b480      	push	{r7}
 8006154:	b083      	sub	sp, #12
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	f003 0301 	and.w	r3, r3, #1
}
 8006162:	4618      	mov	r0, r3
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800616e:	b480      	push	{r7}
 8006170:	b085      	sub	sp, #20
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006188:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800618c:	f023 0307 	bic.w	r3, r3, #7
 8006190:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	460b      	mov	r3, r1
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	333c      	adds	r3, #60	; 0x3c
 80061ca:	3304      	adds	r3, #4
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	4a26      	ldr	r2, [pc, #152]	; (800626c <USB_EP0_OutStart+0xb8>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d90a      	bls.n	80061ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061e8:	d101      	bne.n	80061ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	e037      	b.n	800625e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f4:	461a      	mov	r2, r3
 80061f6:	2300      	movs	r3, #0
 80061f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006208:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800620c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800621c:	f043 0318 	orr.w	r3, r3, #24
 8006220:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006230:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006234:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006236:	7afb      	ldrb	r3, [r7, #11]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d10f      	bne.n	800625c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006242:	461a      	mov	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006256:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800625a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	371c      	adds	r7, #28
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	4f54300a 	.word	0x4f54300a

08006270 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	3301      	adds	r3, #1
 8006280:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4a13      	ldr	r2, [pc, #76]	; (80062d4 <USB_CoreReset+0x64>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d901      	bls.n	800628e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e01b      	b.n	80062c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	daf2      	bge.n	800627c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f043 0201 	orr.w	r2, r3, #1
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	3301      	adds	r3, #1
 80062aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	4a09      	ldr	r2, [pc, #36]	; (80062d4 <USB_CoreReset+0x64>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d901      	bls.n	80062b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e006      	b.n	80062c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d0f0      	beq.n	80062a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	00030d40 	.word	0x00030d40

080062d8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	460b      	mov	r3, r1
 80062e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80062e4:	2010      	movs	r0, #16
 80062e6:	f002 fafb 	bl	80088e0 <USBD_static_malloc>
 80062ea:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d109      	bne.n	8006306 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	32b0      	adds	r2, #176	; 0xb0
 80062fc:	2100      	movs	r1, #0
 80062fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006302:	2302      	movs	r3, #2
 8006304:	e048      	b.n	8006398 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	32b0      	adds	r2, #176	; 0xb0
 8006310:	68f9      	ldr	r1, [r7, #12]
 8006312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	32b0      	adds	r2, #176	; 0xb0
 8006320:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	7c1b      	ldrb	r3, [r3, #16]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10d      	bne.n	800634e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8006332:	4b1b      	ldr	r3, [pc, #108]	; (80063a0 <USBD_HID_Init+0xc8>)
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	f003 020f 	and.w	r2, r3, #15
 800633a:	6879      	ldr	r1, [r7, #4]
 800633c:	4613      	mov	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	440b      	add	r3, r1
 8006346:	3326      	adds	r3, #38	; 0x26
 8006348:	2207      	movs	r2, #7
 800634a:	801a      	strh	r2, [r3, #0]
 800634c:	e00c      	b.n	8006368 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800634e:	4b14      	ldr	r3, [pc, #80]	; (80063a0 <USBD_HID_Init+0xc8>)
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	f003 020f 	and.w	r2, r3, #15
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	4613      	mov	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4413      	add	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	440b      	add	r3, r1
 8006362:	3326      	adds	r3, #38	; 0x26
 8006364:	220a      	movs	r2, #10
 8006366:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006368:	4b0d      	ldr	r3, [pc, #52]	; (80063a0 <USBD_HID_Init+0xc8>)
 800636a:	7819      	ldrb	r1, [r3, #0]
 800636c:	2304      	movs	r3, #4
 800636e:	2203      	movs	r2, #3
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f002 f956 	bl	8008622 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8006376:	4b0a      	ldr	r3, [pc, #40]	; (80063a0 <USBD_HID_Init+0xc8>)
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	f003 020f 	and.w	r2, r3, #15
 800637e:	6879      	ldr	r1, [r7, #4]
 8006380:	4613      	mov	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	440b      	add	r3, r1
 800638a:	3324      	adds	r3, #36	; 0x24
 800638c:	2201      	movs	r2, #1
 800638e:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	200000bf 	.word	0x200000bf

080063a4 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80063b0:	4b1f      	ldr	r3, [pc, #124]	; (8006430 <USBD_HID_DeInit+0x8c>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	4619      	mov	r1, r3
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f002 f959 	bl	800866e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80063bc:	4b1c      	ldr	r3, [pc, #112]	; (8006430 <USBD_HID_DeInit+0x8c>)
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	f003 020f 	and.w	r2, r3, #15
 80063c4:	6879      	ldr	r1, [r7, #4]
 80063c6:	4613      	mov	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4413      	add	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	440b      	add	r3, r1
 80063d0:	3324      	adds	r3, #36	; 0x24
 80063d2:	2200      	movs	r2, #0
 80063d4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80063d6:	4b16      	ldr	r3, [pc, #88]	; (8006430 <USBD_HID_DeInit+0x8c>)
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	f003 020f 	and.w	r2, r3, #15
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	4613      	mov	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	440b      	add	r3, r1
 80063ea:	3326      	adds	r3, #38	; 0x26
 80063ec:	2200      	movs	r2, #0
 80063ee:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	32b0      	adds	r2, #176	; 0xb0
 80063fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d011      	beq.n	8006426 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	32b0      	adds	r2, #176	; 0xb0
 800640c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006410:	4618      	mov	r0, r3
 8006412:	f002 fa73 	bl	80088fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	32b0      	adds	r2, #176	; 0xb0
 8006420:	2100      	movs	r1, #0
 8006422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3708      	adds	r7, #8
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	200000bf 	.word	0x200000bf

08006434 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	32b0      	adds	r2, #176	; 0xb0
 8006448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800644c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d101      	bne.n	8006460 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800645c:	2303      	movs	r3, #3
 800645e:	e0e8      	b.n	8006632 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006468:	2b00      	cmp	r3, #0
 800646a:	d046      	beq.n	80064fa <USBD_HID_Setup+0xc6>
 800646c:	2b20      	cmp	r3, #32
 800646e:	f040 80d8 	bne.w	8006622 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	785b      	ldrb	r3, [r3, #1]
 8006476:	3b02      	subs	r3, #2
 8006478:	2b09      	cmp	r3, #9
 800647a:	d836      	bhi.n	80064ea <USBD_HID_Setup+0xb6>
 800647c:	a201      	add	r2, pc, #4	; (adr r2, 8006484 <USBD_HID_Setup+0x50>)
 800647e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006482:	bf00      	nop
 8006484:	080064db 	.word	0x080064db
 8006488:	080064bb 	.word	0x080064bb
 800648c:	080064eb 	.word	0x080064eb
 8006490:	080064eb 	.word	0x080064eb
 8006494:	080064eb 	.word	0x080064eb
 8006498:	080064eb 	.word	0x080064eb
 800649c:	080064eb 	.word	0x080064eb
 80064a0:	080064eb 	.word	0x080064eb
 80064a4:	080064c9 	.word	0x080064c9
 80064a8:	080064ad 	.word	0x080064ad
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	885b      	ldrh	r3, [r3, #2]
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	461a      	mov	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	601a      	str	r2, [r3, #0]
          break;
 80064b8:	e01e      	b.n	80064f8 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2201      	movs	r2, #1
 80064be:	4619      	mov	r1, r3
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f001 fbcf 	bl	8007c64 <USBD_CtlSendData>
          break;
 80064c6:	e017      	b.n	80064f8 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	885b      	ldrh	r3, [r3, #2]
 80064cc:	0a1b      	lsrs	r3, r3, #8
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	461a      	mov	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	605a      	str	r2, [r3, #4]
          break;
 80064d8:	e00e      	b.n	80064f8 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3304      	adds	r3, #4
 80064de:	2201      	movs	r2, #1
 80064e0:	4619      	mov	r1, r3
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f001 fbbe 	bl	8007c64 <USBD_CtlSendData>
          break;
 80064e8:	e006      	b.n	80064f8 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f001 fb48 	bl	8007b82 <USBD_CtlError>
          ret = USBD_FAIL;
 80064f2:	2303      	movs	r3, #3
 80064f4:	75fb      	strb	r3, [r7, #23]
          break;
 80064f6:	bf00      	nop
      }
      break;
 80064f8:	e09a      	b.n	8006630 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	785b      	ldrb	r3, [r3, #1]
 80064fe:	2b0b      	cmp	r3, #11
 8006500:	f200 8086 	bhi.w	8006610 <USBD_HID_Setup+0x1dc>
 8006504:	a201      	add	r2, pc, #4	; (adr r2, 800650c <USBD_HID_Setup+0xd8>)
 8006506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650a:	bf00      	nop
 800650c:	0800653d 	.word	0x0800653d
 8006510:	0800661f 	.word	0x0800661f
 8006514:	08006611 	.word	0x08006611
 8006518:	08006611 	.word	0x08006611
 800651c:	08006611 	.word	0x08006611
 8006520:	08006611 	.word	0x08006611
 8006524:	08006567 	.word	0x08006567
 8006528:	08006611 	.word	0x08006611
 800652c:	08006611 	.word	0x08006611
 8006530:	08006611 	.word	0x08006611
 8006534:	080065bf 	.word	0x080065bf
 8006538:	080065e9 	.word	0x080065e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b03      	cmp	r3, #3
 8006546:	d107      	bne.n	8006558 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006548:	f107 030a 	add.w	r3, r7, #10
 800654c:	2202      	movs	r2, #2
 800654e:	4619      	mov	r1, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f001 fb87 	bl	8007c64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006556:	e063      	b.n	8006620 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006558:	6839      	ldr	r1, [r7, #0]
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f001 fb11 	bl	8007b82 <USBD_CtlError>
            ret = USBD_FAIL;
 8006560:	2303      	movs	r3, #3
 8006562:	75fb      	strb	r3, [r7, #23]
          break;
 8006564:	e05c      	b.n	8006620 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	885b      	ldrh	r3, [r3, #2]
 800656a:	0a1b      	lsrs	r3, r3, #8
 800656c:	b29b      	uxth	r3, r3
 800656e:	2b22      	cmp	r3, #34	; 0x22
 8006570:	d108      	bne.n	8006584 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	88db      	ldrh	r3, [r3, #6]
 8006576:	2b3f      	cmp	r3, #63	; 0x3f
 8006578:	bf28      	it	cs
 800657a:	233f      	movcs	r3, #63	; 0x3f
 800657c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800657e:	4b2f      	ldr	r3, [pc, #188]	; (800663c <USBD_HID_Setup+0x208>)
 8006580:	613b      	str	r3, [r7, #16]
 8006582:	e015      	b.n	80065b0 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	885b      	ldrh	r3, [r3, #2]
 8006588:	0a1b      	lsrs	r3, r3, #8
 800658a:	b29b      	uxth	r3, r3
 800658c:	2b21      	cmp	r3, #33	; 0x21
 800658e:	d108      	bne.n	80065a2 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8006590:	4b2b      	ldr	r3, [pc, #172]	; (8006640 <USBD_HID_Setup+0x20c>)
 8006592:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	88db      	ldrh	r3, [r3, #6]
 8006598:	2b09      	cmp	r3, #9
 800659a:	bf28      	it	cs
 800659c:	2309      	movcs	r3, #9
 800659e:	82bb      	strh	r3, [r7, #20]
 80065a0:	e006      	b.n	80065b0 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80065a2:	6839      	ldr	r1, [r7, #0]
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f001 faec 	bl	8007b82 <USBD_CtlError>
            ret = USBD_FAIL;
 80065aa:	2303      	movs	r3, #3
 80065ac:	75fb      	strb	r3, [r7, #23]
            break;
 80065ae:	e037      	b.n	8006620 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80065b0:	8abb      	ldrh	r3, [r7, #20]
 80065b2:	461a      	mov	r2, r3
 80065b4:	6939      	ldr	r1, [r7, #16]
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f001 fb54 	bl	8007c64 <USBD_CtlSendData>
          break;
 80065bc:	e030      	b.n	8006620 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d107      	bne.n	80065da <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	3308      	adds	r3, #8
 80065ce:	2201      	movs	r2, #1
 80065d0:	4619      	mov	r1, r3
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f001 fb46 	bl	8007c64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065d8:	e022      	b.n	8006620 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80065da:	6839      	ldr	r1, [r7, #0]
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f001 fad0 	bl	8007b82 <USBD_CtlError>
            ret = USBD_FAIL;
 80065e2:	2303      	movs	r3, #3
 80065e4:	75fb      	strb	r3, [r7, #23]
          break;
 80065e6:	e01b      	b.n	8006620 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	d106      	bne.n	8006602 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	885b      	ldrh	r3, [r3, #2]
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	461a      	mov	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006600:	e00e      	b.n	8006620 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006602:	6839      	ldr	r1, [r7, #0]
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f001 fabc 	bl	8007b82 <USBD_CtlError>
            ret = USBD_FAIL;
 800660a:	2303      	movs	r3, #3
 800660c:	75fb      	strb	r3, [r7, #23]
          break;
 800660e:	e007      	b.n	8006620 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f001 fab5 	bl	8007b82 <USBD_CtlError>
          ret = USBD_FAIL;
 8006618:	2303      	movs	r3, #3
 800661a:	75fb      	strb	r3, [r7, #23]
          break;
 800661c:	e000      	b.n	8006620 <USBD_HID_Setup+0x1ec>
          break;
 800661e:	bf00      	nop
      }
      break;
 8006620:	e006      	b.n	8006630 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f001 faac 	bl	8007b82 <USBD_CtlError>
      ret = USBD_FAIL;
 800662a:	2303      	movs	r3, #3
 800662c:	75fb      	strb	r3, [r7, #23]
      break;
 800662e:	bf00      	nop
  }

  return (uint8_t)ret;
 8006630:	7dfb      	ldrb	r3, [r7, #23]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	20000080 	.word	0x20000080
 8006640:	20000068 	.word	0x20000068

08006644 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800664c:	2181      	movs	r1, #129	; 0x81
 800664e:	4809      	ldr	r0, [pc, #36]	; (8006674 <USBD_HID_GetFSCfgDesc+0x30>)
 8006650:	f000 fc35 	bl	8006ebe <USBD_GetEpDesc>
 8006654:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	220a      	movs	r2, #10
 8006660:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2222      	movs	r2, #34	; 0x22
 8006666:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006668:	4b02      	ldr	r3, [pc, #8]	; (8006674 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	20000044 	.word	0x20000044

08006678 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006680:	2181      	movs	r1, #129	; 0x81
 8006682:	4809      	ldr	r0, [pc, #36]	; (80066a8 <USBD_HID_GetHSCfgDesc+0x30>)
 8006684:	f000 fc1b 	bl	8006ebe <USBD_GetEpDesc>
 8006688:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2207      	movs	r2, #7
 8006694:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2222      	movs	r2, #34	; 0x22
 800669a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800669c:	4b02      	ldr	r3, [pc, #8]	; (80066a8 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20000044 	.word	0x20000044

080066ac <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80066b4:	2181      	movs	r1, #129	; 0x81
 80066b6:	4809      	ldr	r0, [pc, #36]	; (80066dc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80066b8:	f000 fc01 	bl	8006ebe <USBD_GetEpDesc>
 80066bc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d002      	beq.n	80066ca <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	220a      	movs	r2, #10
 80066c8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2222      	movs	r2, #34	; 0x22
 80066ce:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80066d0:	4b02      	ldr	r3, [pc, #8]	; (80066dc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	20000044 	.word	0x20000044

080066e0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	32b0      	adds	r2, #176	; 0xb0
 80066f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066fa:	2200      	movs	r2, #0
 80066fc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	220a      	movs	r2, #10
 8006718:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800671a:	4b03      	ldr	r3, [pc, #12]	; (8006728 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800671c:	4618      	mov	r0, r3
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr
 8006728:	20000074 	.word	0x20000074

0800672c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	4613      	mov	r3, r2
 8006738:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006740:	2303      	movs	r3, #3
 8006742:	e01f      	b.n	8006784 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	79fa      	ldrb	r2, [r7, #7]
 8006776:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f001 fea1 	bl	80084c0 <USBD_LL_Init>
 800677e:	4603      	mov	r3, r0
 8006780:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006782:	7dfb      	ldrb	r3, [r7, #23]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3718      	adds	r7, #24
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006796:	2300      	movs	r3, #0
 8006798:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e025      	b.n	80067f0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	32ae      	adds	r2, #174	; 0xae
 80067b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00f      	beq.n	80067e0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	32ae      	adds	r2, #174	; 0xae
 80067ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d0:	f107 020e 	add.w	r2, r7, #14
 80067d4:	4610      	mov	r0, r2
 80067d6:	4798      	blx	r3
 80067d8:	4602      	mov	r2, r0
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f001 fef3 	bl	80085ec <USBD_LL_Start>
 8006806:	4603      	mov	r3, r0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006818:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800681a:	4618      	mov	r0, r3
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	460b      	mov	r3, r1
 8006830:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800683c:	2b00      	cmp	r3, #0
 800683e:	d009      	beq.n	8006854 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	78fa      	ldrb	r2, [r7, #3]
 800684a:	4611      	mov	r1, r2
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	4798      	blx	r3
 8006850:	4603      	mov	r3, r0
 8006852:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006854:	7bfb      	ldrb	r3, [r7, #15]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b084      	sub	sp, #16
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	460b      	mov	r3, r1
 8006868:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800686a:	2300      	movs	r3, #0
 800686c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	78fa      	ldrb	r2, [r7, #3]
 8006878:	4611      	mov	r1, r2
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	4798      	blx	r3
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006884:	2303      	movs	r3, #3
 8006886:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006888:	7bfb      	ldrb	r3, [r7, #15]
}
 800688a:	4618      	mov	r0, r3
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b084      	sub	sp, #16
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
 800689a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	4618      	mov	r0, r3
 80068a6:	f001 f932 	bl	8007b0e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80068b8:	461a      	mov	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068c6:	f003 031f 	and.w	r3, r3, #31
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d01a      	beq.n	8006904 <USBD_LL_SetupStage+0x72>
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d822      	bhi.n	8006918 <USBD_LL_SetupStage+0x86>
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <USBD_LL_SetupStage+0x4a>
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d00a      	beq.n	80068f0 <USBD_LL_SetupStage+0x5e>
 80068da:	e01d      	b.n	8006918 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068e2:	4619      	mov	r1, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fb5f 	bl	8006fa8 <USBD_StdDevReq>
 80068ea:	4603      	mov	r3, r0
 80068ec:	73fb      	strb	r3, [r7, #15]
      break;
 80068ee:	e020      	b.n	8006932 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fbc7 	bl	800708c <USBD_StdItfReq>
 80068fe:	4603      	mov	r3, r0
 8006900:	73fb      	strb	r3, [r7, #15]
      break;
 8006902:	e016      	b.n	8006932 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fc29 	bl	8007164 <USBD_StdEPReq>
 8006912:	4603      	mov	r3, r0
 8006914:	73fb      	strb	r3, [r7, #15]
      break;
 8006916:	e00c      	b.n	8006932 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800691e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006922:	b2db      	uxtb	r3, r3
 8006924:	4619      	mov	r1, r3
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f001 fec0 	bl	80086ac <USBD_LL_StallEP>
 800692c:	4603      	mov	r3, r0
 800692e:	73fb      	strb	r3, [r7, #15]
      break;
 8006930:	bf00      	nop
  }

  return ret;
 8006932:	7bfb      	ldrb	r3, [r7, #15]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	460b      	mov	r3, r1
 8006946:	607a      	str	r2, [r7, #4]
 8006948:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800694e:	7afb      	ldrb	r3, [r7, #11]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d16e      	bne.n	8006a32 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800695a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006962:	2b03      	cmp	r3, #3
 8006964:	f040 8098 	bne.w	8006a98 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	689a      	ldr	r2, [r3, #8]
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	429a      	cmp	r2, r3
 8006972:	d913      	bls.n	800699c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	689a      	ldr	r2, [r3, #8]
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	1ad2      	subs	r2, r2, r3
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	68da      	ldr	r2, [r3, #12]
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	4293      	cmp	r3, r2
 800698c:	bf28      	it	cs
 800698e:	4613      	movcs	r3, r2
 8006990:	461a      	mov	r2, r3
 8006992:	6879      	ldr	r1, [r7, #4]
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f001 f991 	bl	8007cbc <USBD_CtlContinueRx>
 800699a:	e07d      	b.n	8006a98 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80069a2:	f003 031f 	and.w	r3, r3, #31
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d014      	beq.n	80069d4 <USBD_LL_DataOutStage+0x98>
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d81d      	bhi.n	80069ea <USBD_LL_DataOutStage+0xae>
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <USBD_LL_DataOutStage+0x7c>
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d003      	beq.n	80069be <USBD_LL_DataOutStage+0x82>
 80069b6:	e018      	b.n	80069ea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	75bb      	strb	r3, [r7, #22]
            break;
 80069bc:	e018      	b.n	80069f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	4619      	mov	r1, r3
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 fa5e 	bl	8006e8a <USBD_CoreFindIF>
 80069ce:	4603      	mov	r3, r0
 80069d0:	75bb      	strb	r3, [r7, #22]
            break;
 80069d2:	e00d      	b.n	80069f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	4619      	mov	r1, r3
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 fa60 	bl	8006ea4 <USBD_CoreFindEP>
 80069e4:	4603      	mov	r3, r0
 80069e6:	75bb      	strb	r3, [r7, #22]
            break;
 80069e8:	e002      	b.n	80069f0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80069ea:	2300      	movs	r3, #0
 80069ec:	75bb      	strb	r3, [r7, #22]
            break;
 80069ee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80069f0:	7dbb      	ldrb	r3, [r7, #22]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d119      	bne.n	8006a2a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d113      	bne.n	8006a2a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006a02:	7dba      	ldrb	r2, [r7, #22]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	32ae      	adds	r2, #174	; 0xae
 8006a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00b      	beq.n	8006a2a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006a12:	7dba      	ldrb	r2, [r7, #22]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006a1a:	7dba      	ldrb	r2, [r7, #22]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	32ae      	adds	r2, #174	; 0xae
 8006a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f001 f957 	bl	8007cde <USBD_CtlSendStatus>
 8006a30:	e032      	b.n	8006a98 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006a32:	7afb      	ldrb	r3, [r7, #11]
 8006a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 fa31 	bl	8006ea4 <USBD_CoreFindEP>
 8006a42:	4603      	mov	r3, r0
 8006a44:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a46:	7dbb      	ldrb	r3, [r7, #22]
 8006a48:	2bff      	cmp	r3, #255	; 0xff
 8006a4a:	d025      	beq.n	8006a98 <USBD_LL_DataOutStage+0x15c>
 8006a4c:	7dbb      	ldrb	r3, [r7, #22]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d122      	bne.n	8006a98 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	d117      	bne.n	8006a8e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006a5e:	7dba      	ldrb	r2, [r7, #22]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	32ae      	adds	r2, #174	; 0xae
 8006a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00f      	beq.n	8006a8e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006a6e:	7dba      	ldrb	r2, [r7, #22]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006a76:	7dba      	ldrb	r2, [r7, #22]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	32ae      	adds	r2, #174	; 0xae
 8006a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	7afa      	ldrb	r2, [r7, #11]
 8006a84:	4611      	mov	r1, r2
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	4798      	blx	r3
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006a8e:	7dfb      	ldrb	r3, [r7, #23]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006a94:	7dfb      	ldrb	r3, [r7, #23]
 8006a96:	e000      	b.n	8006a9a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b086      	sub	sp, #24
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	460b      	mov	r3, r1
 8006aac:	607a      	str	r2, [r7, #4]
 8006aae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006ab0:	7afb      	ldrb	r3, [r7, #11]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d16f      	bne.n	8006b96 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	3314      	adds	r3, #20
 8006aba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d15a      	bne.n	8006b7c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	689a      	ldr	r2, [r3, #8]
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d914      	bls.n	8006afc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	689a      	ldr	r2, [r3, #8]
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	1ad2      	subs	r2, r2, r3
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	6879      	ldr	r1, [r7, #4]
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f001 f8d6 	bl	8007c9a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006aee:	2300      	movs	r3, #0
 8006af0:	2200      	movs	r2, #0
 8006af2:	2100      	movs	r1, #0
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f001 fe83 	bl	8008800 <USBD_LL_PrepareReceive>
 8006afa:	e03f      	b.n	8006b7c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	68da      	ldr	r2, [r3, #12]
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d11c      	bne.n	8006b42 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d316      	bcc.n	8006b42 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d20f      	bcs.n	8006b42 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b22:	2200      	movs	r2, #0
 8006b24:	2100      	movs	r1, #0
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f001 f8b7 	bl	8007c9a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b34:	2300      	movs	r3, #0
 8006b36:	2200      	movs	r2, #0
 8006b38:	2100      	movs	r1, #0
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f001 fe60 	bl	8008800 <USBD_LL_PrepareReceive>
 8006b40:	e01c      	b.n	8006b7c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d10f      	bne.n	8006b6e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d009      	beq.n	8006b6e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b6e:	2180      	movs	r1, #128	; 0x80
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f001 fd9b 	bl	80086ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f001 f8c4 	bl	8007d04 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d03a      	beq.n	8006bfc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f7ff fe42 	bl	8006810 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006b94:	e032      	b.n	8006bfc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006b96:	7afb      	ldrb	r3, [r7, #11]
 8006b98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 f97f 	bl	8006ea4 <USBD_CoreFindEP>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006baa:	7dfb      	ldrb	r3, [r7, #23]
 8006bac:	2bff      	cmp	r3, #255	; 0xff
 8006bae:	d025      	beq.n	8006bfc <USBD_LL_DataInStage+0x15a>
 8006bb0:	7dfb      	ldrb	r3, [r7, #23]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d122      	bne.n	8006bfc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d11c      	bne.n	8006bfc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006bc2:	7dfa      	ldrb	r2, [r7, #23]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	32ae      	adds	r2, #174	; 0xae
 8006bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d014      	beq.n	8006bfc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006bd2:	7dfa      	ldrb	r2, [r7, #23]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006bda:	7dfa      	ldrb	r2, [r7, #23]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	32ae      	adds	r2, #174	; 0xae
 8006be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	7afa      	ldrb	r2, [r7, #11]
 8006be8:	4611      	mov	r1, r2
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	4798      	blx	r3
 8006bee:	4603      	mov	r3, r0
 8006bf0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006bf2:	7dbb      	ldrb	r3, [r7, #22]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006bf8:	7dbb      	ldrb	r3, [r7, #22]
 8006bfa:	e000      	b.n	8006bfe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3718      	adds	r7, #24
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b084      	sub	sp, #16
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d014      	beq.n	8006c6c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00e      	beq.n	8006c6c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	6852      	ldr	r2, [r2, #4]
 8006c5a:	b2d2      	uxtb	r2, r2
 8006c5c:	4611      	mov	r1, r2
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	4798      	blx	r3
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c6c:	2340      	movs	r3, #64	; 0x40
 8006c6e:	2200      	movs	r2, #0
 8006c70:	2100      	movs	r1, #0
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f001 fcd5 	bl	8008622 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2240      	movs	r2, #64	; 0x40
 8006c84:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c88:	2340      	movs	r3, #64	; 0x40
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2180      	movs	r1, #128	; 0x80
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f001 fcc7 	bl	8008622 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2240      	movs	r2, #64	; 0x40
 8006c9e:	621a      	str	r2, [r3, #32]

  return ret;
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b083      	sub	sp, #12
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	78fa      	ldrb	r2, [r7, #3]
 8006cba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b083      	sub	sp, #12
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2204      	movs	r2, #4
 8006ce4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b083      	sub	sp, #12
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b04      	cmp	r3, #4
 8006d08:	d106      	bne.n	8006d18 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b082      	sub	sp, #8
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	d110      	bne.n	8006d5c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00b      	beq.n	8006d5c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d4a:	69db      	ldr	r3, [r3, #28]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d005      	beq.n	8006d5c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d56:	69db      	ldr	r3, [r3, #28]
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b082      	sub	sp, #8
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	460b      	mov	r3, r1
 8006d70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	32ae      	adds	r2, #174	; 0xae
 8006d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e01c      	b.n	8006dc2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d115      	bne.n	8006dc0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	32ae      	adds	r2, #174	; 0xae
 8006d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da2:	6a1b      	ldr	r3, [r3, #32]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00b      	beq.n	8006dc0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	32ae      	adds	r2, #174	; 0xae
 8006db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006db6:	6a1b      	ldr	r3, [r3, #32]
 8006db8:	78fa      	ldrb	r2, [r7, #3]
 8006dba:	4611      	mov	r1, r2
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b082      	sub	sp, #8
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	32ae      	adds	r2, #174	; 0xae
 8006de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d101      	bne.n	8006dec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e01c      	b.n	8006e26 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b03      	cmp	r3, #3
 8006df6:	d115      	bne.n	8006e24 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	32ae      	adds	r2, #174	; 0xae
 8006e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00b      	beq.n	8006e24 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	32ae      	adds	r2, #174	; 0xae
 8006e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1c:	78fa      	ldrb	r2, [r7, #3]
 8006e1e:	4611      	mov	r1, r2
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3708      	adds	r7, #8
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b083      	sub	sp, #12
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00e      	beq.n	8006e80 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	6852      	ldr	r2, [r2, #4]
 8006e6e:	b2d2      	uxtb	r2, r2
 8006e70:	4611      	mov	r1, r2
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	4798      	blx	r3
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b083      	sub	sp, #12
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	460b      	mov	r3, r1
 8006e94:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e96:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	460b      	mov	r3, r1
 8006eae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006eb0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b086      	sub	sp, #24
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	885b      	ldrh	r3, [r3, #2]
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d920      	bls.n	8006f28 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006eee:	e013      	b.n	8006f18 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006ef0:	f107 030a 	add.w	r3, r7, #10
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6978      	ldr	r0, [r7, #20]
 8006ef8:	f000 f81b 	bl	8006f32 <USBD_GetNextDesc>
 8006efc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	785b      	ldrb	r3, [r3, #1]
 8006f02:	2b05      	cmp	r3, #5
 8006f04:	d108      	bne.n	8006f18 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	789b      	ldrb	r3, [r3, #2]
 8006f0e:	78fa      	ldrb	r2, [r7, #3]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d008      	beq.n	8006f26 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006f14:	2300      	movs	r3, #0
 8006f16:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	885b      	ldrh	r3, [r3, #2]
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	897b      	ldrh	r3, [r7, #10]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d8e5      	bhi.n	8006ef0 <USBD_GetEpDesc+0x32>
 8006f24:	e000      	b.n	8006f28 <USBD_GetEpDesc+0x6a>
          break;
 8006f26:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006f28:	693b      	ldr	r3, [r7, #16]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3718      	adds	r7, #24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b085      	sub	sp, #20
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	881a      	ldrh	r2, [r3, #0]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	4413      	add	r3, r2
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	461a      	mov	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b087      	sub	sp, #28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	3301      	adds	r3, #1
 8006f82:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006f8a:	8a3b      	ldrh	r3, [r7, #16]
 8006f8c:	021b      	lsls	r3, r3, #8
 8006f8e:	b21a      	sxth	r2, r3
 8006f90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	b21b      	sxth	r3, r3
 8006f98:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006f9a:	89fb      	ldrh	r3, [r7, #14]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	371c      	adds	r7, #28
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fbe:	2b40      	cmp	r3, #64	; 0x40
 8006fc0:	d005      	beq.n	8006fce <USBD_StdDevReq+0x26>
 8006fc2:	2b40      	cmp	r3, #64	; 0x40
 8006fc4:	d857      	bhi.n	8007076 <USBD_StdDevReq+0xce>
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00f      	beq.n	8006fea <USBD_StdDevReq+0x42>
 8006fca:	2b20      	cmp	r3, #32
 8006fcc:	d153      	bne.n	8007076 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	32ae      	adds	r2, #174	; 0xae
 8006fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	4798      	blx	r3
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8006fe8:	e04a      	b.n	8007080 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	785b      	ldrb	r3, [r3, #1]
 8006fee:	2b09      	cmp	r3, #9
 8006ff0:	d83b      	bhi.n	800706a <USBD_StdDevReq+0xc2>
 8006ff2:	a201      	add	r2, pc, #4	; (adr r2, 8006ff8 <USBD_StdDevReq+0x50>)
 8006ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff8:	0800704d 	.word	0x0800704d
 8006ffc:	08007061 	.word	0x08007061
 8007000:	0800706b 	.word	0x0800706b
 8007004:	08007057 	.word	0x08007057
 8007008:	0800706b 	.word	0x0800706b
 800700c:	0800702b 	.word	0x0800702b
 8007010:	08007021 	.word	0x08007021
 8007014:	0800706b 	.word	0x0800706b
 8007018:	08007043 	.word	0x08007043
 800701c:	08007035 	.word	0x08007035
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fa3c 	bl	80074a0 <USBD_GetDescriptor>
          break;
 8007028:	e024      	b.n	8007074 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fbcb 	bl	80077c8 <USBD_SetAddress>
          break;
 8007032:	e01f      	b.n	8007074 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fc0a 	bl	8007850 <USBD_SetConfig>
 800703c:	4603      	mov	r3, r0
 800703e:	73fb      	strb	r3, [r7, #15]
          break;
 8007040:	e018      	b.n	8007074 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fcad 	bl	80079a4 <USBD_GetConfig>
          break;
 800704a:	e013      	b.n	8007074 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fcde 	bl	8007a10 <USBD_GetStatus>
          break;
 8007054:	e00e      	b.n	8007074 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fd0d 	bl	8007a78 <USBD_SetFeature>
          break;
 800705e:	e009      	b.n	8007074 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007060:	6839      	ldr	r1, [r7, #0]
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fd31 	bl	8007aca <USBD_ClrFeature>
          break;
 8007068:	e004      	b.n	8007074 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800706a:	6839      	ldr	r1, [r7, #0]
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fd88 	bl	8007b82 <USBD_CtlError>
          break;
 8007072:	bf00      	nop
      }
      break;
 8007074:	e004      	b.n	8007080 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fd82 	bl	8007b82 <USBD_CtlError>
      break;
 800707e:	bf00      	nop
  }

  return ret;
 8007080:	7bfb      	ldrb	r3, [r7, #15]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop

0800708c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007096:	2300      	movs	r3, #0
 8007098:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070a2:	2b40      	cmp	r3, #64	; 0x40
 80070a4:	d005      	beq.n	80070b2 <USBD_StdItfReq+0x26>
 80070a6:	2b40      	cmp	r3, #64	; 0x40
 80070a8:	d852      	bhi.n	8007150 <USBD_StdItfReq+0xc4>
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d001      	beq.n	80070b2 <USBD_StdItfReq+0x26>
 80070ae:	2b20      	cmp	r3, #32
 80070b0:	d14e      	bne.n	8007150 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	3b01      	subs	r3, #1
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d840      	bhi.n	8007142 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	889b      	ldrh	r3, [r3, #4]
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d836      	bhi.n	8007138 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	889b      	ldrh	r3, [r3, #4]
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	4619      	mov	r1, r3
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7ff fed9 	bl	8006e8a <USBD_CoreFindIF>
 80070d8:	4603      	mov	r3, r0
 80070da:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070dc:	7bbb      	ldrb	r3, [r7, #14]
 80070de:	2bff      	cmp	r3, #255	; 0xff
 80070e0:	d01d      	beq.n	800711e <USBD_StdItfReq+0x92>
 80070e2:	7bbb      	ldrb	r3, [r7, #14]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d11a      	bne.n	800711e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80070e8:	7bba      	ldrb	r2, [r7, #14]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	32ae      	adds	r2, #174	; 0xae
 80070ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00f      	beq.n	8007118 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80070f8:	7bba      	ldrb	r2, [r7, #14]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007100:	7bba      	ldrb	r2, [r7, #14]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	32ae      	adds	r2, #174	; 0xae
 8007106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	4798      	blx	r3
 8007112:	4603      	mov	r3, r0
 8007114:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007116:	e004      	b.n	8007122 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007118:	2303      	movs	r3, #3
 800711a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800711c:	e001      	b.n	8007122 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800711e:	2303      	movs	r3, #3
 8007120:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	88db      	ldrh	r3, [r3, #6]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d110      	bne.n	800714c <USBD_StdItfReq+0xc0>
 800712a:	7bfb      	ldrb	r3, [r7, #15]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10d      	bne.n	800714c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fdd4 	bl	8007cde <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007136:	e009      	b.n	800714c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fd21 	bl	8007b82 <USBD_CtlError>
          break;
 8007140:	e004      	b.n	800714c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fd1c 	bl	8007b82 <USBD_CtlError>
          break;
 800714a:	e000      	b.n	800714e <USBD_StdItfReq+0xc2>
          break;
 800714c:	bf00      	nop
      }
      break;
 800714e:	e004      	b.n	800715a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fd15 	bl	8007b82 <USBD_CtlError>
      break;
 8007158:	bf00      	nop
  }

  return ret;
 800715a:	7bfb      	ldrb	r3, [r7, #15]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	889b      	ldrh	r3, [r3, #4]
 8007176:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007180:	2b40      	cmp	r3, #64	; 0x40
 8007182:	d007      	beq.n	8007194 <USBD_StdEPReq+0x30>
 8007184:	2b40      	cmp	r3, #64	; 0x40
 8007186:	f200 817f 	bhi.w	8007488 <USBD_StdEPReq+0x324>
 800718a:	2b00      	cmp	r3, #0
 800718c:	d02a      	beq.n	80071e4 <USBD_StdEPReq+0x80>
 800718e:	2b20      	cmp	r3, #32
 8007190:	f040 817a 	bne.w	8007488 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007194:	7bbb      	ldrb	r3, [r7, #14]
 8007196:	4619      	mov	r1, r3
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7ff fe83 	bl	8006ea4 <USBD_CoreFindEP>
 800719e:	4603      	mov	r3, r0
 80071a0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071a2:	7b7b      	ldrb	r3, [r7, #13]
 80071a4:	2bff      	cmp	r3, #255	; 0xff
 80071a6:	f000 8174 	beq.w	8007492 <USBD_StdEPReq+0x32e>
 80071aa:	7b7b      	ldrb	r3, [r7, #13]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f040 8170 	bne.w	8007492 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80071b2:	7b7a      	ldrb	r2, [r7, #13]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80071ba:	7b7a      	ldrb	r2, [r7, #13]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	32ae      	adds	r2, #174	; 0xae
 80071c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 8163 	beq.w	8007492 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80071cc:	7b7a      	ldrb	r2, [r7, #13]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	32ae      	adds	r2, #174	; 0xae
 80071d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	4798      	blx	r3
 80071de:	4603      	mov	r3, r0
 80071e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80071e2:	e156      	b.n	8007492 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	785b      	ldrb	r3, [r3, #1]
 80071e8:	2b03      	cmp	r3, #3
 80071ea:	d008      	beq.n	80071fe <USBD_StdEPReq+0x9a>
 80071ec:	2b03      	cmp	r3, #3
 80071ee:	f300 8145 	bgt.w	800747c <USBD_StdEPReq+0x318>
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 809b 	beq.w	800732e <USBD_StdEPReq+0x1ca>
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d03c      	beq.n	8007276 <USBD_StdEPReq+0x112>
 80071fc:	e13e      	b.n	800747c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b02      	cmp	r3, #2
 8007208:	d002      	beq.n	8007210 <USBD_StdEPReq+0xac>
 800720a:	2b03      	cmp	r3, #3
 800720c:	d016      	beq.n	800723c <USBD_StdEPReq+0xd8>
 800720e:	e02c      	b.n	800726a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00d      	beq.n	8007232 <USBD_StdEPReq+0xce>
 8007216:	7bbb      	ldrb	r3, [r7, #14]
 8007218:	2b80      	cmp	r3, #128	; 0x80
 800721a:	d00a      	beq.n	8007232 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800721c:	7bbb      	ldrb	r3, [r7, #14]
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f001 fa43 	bl	80086ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007226:	2180      	movs	r1, #128	; 0x80
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f001 fa3f 	bl	80086ac <USBD_LL_StallEP>
 800722e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007230:	e020      	b.n	8007274 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fca4 	bl	8007b82 <USBD_CtlError>
              break;
 800723a:	e01b      	b.n	8007274 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	885b      	ldrh	r3, [r3, #2]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10e      	bne.n	8007262 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007244:	7bbb      	ldrb	r3, [r7, #14]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00b      	beq.n	8007262 <USBD_StdEPReq+0xfe>
 800724a:	7bbb      	ldrb	r3, [r7, #14]
 800724c:	2b80      	cmp	r3, #128	; 0x80
 800724e:	d008      	beq.n	8007262 <USBD_StdEPReq+0xfe>
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	88db      	ldrh	r3, [r3, #6]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d104      	bne.n	8007262 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007258:	7bbb      	ldrb	r3, [r7, #14]
 800725a:	4619      	mov	r1, r3
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f001 fa25 	bl	80086ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fd3b 	bl	8007cde <USBD_CtlSendStatus>

              break;
 8007268:	e004      	b.n	8007274 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fc88 	bl	8007b82 <USBD_CtlError>
              break;
 8007272:	bf00      	nop
          }
          break;
 8007274:	e107      	b.n	8007486 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b02      	cmp	r3, #2
 8007280:	d002      	beq.n	8007288 <USBD_StdEPReq+0x124>
 8007282:	2b03      	cmp	r3, #3
 8007284:	d016      	beq.n	80072b4 <USBD_StdEPReq+0x150>
 8007286:	e04b      	b.n	8007320 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007288:	7bbb      	ldrb	r3, [r7, #14]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00d      	beq.n	80072aa <USBD_StdEPReq+0x146>
 800728e:	7bbb      	ldrb	r3, [r7, #14]
 8007290:	2b80      	cmp	r3, #128	; 0x80
 8007292:	d00a      	beq.n	80072aa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007294:	7bbb      	ldrb	r3, [r7, #14]
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 fa07 	bl	80086ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800729e:	2180      	movs	r1, #128	; 0x80
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f001 fa03 	bl	80086ac <USBD_LL_StallEP>
 80072a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072a8:	e040      	b.n	800732c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fc68 	bl	8007b82 <USBD_CtlError>
              break;
 80072b2:	e03b      	b.n	800732c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	885b      	ldrh	r3, [r3, #2]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d136      	bne.n	800732a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072bc:	7bbb      	ldrb	r3, [r7, #14]
 80072be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d004      	beq.n	80072d0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80072c6:	7bbb      	ldrb	r3, [r7, #14]
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f001 fa0d 	bl	80086ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fd04 	bl	8007cde <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80072d6:	7bbb      	ldrb	r3, [r7, #14]
 80072d8:	4619      	mov	r1, r3
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7ff fde2 	bl	8006ea4 <USBD_CoreFindEP>
 80072e0:	4603      	mov	r3, r0
 80072e2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072e4:	7b7b      	ldrb	r3, [r7, #13]
 80072e6:	2bff      	cmp	r3, #255	; 0xff
 80072e8:	d01f      	beq.n	800732a <USBD_StdEPReq+0x1c6>
 80072ea:	7b7b      	ldrb	r3, [r7, #13]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d11c      	bne.n	800732a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80072f0:	7b7a      	ldrb	r2, [r7, #13]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80072f8:	7b7a      	ldrb	r2, [r7, #13]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	32ae      	adds	r2, #174	; 0xae
 80072fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d010      	beq.n	800732a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007308:	7b7a      	ldrb	r2, [r7, #13]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	32ae      	adds	r2, #174	; 0xae
 800730e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	4798      	blx	r3
 800731a:	4603      	mov	r3, r0
 800731c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800731e:	e004      	b.n	800732a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fc2d 	bl	8007b82 <USBD_CtlError>
              break;
 8007328:	e000      	b.n	800732c <USBD_StdEPReq+0x1c8>
              break;
 800732a:	bf00      	nop
          }
          break;
 800732c:	e0ab      	b.n	8007486 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b02      	cmp	r3, #2
 8007338:	d002      	beq.n	8007340 <USBD_StdEPReq+0x1dc>
 800733a:	2b03      	cmp	r3, #3
 800733c:	d032      	beq.n	80073a4 <USBD_StdEPReq+0x240>
 800733e:	e097      	b.n	8007470 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007340:	7bbb      	ldrb	r3, [r7, #14]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d007      	beq.n	8007356 <USBD_StdEPReq+0x1f2>
 8007346:	7bbb      	ldrb	r3, [r7, #14]
 8007348:	2b80      	cmp	r3, #128	; 0x80
 800734a:	d004      	beq.n	8007356 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fc17 	bl	8007b82 <USBD_CtlError>
                break;
 8007354:	e091      	b.n	800747a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007356:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800735a:	2b00      	cmp	r3, #0
 800735c:	da0b      	bge.n	8007376 <USBD_StdEPReq+0x212>
 800735e:	7bbb      	ldrb	r3, [r7, #14]
 8007360:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007364:	4613      	mov	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	3310      	adds	r3, #16
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	4413      	add	r3, r2
 8007372:	3304      	adds	r3, #4
 8007374:	e00b      	b.n	800738e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007376:	7bbb      	ldrb	r3, [r7, #14]
 8007378:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800737c:	4613      	mov	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	4413      	add	r3, r2
 800738c:	3304      	adds	r3, #4
 800738e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	2200      	movs	r2, #0
 8007394:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	2202      	movs	r2, #2
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fc61 	bl	8007c64 <USBD_CtlSendData>
              break;
 80073a2:	e06a      	b.n	800747a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80073a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	da11      	bge.n	80073d0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073ac:	7bbb      	ldrb	r3, [r7, #14]
 80073ae:	f003 020f 	and.w	r2, r3, #15
 80073b2:	6879      	ldr	r1, [r7, #4]
 80073b4:	4613      	mov	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	440b      	add	r3, r1
 80073be:	3324      	adds	r3, #36	; 0x24
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d117      	bne.n	80073f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80073c6:	6839      	ldr	r1, [r7, #0]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fbda 	bl	8007b82 <USBD_CtlError>
                  break;
 80073ce:	e054      	b.n	800747a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073d0:	7bbb      	ldrb	r3, [r7, #14]
 80073d2:	f003 020f 	and.w	r2, r3, #15
 80073d6:	6879      	ldr	r1, [r7, #4]
 80073d8:	4613      	mov	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	440b      	add	r3, r1
 80073e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80073e6:	881b      	ldrh	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d104      	bne.n	80073f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80073ec:	6839      	ldr	r1, [r7, #0]
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fbc7 	bl	8007b82 <USBD_CtlError>
                  break;
 80073f4:	e041      	b.n	800747a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	da0b      	bge.n	8007416 <USBD_StdEPReq+0x2b2>
 80073fe:	7bbb      	ldrb	r3, [r7, #14]
 8007400:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007404:	4613      	mov	r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	4413      	add	r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	3310      	adds	r3, #16
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	4413      	add	r3, r2
 8007412:	3304      	adds	r3, #4
 8007414:	e00b      	b.n	800742e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007416:	7bbb      	ldrb	r3, [r7, #14]
 8007418:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800741c:	4613      	mov	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	4413      	add	r3, r2
 800742c:	3304      	adds	r3, #4
 800742e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007430:	7bbb      	ldrb	r3, [r7, #14]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d002      	beq.n	800743c <USBD_StdEPReq+0x2d8>
 8007436:	7bbb      	ldrb	r3, [r7, #14]
 8007438:	2b80      	cmp	r3, #128	; 0x80
 800743a:	d103      	bne.n	8007444 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	2200      	movs	r2, #0
 8007440:	601a      	str	r2, [r3, #0]
 8007442:	e00e      	b.n	8007462 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007444:	7bbb      	ldrb	r3, [r7, #14]
 8007446:	4619      	mov	r1, r3
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f001 f96d 	bl	8008728 <USBD_LL_IsStallEP>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d003      	beq.n	800745c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2201      	movs	r2, #1
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	e002      	b.n	8007462 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	2200      	movs	r2, #0
 8007460:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2202      	movs	r2, #2
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fbfb 	bl	8007c64 <USBD_CtlSendData>
              break;
 800746e:	e004      	b.n	800747a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007470:	6839      	ldr	r1, [r7, #0]
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fb85 	bl	8007b82 <USBD_CtlError>
              break;
 8007478:	bf00      	nop
          }
          break;
 800747a:	e004      	b.n	8007486 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800747c:	6839      	ldr	r1, [r7, #0]
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fb7f 	bl	8007b82 <USBD_CtlError>
          break;
 8007484:	bf00      	nop
      }
      break;
 8007486:	e005      	b.n	8007494 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007488:	6839      	ldr	r1, [r7, #0]
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fb79 	bl	8007b82 <USBD_CtlError>
      break;
 8007490:	e000      	b.n	8007494 <USBD_StdEPReq+0x330>
      break;
 8007492:	bf00      	nop
  }

  return ret;
 8007494:	7bfb      	ldrb	r3, [r7, #15]
}
 8007496:	4618      	mov	r0, r3
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
	...

080074a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074ae:	2300      	movs	r3, #0
 80074b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	885b      	ldrh	r3, [r3, #2]
 80074ba:	0a1b      	lsrs	r3, r3, #8
 80074bc:	b29b      	uxth	r3, r3
 80074be:	3b01      	subs	r3, #1
 80074c0:	2b0e      	cmp	r3, #14
 80074c2:	f200 8152 	bhi.w	800776a <USBD_GetDescriptor+0x2ca>
 80074c6:	a201      	add	r2, pc, #4	; (adr r2, 80074cc <USBD_GetDescriptor+0x2c>)
 80074c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074cc:	0800753d 	.word	0x0800753d
 80074d0:	08007555 	.word	0x08007555
 80074d4:	08007595 	.word	0x08007595
 80074d8:	0800776b 	.word	0x0800776b
 80074dc:	0800776b 	.word	0x0800776b
 80074e0:	0800770b 	.word	0x0800770b
 80074e4:	08007737 	.word	0x08007737
 80074e8:	0800776b 	.word	0x0800776b
 80074ec:	0800776b 	.word	0x0800776b
 80074f0:	0800776b 	.word	0x0800776b
 80074f4:	0800776b 	.word	0x0800776b
 80074f8:	0800776b 	.word	0x0800776b
 80074fc:	0800776b 	.word	0x0800776b
 8007500:	0800776b 	.word	0x0800776b
 8007504:	08007509 	.word	0x08007509
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800750e:	69db      	ldr	r3, [r3, #28]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00b      	beq.n	800752c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	7c12      	ldrb	r2, [r2, #16]
 8007520:	f107 0108 	add.w	r1, r7, #8
 8007524:	4610      	mov	r0, r2
 8007526:	4798      	blx	r3
 8007528:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800752a:	e126      	b.n	800777a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fb27 	bl	8007b82 <USBD_CtlError>
        err++;
 8007534:	7afb      	ldrb	r3, [r7, #11]
 8007536:	3301      	adds	r3, #1
 8007538:	72fb      	strb	r3, [r7, #11]
      break;
 800753a:	e11e      	b.n	800777a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	7c12      	ldrb	r2, [r2, #16]
 8007548:	f107 0108 	add.w	r1, r7, #8
 800754c:	4610      	mov	r0, r2
 800754e:	4798      	blx	r3
 8007550:	60f8      	str	r0, [r7, #12]
      break;
 8007552:	e112      	b.n	800777a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	7c1b      	ldrb	r3, [r3, #16]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10d      	bne.n	8007578 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007564:	f107 0208 	add.w	r2, r7, #8
 8007568:	4610      	mov	r0, r2
 800756a:	4798      	blx	r3
 800756c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3301      	adds	r3, #1
 8007572:	2202      	movs	r2, #2
 8007574:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007576:	e100      	b.n	800777a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800757e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007580:	f107 0208 	add.w	r2, r7, #8
 8007584:	4610      	mov	r0, r2
 8007586:	4798      	blx	r3
 8007588:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	3301      	adds	r3, #1
 800758e:	2202      	movs	r2, #2
 8007590:	701a      	strb	r2, [r3, #0]
      break;
 8007592:	e0f2      	b.n	800777a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	885b      	ldrh	r3, [r3, #2]
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b05      	cmp	r3, #5
 800759c:	f200 80ac 	bhi.w	80076f8 <USBD_GetDescriptor+0x258>
 80075a0:	a201      	add	r2, pc, #4	; (adr r2, 80075a8 <USBD_GetDescriptor+0x108>)
 80075a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a6:	bf00      	nop
 80075a8:	080075c1 	.word	0x080075c1
 80075ac:	080075f5 	.word	0x080075f5
 80075b0:	08007629 	.word	0x08007629
 80075b4:	0800765d 	.word	0x0800765d
 80075b8:	08007691 	.word	0x08007691
 80075bc:	080076c5 	.word	0x080076c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00b      	beq.n	80075e4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	7c12      	ldrb	r2, [r2, #16]
 80075d8:	f107 0108 	add.w	r1, r7, #8
 80075dc:	4610      	mov	r0, r2
 80075de:	4798      	blx	r3
 80075e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075e2:	e091      	b.n	8007708 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 facb 	bl	8007b82 <USBD_CtlError>
            err++;
 80075ec:	7afb      	ldrb	r3, [r7, #11]
 80075ee:	3301      	adds	r3, #1
 80075f0:	72fb      	strb	r3, [r7, #11]
          break;
 80075f2:	e089      	b.n	8007708 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00b      	beq.n	8007618 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	7c12      	ldrb	r2, [r2, #16]
 800760c:	f107 0108 	add.w	r1, r7, #8
 8007610:	4610      	mov	r0, r2
 8007612:	4798      	blx	r3
 8007614:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007616:	e077      	b.n	8007708 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007618:	6839      	ldr	r1, [r7, #0]
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fab1 	bl	8007b82 <USBD_CtlError>
            err++;
 8007620:	7afb      	ldrb	r3, [r7, #11]
 8007622:	3301      	adds	r3, #1
 8007624:	72fb      	strb	r3, [r7, #11]
          break;
 8007626:	e06f      	b.n	8007708 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00b      	beq.n	800764c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	7c12      	ldrb	r2, [r2, #16]
 8007640:	f107 0108 	add.w	r1, r7, #8
 8007644:	4610      	mov	r0, r2
 8007646:	4798      	blx	r3
 8007648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800764a:	e05d      	b.n	8007708 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fa97 	bl	8007b82 <USBD_CtlError>
            err++;
 8007654:	7afb      	ldrb	r3, [r7, #11]
 8007656:	3301      	adds	r3, #1
 8007658:	72fb      	strb	r3, [r7, #11]
          break;
 800765a:	e055      	b.n	8007708 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00b      	beq.n	8007680 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	7c12      	ldrb	r2, [r2, #16]
 8007674:	f107 0108 	add.w	r1, r7, #8
 8007678:	4610      	mov	r0, r2
 800767a:	4798      	blx	r3
 800767c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800767e:	e043      	b.n	8007708 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007680:	6839      	ldr	r1, [r7, #0]
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fa7d 	bl	8007b82 <USBD_CtlError>
            err++;
 8007688:	7afb      	ldrb	r3, [r7, #11]
 800768a:	3301      	adds	r3, #1
 800768c:	72fb      	strb	r3, [r7, #11]
          break;
 800768e:	e03b      	b.n	8007708 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00b      	beq.n	80076b4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	7c12      	ldrb	r2, [r2, #16]
 80076a8:	f107 0108 	add.w	r1, r7, #8
 80076ac:	4610      	mov	r0, r2
 80076ae:	4798      	blx	r3
 80076b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076b2:	e029      	b.n	8007708 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80076b4:	6839      	ldr	r1, [r7, #0]
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fa63 	bl	8007b82 <USBD_CtlError>
            err++;
 80076bc:	7afb      	ldrb	r3, [r7, #11]
 80076be:	3301      	adds	r3, #1
 80076c0:	72fb      	strb	r3, [r7, #11]
          break;
 80076c2:	e021      	b.n	8007708 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ca:	699b      	ldr	r3, [r3, #24]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00b      	beq.n	80076e8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	7c12      	ldrb	r2, [r2, #16]
 80076dc:	f107 0108 	add.w	r1, r7, #8
 80076e0:	4610      	mov	r0, r2
 80076e2:	4798      	blx	r3
 80076e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076e6:	e00f      	b.n	8007708 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fa49 	bl	8007b82 <USBD_CtlError>
            err++;
 80076f0:	7afb      	ldrb	r3, [r7, #11]
 80076f2:	3301      	adds	r3, #1
 80076f4:	72fb      	strb	r3, [r7, #11]
          break;
 80076f6:	e007      	b.n	8007708 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fa41 	bl	8007b82 <USBD_CtlError>
          err++;
 8007700:	7afb      	ldrb	r3, [r7, #11]
 8007702:	3301      	adds	r3, #1
 8007704:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007706:	bf00      	nop
      }
      break;
 8007708:	e037      	b.n	800777a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	7c1b      	ldrb	r3, [r3, #16]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d109      	bne.n	8007726 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800771a:	f107 0208 	add.w	r2, r7, #8
 800771e:	4610      	mov	r0, r2
 8007720:	4798      	blx	r3
 8007722:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007724:	e029      	b.n	800777a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007726:	6839      	ldr	r1, [r7, #0]
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 fa2a 	bl	8007b82 <USBD_CtlError>
        err++;
 800772e:	7afb      	ldrb	r3, [r7, #11]
 8007730:	3301      	adds	r3, #1
 8007732:	72fb      	strb	r3, [r7, #11]
      break;
 8007734:	e021      	b.n	800777a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	7c1b      	ldrb	r3, [r3, #16]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10d      	bne.n	800775a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007746:	f107 0208 	add.w	r2, r7, #8
 800774a:	4610      	mov	r0, r2
 800774c:	4798      	blx	r3
 800774e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	3301      	adds	r3, #1
 8007754:	2207      	movs	r2, #7
 8007756:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007758:	e00f      	b.n	800777a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fa10 	bl	8007b82 <USBD_CtlError>
        err++;
 8007762:	7afb      	ldrb	r3, [r7, #11]
 8007764:	3301      	adds	r3, #1
 8007766:	72fb      	strb	r3, [r7, #11]
      break;
 8007768:	e007      	b.n	800777a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800776a:	6839      	ldr	r1, [r7, #0]
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fa08 	bl	8007b82 <USBD_CtlError>
      err++;
 8007772:	7afb      	ldrb	r3, [r7, #11]
 8007774:	3301      	adds	r3, #1
 8007776:	72fb      	strb	r3, [r7, #11]
      break;
 8007778:	bf00      	nop
  }

  if (err != 0U)
 800777a:	7afb      	ldrb	r3, [r7, #11]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d11e      	bne.n	80077be <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	88db      	ldrh	r3, [r3, #6]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d016      	beq.n	80077b6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007788:	893b      	ldrh	r3, [r7, #8]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00e      	beq.n	80077ac <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	88da      	ldrh	r2, [r3, #6]
 8007792:	893b      	ldrh	r3, [r7, #8]
 8007794:	4293      	cmp	r3, r2
 8007796:	bf28      	it	cs
 8007798:	4613      	movcs	r3, r2
 800779a:	b29b      	uxth	r3, r3
 800779c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800779e:	893b      	ldrh	r3, [r7, #8]
 80077a0:	461a      	mov	r2, r3
 80077a2:	68f9      	ldr	r1, [r7, #12]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fa5d 	bl	8007c64 <USBD_CtlSendData>
 80077aa:	e009      	b.n	80077c0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f9e7 	bl	8007b82 <USBD_CtlError>
 80077b4:	e004      	b.n	80077c0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fa91 	bl	8007cde <USBD_CtlSendStatus>
 80077bc:	e000      	b.n	80077c0 <USBD_GetDescriptor+0x320>
    return;
 80077be:	bf00      	nop
  }
}
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop

080077c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	889b      	ldrh	r3, [r3, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d131      	bne.n	800783e <USBD_SetAddress+0x76>
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	88db      	ldrh	r3, [r3, #6]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d12d      	bne.n	800783e <USBD_SetAddress+0x76>
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	885b      	ldrh	r3, [r3, #2]
 80077e6:	2b7f      	cmp	r3, #127	; 0x7f
 80077e8:	d829      	bhi.n	800783e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	885b      	ldrh	r3, [r3, #2]
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b03      	cmp	r3, #3
 8007800:	d104      	bne.n	800780c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f9bc 	bl	8007b82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800780a:	e01d      	b.n	8007848 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	7bfa      	ldrb	r2, [r7, #15]
 8007810:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007814:	7bfb      	ldrb	r3, [r7, #15]
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 ffb1 	bl	8008780 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fa5d 	bl	8007cde <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007824:	7bfb      	ldrb	r3, [r7, #15]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d004      	beq.n	8007834 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2202      	movs	r2, #2
 800782e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007832:	e009      	b.n	8007848 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800783c:	e004      	b.n	8007848 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f99e 	bl	8007b82 <USBD_CtlError>
  }
}
 8007846:	bf00      	nop
 8007848:	bf00      	nop
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800785a:	2300      	movs	r3, #0
 800785c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	885b      	ldrh	r3, [r3, #2]
 8007862:	b2da      	uxtb	r2, r3
 8007864:	4b4e      	ldr	r3, [pc, #312]	; (80079a0 <USBD_SetConfig+0x150>)
 8007866:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007868:	4b4d      	ldr	r3, [pc, #308]	; (80079a0 <USBD_SetConfig+0x150>)
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d905      	bls.n	800787c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f985 	bl	8007b82 <USBD_CtlError>
    return USBD_FAIL;
 8007878:	2303      	movs	r3, #3
 800787a:	e08c      	b.n	8007996 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b02      	cmp	r3, #2
 8007886:	d002      	beq.n	800788e <USBD_SetConfig+0x3e>
 8007888:	2b03      	cmp	r3, #3
 800788a:	d029      	beq.n	80078e0 <USBD_SetConfig+0x90>
 800788c:	e075      	b.n	800797a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800788e:	4b44      	ldr	r3, [pc, #272]	; (80079a0 <USBD_SetConfig+0x150>)
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d020      	beq.n	80078d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007896:	4b42      	ldr	r3, [pc, #264]	; (80079a0 <USBD_SetConfig+0x150>)
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80078a0:	4b3f      	ldr	r3, [pc, #252]	; (80079a0 <USBD_SetConfig+0x150>)
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	4619      	mov	r1, r3
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7fe ffbd 	bl	8006826 <USBD_SetClassConfig>
 80078ac:	4603      	mov	r3, r0
 80078ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d008      	beq.n	80078c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f962 	bl	8007b82 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2202      	movs	r2, #2
 80078c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078c6:	e065      	b.n	8007994 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fa08 	bl	8007cde <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2203      	movs	r2, #3
 80078d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80078d6:	e05d      	b.n	8007994 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 fa00 	bl	8007cde <USBD_CtlSendStatus>
      break;
 80078de:	e059      	b.n	8007994 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80078e0:	4b2f      	ldr	r3, [pc, #188]	; (80079a0 <USBD_SetConfig+0x150>)
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d112      	bne.n	800790e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2202      	movs	r2, #2
 80078ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80078f0:	4b2b      	ldr	r3, [pc, #172]	; (80079a0 <USBD_SetConfig+0x150>)
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	461a      	mov	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078fa:	4b29      	ldr	r3, [pc, #164]	; (80079a0 <USBD_SetConfig+0x150>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	4619      	mov	r1, r3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7fe ffac 	bl	800685e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f9e9 	bl	8007cde <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800790c:	e042      	b.n	8007994 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800790e:	4b24      	ldr	r3, [pc, #144]	; (80079a0 <USBD_SetConfig+0x150>)
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	461a      	mov	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	429a      	cmp	r2, r3
 800791a:	d02a      	beq.n	8007972 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	b2db      	uxtb	r3, r3
 8007922:	4619      	mov	r1, r3
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7fe ff9a 	bl	800685e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800792a:	4b1d      	ldr	r3, [pc, #116]	; (80079a0 <USBD_SetConfig+0x150>)
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007934:	4b1a      	ldr	r3, [pc, #104]	; (80079a0 <USBD_SetConfig+0x150>)
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	4619      	mov	r1, r3
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7fe ff73 	bl	8006826 <USBD_SetClassConfig>
 8007940:	4603      	mov	r3, r0
 8007942:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007944:	7bfb      	ldrb	r3, [r7, #15]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00f      	beq.n	800796a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f918 	bl	8007b82 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	b2db      	uxtb	r3, r3
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7fe ff7f 	bl	800685e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007968:	e014      	b.n	8007994 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f9b7 	bl	8007cde <USBD_CtlSendStatus>
      break;
 8007970:	e010      	b.n	8007994 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f9b3 	bl	8007cde <USBD_CtlSendStatus>
      break;
 8007978:	e00c      	b.n	8007994 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f900 	bl	8007b82 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007982:	4b07      	ldr	r3, [pc, #28]	; (80079a0 <USBD_SetConfig+0x150>)
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	4619      	mov	r1, r3
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f7fe ff68 	bl	800685e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800798e:	2303      	movs	r3, #3
 8007990:	73fb      	strb	r3, [r7, #15]
      break;
 8007992:	bf00      	nop
  }

  return ret;
 8007994:	7bfb      	ldrb	r3, [r7, #15]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	20000398 	.word	0x20000398

080079a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	88db      	ldrh	r3, [r3, #6]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d004      	beq.n	80079c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80079b6:	6839      	ldr	r1, [r7, #0]
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f8e2 	bl	8007b82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80079be:	e023      	b.n	8007a08 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	dc02      	bgt.n	80079d2 <USBD_GetConfig+0x2e>
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	dc03      	bgt.n	80079d8 <USBD_GetConfig+0x34>
 80079d0:	e015      	b.n	80079fe <USBD_GetConfig+0x5a>
 80079d2:	2b03      	cmp	r3, #3
 80079d4:	d00b      	beq.n	80079ee <USBD_GetConfig+0x4a>
 80079d6:	e012      	b.n	80079fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	3308      	adds	r3, #8
 80079e2:	2201      	movs	r2, #1
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f93c 	bl	8007c64 <USBD_CtlSendData>
        break;
 80079ec:	e00c      	b.n	8007a08 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	3304      	adds	r3, #4
 80079f2:	2201      	movs	r2, #1
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f934 	bl	8007c64 <USBD_CtlSendData>
        break;
 80079fc:	e004      	b.n	8007a08 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f8be 	bl	8007b82 <USBD_CtlError>
        break;
 8007a06:	bf00      	nop
}
 8007a08:	bf00      	nop
 8007a0a:	3708      	adds	r7, #8
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	3b01      	subs	r3, #1
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d81e      	bhi.n	8007a66 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	88db      	ldrh	r3, [r3, #6]
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d004      	beq.n	8007a3a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f8a5 	bl	8007b82 <USBD_CtlError>
        break;
 8007a38:	e01a      	b.n	8007a70 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d005      	beq.n	8007a56 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	f043 0202 	orr.w	r2, r3, #2
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	330c      	adds	r3, #12
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f900 	bl	8007c64 <USBD_CtlSendData>
      break;
 8007a64:	e004      	b.n	8007a70 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007a66:	6839      	ldr	r1, [r7, #0]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 f88a 	bl	8007b82 <USBD_CtlError>
      break;
 8007a6e:	bf00      	nop
  }
}
 8007a70:	bf00      	nop
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	885b      	ldrh	r3, [r3, #2]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d107      	bne.n	8007a9a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f923 	bl	8007cde <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007a98:	e013      	b.n	8007ac2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	885b      	ldrh	r3, [r3, #2]
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d10b      	bne.n	8007aba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	889b      	ldrh	r3, [r3, #4]
 8007aa6:	0a1b      	lsrs	r3, r3, #8
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f913 	bl	8007cde <USBD_CtlSendStatus>
}
 8007ab8:	e003      	b.n	8007ac2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f860 	bl	8007b82 <USBD_CtlError>
}
 8007ac2:	bf00      	nop
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b082      	sub	sp, #8
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	3b01      	subs	r3, #1
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d80b      	bhi.n	8007afa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	885b      	ldrh	r3, [r3, #2]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d10c      	bne.n	8007b04 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f8f3 	bl	8007cde <USBD_CtlSendStatus>
      }
      break;
 8007af8:	e004      	b.n	8007b04 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f840 	bl	8007b82 <USBD_CtlError>
      break;
 8007b02:	e000      	b.n	8007b06 <USBD_ClrFeature+0x3c>
      break;
 8007b04:	bf00      	nop
  }
}
 8007b06:	bf00      	nop
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b084      	sub	sp, #16
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	781a      	ldrb	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	3301      	adds	r3, #1
 8007b28:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	781a      	ldrb	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	3301      	adds	r3, #1
 8007b36:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f7ff fa17 	bl	8006f6c <SWAPBYTE>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	461a      	mov	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f7ff fa0a 	bl	8006f6c <SWAPBYTE>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	3301      	adds	r3, #1
 8007b64:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f7ff f9fd 	bl	8006f6c <SWAPBYTE>
 8007b72:	4603      	mov	r3, r0
 8007b74:	461a      	mov	r2, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	80da      	strh	r2, [r3, #6]
}
 8007b7a:	bf00      	nop
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b082      	sub	sp, #8
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b8c:	2180      	movs	r1, #128	; 0x80
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 fd8c 	bl	80086ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b94:	2100      	movs	r1, #0
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fd88 	bl	80086ac <USBD_LL_StallEP>
}
 8007b9c:	bf00      	nop
 8007b9e:	3708      	adds	r7, #8
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b086      	sub	sp, #24
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d036      	beq.n	8007c28 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007bbe:	6938      	ldr	r0, [r7, #16]
 8007bc0:	f000 f836 	bl	8007c30 <USBD_GetLen>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	005b      	lsls	r3, r3, #1
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007bd2:	7dfb      	ldrb	r3, [r7, #23]
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	7812      	ldrb	r2, [r2, #0]
 8007bdc:	701a      	strb	r2, [r3, #0]
  idx++;
 8007bde:	7dfb      	ldrb	r3, [r7, #23]
 8007be0:	3301      	adds	r3, #1
 8007be2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007be4:	7dfb      	ldrb	r3, [r7, #23]
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	4413      	add	r3, r2
 8007bea:	2203      	movs	r2, #3
 8007bec:	701a      	strb	r2, [r3, #0]
  idx++;
 8007bee:	7dfb      	ldrb	r3, [r7, #23]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007bf4:	e013      	b.n	8007c1e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007bf6:	7dfb      	ldrb	r3, [r7, #23]
 8007bf8:	68ba      	ldr	r2, [r7, #8]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	7812      	ldrb	r2, [r2, #0]
 8007c00:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	3301      	adds	r3, #1
 8007c06:	613b      	str	r3, [r7, #16]
    idx++;
 8007c08:	7dfb      	ldrb	r3, [r7, #23]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007c0e:	7dfb      	ldrb	r3, [r7, #23]
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	4413      	add	r3, r2
 8007c14:	2200      	movs	r2, #0
 8007c16:	701a      	strb	r2, [r3, #0]
    idx++;
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1e7      	bne.n	8007bf6 <USBD_GetString+0x52>
 8007c26:	e000      	b.n	8007c2a <USBD_GetString+0x86>
    return;
 8007c28:	bf00      	nop
  }
}
 8007c2a:	3718      	adds	r7, #24
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007c40:	e005      	b.n	8007c4e <USBD_GetLen+0x1e>
  {
    len++;
 8007c42:	7bfb      	ldrb	r3, [r7, #15]
 8007c44:	3301      	adds	r3, #1
 8007c46:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1f5      	bne.n	8007c42 <USBD_GetLen+0x12>
  }

  return len;
 8007c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3714      	adds	r7, #20
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2202      	movs	r2, #2
 8007c74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	2100      	movs	r1, #0
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f000 fd97 	bl	80087be <USBD_LL_Transmit>

  return USBD_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b084      	sub	sp, #16
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	60f8      	str	r0, [r7, #12]
 8007ca2:	60b9      	str	r1, [r7, #8]
 8007ca4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	2100      	movs	r1, #0
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f000 fd86 	bl	80087be <USBD_LL_Transmit>

  return USBD_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	2100      	movs	r1, #0
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f000 fd96 	bl	8008800 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b082      	sub	sp, #8
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2204      	movs	r2, #4
 8007cea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007cee:	2300      	movs	r3, #0
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 fd62 	bl	80087be <USBD_LL_Transmit>

  return USBD_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2205      	movs	r2, #5
 8007d10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d14:	2300      	movs	r3, #0
 8007d16:	2200      	movs	r2, #0
 8007d18:	2100      	movs	r1, #0
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fd70 	bl	8008800 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
	...

08007d2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8007d30:	2201      	movs	r2, #1
 8007d32:	491b      	ldr	r1, [pc, #108]	; (8007da0 <MX_USB_DEVICE_Init+0x74>)
 8007d34:	481b      	ldr	r0, [pc, #108]	; (8007da4 <MX_USB_DEVICE_Init+0x78>)
 8007d36:	f7fe fcf9 	bl	800672c <USBD_Init>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d40:	f7f9 fa0e 	bl	8001160 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 8007d44:	4918      	ldr	r1, [pc, #96]	; (8007da8 <MX_USB_DEVICE_Init+0x7c>)
 8007d46:	4817      	ldr	r0, [pc, #92]	; (8007da4 <MX_USB_DEVICE_Init+0x78>)
 8007d48:	f7fe fd20 	bl	800678c <USBD_RegisterClass>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d001      	beq.n	8007d56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d52:	f7f9 fa05 	bl	8001160 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8007d56:	4813      	ldr	r0, [pc, #76]	; (8007da4 <MX_USB_DEVICE_Init+0x78>)
 8007d58:	f7fe fd4e 	bl	80067f8 <USBD_Start>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d001      	beq.n	8007d66 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007d62:	f7f9 f9fd 	bl	8001160 <Error_Handler>
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d66:	2200      	movs	r2, #0
 8007d68:	4910      	ldr	r1, [pc, #64]	; (8007dac <MX_USB_DEVICE_Init+0x80>)
 8007d6a:	4811      	ldr	r0, [pc, #68]	; (8007db0 <MX_USB_DEVICE_Init+0x84>)
 8007d6c:	f7fe fcde 	bl	800672c <USBD_Init>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <MX_USB_DEVICE_Init+0x4e>
  {
    Error_Handler();
 8007d76:	f7f9 f9f3 	bl	8001160 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007d7a:	490b      	ldr	r1, [pc, #44]	; (8007da8 <MX_USB_DEVICE_Init+0x7c>)
 8007d7c:	480c      	ldr	r0, [pc, #48]	; (8007db0 <MX_USB_DEVICE_Init+0x84>)
 8007d7e:	f7fe fd05 	bl	800678c <USBD_RegisterClass>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d001      	beq.n	8007d8c <MX_USB_DEVICE_Init+0x60>
  {
    Error_Handler();
 8007d88:	f7f9 f9ea 	bl	8001160 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d8c:	4808      	ldr	r0, [pc, #32]	; (8007db0 <MX_USB_DEVICE_Init+0x84>)
 8007d8e:	f7fe fd33 	bl	80067f8 <USBD_Start>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d001      	beq.n	8007d9c <MX_USB_DEVICE_Init+0x70>
  {
    Error_Handler();
 8007d98:	f7f9 f9e2 	bl	8001160 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d9c:	bf00      	nop
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	20000100 	.word	0x20000100
 8007da4:	2000039c 	.word	0x2000039c
 8007da8:	2000000c 	.word	0x2000000c
 8007dac:	200000c0 	.word	0x200000c0
 8007db0:	20000678 	.word	0x20000678

08007db4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	4603      	mov	r3, r0
 8007dbc:	6039      	str	r1, [r7, #0]
 8007dbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	2212      	movs	r2, #18
 8007dc4:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8007dc6:	4b03      	ldr	r3, [pc, #12]	; (8007dd4 <USBD_HS_DeviceDescriptor+0x20>)
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr
 8007dd4:	20000120 	.word	0x20000120

08007dd8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	4603      	mov	r3, r0
 8007de0:	6039      	str	r1, [r7, #0]
 8007de2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	2204      	movs	r2, #4
 8007de8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007dea:	4b03      	ldr	r3, [pc, #12]	; (8007df8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr
 8007df8:	20000140 	.word	0x20000140

08007dfc <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	4603      	mov	r3, r0
 8007e04:	6039      	str	r1, [r7, #0]
 8007e06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e08:	79fb      	ldrb	r3, [r7, #7]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d105      	bne.n	8007e1a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	4907      	ldr	r1, [pc, #28]	; (8007e30 <USBD_HS_ProductStrDescriptor+0x34>)
 8007e12:	4808      	ldr	r0, [pc, #32]	; (8007e34 <USBD_HS_ProductStrDescriptor+0x38>)
 8007e14:	f7ff fec6 	bl	8007ba4 <USBD_GetString>
 8007e18:	e004      	b.n	8007e24 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	4904      	ldr	r1, [pc, #16]	; (8007e30 <USBD_HS_ProductStrDescriptor+0x34>)
 8007e1e:	4805      	ldr	r0, [pc, #20]	; (8007e34 <USBD_HS_ProductStrDescriptor+0x38>)
 8007e20:	f7ff fec0 	bl	8007ba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e24:	4b02      	ldr	r3, [pc, #8]	; (8007e30 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	20000954 	.word	0x20000954
 8007e34:	0800b454 	.word	0x0800b454

08007e38 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	4603      	mov	r3, r0
 8007e40:	6039      	str	r1, [r7, #0]
 8007e42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007e44:	683a      	ldr	r2, [r7, #0]
 8007e46:	4904      	ldr	r1, [pc, #16]	; (8007e58 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8007e48:	4804      	ldr	r0, [pc, #16]	; (8007e5c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8007e4a:	f7ff feab 	bl	8007ba4 <USBD_GetString>
  return USBD_StrDesc;
 8007e4e:	4b02      	ldr	r3, [pc, #8]	; (8007e58 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	20000954 	.word	0x20000954
 8007e5c:	0800b46c 	.word	0x0800b46c

08007e60 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	4603      	mov	r3, r0
 8007e68:	6039      	str	r1, [r7, #0]
 8007e6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	221a      	movs	r2, #26
 8007e70:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007e72:	f000 f90b 	bl	800808c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8007e76:	4b02      	ldr	r3, [pc, #8]	; (8007e80 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	20000144 	.word	0x20000144

08007e84 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	6039      	str	r1, [r7, #0]
 8007e8e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007e90:	79fb      	ldrb	r3, [r7, #7]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d105      	bne.n	8007ea2 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8007e96:	683a      	ldr	r2, [r7, #0]
 8007e98:	4907      	ldr	r1, [pc, #28]	; (8007eb8 <USBD_HS_ConfigStrDescriptor+0x34>)
 8007e9a:	4808      	ldr	r0, [pc, #32]	; (8007ebc <USBD_HS_ConfigStrDescriptor+0x38>)
 8007e9c:	f7ff fe82 	bl	8007ba4 <USBD_GetString>
 8007ea0:	e004      	b.n	8007eac <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8007ea2:	683a      	ldr	r2, [r7, #0]
 8007ea4:	4904      	ldr	r1, [pc, #16]	; (8007eb8 <USBD_HS_ConfigStrDescriptor+0x34>)
 8007ea6:	4805      	ldr	r0, [pc, #20]	; (8007ebc <USBD_HS_ConfigStrDescriptor+0x38>)
 8007ea8:	f7ff fe7c 	bl	8007ba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007eac:	4b02      	ldr	r3, [pc, #8]	; (8007eb8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20000954 	.word	0x20000954
 8007ebc:	0800b480 	.word	0x0800b480

08007ec0 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	6039      	str	r1, [r7, #0]
 8007eca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ecc:	79fb      	ldrb	r3, [r7, #7]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d105      	bne.n	8007ede <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	4907      	ldr	r1, [pc, #28]	; (8007ef4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8007ed6:	4808      	ldr	r0, [pc, #32]	; (8007ef8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8007ed8:	f7ff fe64 	bl	8007ba4 <USBD_GetString>
 8007edc:	e004      	b.n	8007ee8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	4904      	ldr	r1, [pc, #16]	; (8007ef4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8007ee2:	4805      	ldr	r0, [pc, #20]	; (8007ef8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8007ee4:	f7ff fe5e 	bl	8007ba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ee8:	4b02      	ldr	r3, [pc, #8]	; (8007ef4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20000954 	.word	0x20000954
 8007ef8:	0800b48c 	.word	0x0800b48c

08007efc <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	4603      	mov	r3, r0
 8007f04:	6039      	str	r1, [r7, #0]
 8007f06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	220c      	movs	r2, #12
 8007f0c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 8007f0e:	4b03      	ldr	r3, [pc, #12]	; (8007f1c <USBD_HS_USR_BOSDescriptor+0x20>)
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr
 8007f1c:	20000134 	.word	0x20000134

08007f20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	4603      	mov	r3, r0
 8007f28:	6039      	str	r1, [r7, #0]
 8007f2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	2212      	movs	r2, #18
 8007f30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007f32:	4b03      	ldr	r3, [pc, #12]	; (8007f40 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr
 8007f40:	200000e0 	.word	0x200000e0

08007f44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	6039      	str	r1, [r7, #0]
 8007f4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	2204      	movs	r2, #4
 8007f54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007f56:	4b03      	ldr	r3, [pc, #12]	; (8007f64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr
 8007f64:	20000140 	.word	0x20000140

08007f68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	4603      	mov	r3, r0
 8007f70:	6039      	str	r1, [r7, #0]
 8007f72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f74:	79fb      	ldrb	r3, [r7, #7]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d105      	bne.n	8007f86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f7a:	683a      	ldr	r2, [r7, #0]
 8007f7c:	4907      	ldr	r1, [pc, #28]	; (8007f9c <USBD_FS_ProductStrDescriptor+0x34>)
 8007f7e:	4808      	ldr	r0, [pc, #32]	; (8007fa0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f80:	f7ff fe10 	bl	8007ba4 <USBD_GetString>
 8007f84:	e004      	b.n	8007f90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f86:	683a      	ldr	r2, [r7, #0]
 8007f88:	4904      	ldr	r1, [pc, #16]	; (8007f9c <USBD_FS_ProductStrDescriptor+0x34>)
 8007f8a:	4805      	ldr	r0, [pc, #20]	; (8007fa0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f8c:	f7ff fe0a 	bl	8007ba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f90:	4b02      	ldr	r3, [pc, #8]	; (8007f9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	20000954 	.word	0x20000954
 8007fa0:	0800b454 	.word	0x0800b454

08007fa4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	4603      	mov	r3, r0
 8007fac:	6039      	str	r1, [r7, #0]
 8007fae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007fb0:	683a      	ldr	r2, [r7, #0]
 8007fb2:	4904      	ldr	r1, [pc, #16]	; (8007fc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007fb4:	4804      	ldr	r0, [pc, #16]	; (8007fc8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007fb6:	f7ff fdf5 	bl	8007ba4 <USBD_GetString>
  return USBD_StrDesc;
 8007fba:	4b02      	ldr	r3, [pc, #8]	; (8007fc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3708      	adds	r7, #8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	20000954 	.word	0x20000954
 8007fc8:	0800b46c 	.word	0x0800b46c

08007fcc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	6039      	str	r1, [r7, #0]
 8007fd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	221a      	movs	r2, #26
 8007fdc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007fde:	f000 f855 	bl	800808c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007fe2:	4b02      	ldr	r3, [pc, #8]	; (8007fec <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	20000144 	.word	0x20000144

08007ff0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	6039      	str	r1, [r7, #0]
 8007ffa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ffc:	79fb      	ldrb	r3, [r7, #7]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d105      	bne.n	800800e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008002:	683a      	ldr	r2, [r7, #0]
 8008004:	4907      	ldr	r1, [pc, #28]	; (8008024 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008006:	4808      	ldr	r0, [pc, #32]	; (8008028 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008008:	f7ff fdcc 	bl	8007ba4 <USBD_GetString>
 800800c:	e004      	b.n	8008018 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	4904      	ldr	r1, [pc, #16]	; (8008024 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008012:	4805      	ldr	r0, [pc, #20]	; (8008028 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008014:	f7ff fdc6 	bl	8007ba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008018:	4b02      	ldr	r3, [pc, #8]	; (8008024 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800801a:	4618      	mov	r0, r3
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	20000954 	.word	0x20000954
 8008028:	0800b480 	.word	0x0800b480

0800802c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	4603      	mov	r3, r0
 8008034:	6039      	str	r1, [r7, #0]
 8008036:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008038:	79fb      	ldrb	r3, [r7, #7]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d105      	bne.n	800804a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	4907      	ldr	r1, [pc, #28]	; (8008060 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008042:	4808      	ldr	r0, [pc, #32]	; (8008064 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008044:	f7ff fdae 	bl	8007ba4 <USBD_GetString>
 8008048:	e004      	b.n	8008054 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	4904      	ldr	r1, [pc, #16]	; (8008060 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800804e:	4805      	ldr	r0, [pc, #20]	; (8008064 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008050:	f7ff fda8 	bl	8007ba4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008054:	4b02      	ldr	r3, [pc, #8]	; (8008060 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008056:	4618      	mov	r0, r3
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	20000954 	.word	0x20000954
 8008064:	0800b48c 	.word	0x0800b48c

08008068 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	4603      	mov	r3, r0
 8008070:	6039      	str	r1, [r7, #0]
 8008072:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	220c      	movs	r2, #12
 8008078:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800807a:	4b03      	ldr	r3, [pc, #12]	; (8008088 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800807c:	4618      	mov	r0, r3
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	200000f4 	.word	0x200000f4

0800808c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008092:	4b0f      	ldr	r3, [pc, #60]	; (80080d0 <Get_SerialNum+0x44>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008098:	4b0e      	ldr	r3, [pc, #56]	; (80080d4 <Get_SerialNum+0x48>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800809e:	4b0e      	ldr	r3, [pc, #56]	; (80080d8 <Get_SerialNum+0x4c>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4413      	add	r3, r2
 80080aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d009      	beq.n	80080c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80080b2:	2208      	movs	r2, #8
 80080b4:	4909      	ldr	r1, [pc, #36]	; (80080dc <Get_SerialNum+0x50>)
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f000 f814 	bl	80080e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80080bc:	2204      	movs	r2, #4
 80080be:	4908      	ldr	r1, [pc, #32]	; (80080e0 <Get_SerialNum+0x54>)
 80080c0:	68b8      	ldr	r0, [r7, #8]
 80080c2:	f000 f80f 	bl	80080e4 <IntToUnicode>
  }
}
 80080c6:	bf00      	nop
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	1fff7a10 	.word	0x1fff7a10
 80080d4:	1fff7a14 	.word	0x1fff7a14
 80080d8:	1fff7a18 	.word	0x1fff7a18
 80080dc:	20000146 	.word	0x20000146
 80080e0:	20000156 	.word	0x20000156

080080e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b087      	sub	sp, #28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	4613      	mov	r3, r2
 80080f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80080f2:	2300      	movs	r3, #0
 80080f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80080f6:	2300      	movs	r3, #0
 80080f8:	75fb      	strb	r3, [r7, #23]
 80080fa:	e027      	b.n	800814c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	0f1b      	lsrs	r3, r3, #28
 8008100:	2b09      	cmp	r3, #9
 8008102:	d80b      	bhi.n	800811c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	0f1b      	lsrs	r3, r3, #28
 8008108:	b2da      	uxtb	r2, r3
 800810a:	7dfb      	ldrb	r3, [r7, #23]
 800810c:	005b      	lsls	r3, r3, #1
 800810e:	4619      	mov	r1, r3
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	440b      	add	r3, r1
 8008114:	3230      	adds	r2, #48	; 0x30
 8008116:	b2d2      	uxtb	r2, r2
 8008118:	701a      	strb	r2, [r3, #0]
 800811a:	e00a      	b.n	8008132 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	0f1b      	lsrs	r3, r3, #28
 8008120:	b2da      	uxtb	r2, r3
 8008122:	7dfb      	ldrb	r3, [r7, #23]
 8008124:	005b      	lsls	r3, r3, #1
 8008126:	4619      	mov	r1, r3
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	440b      	add	r3, r1
 800812c:	3237      	adds	r2, #55	; 0x37
 800812e:	b2d2      	uxtb	r2, r2
 8008130:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	011b      	lsls	r3, r3, #4
 8008136:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008138:	7dfb      	ldrb	r3, [r7, #23]
 800813a:	005b      	lsls	r3, r3, #1
 800813c:	3301      	adds	r3, #1
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	4413      	add	r3, r2
 8008142:	2200      	movs	r2, #0
 8008144:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008146:	7dfb      	ldrb	r3, [r7, #23]
 8008148:	3301      	adds	r3, #1
 800814a:	75fb      	strb	r3, [r7, #23]
 800814c:	7dfa      	ldrb	r2, [r7, #23]
 800814e:	79fb      	ldrb	r3, [r7, #7]
 8008150:	429a      	cmp	r2, r3
 8008152:	d3d3      	bcc.n	80080fc <IntToUnicode+0x18>
  }
}
 8008154:	bf00      	nop
 8008156:	bf00      	nop
 8008158:	371c      	adds	r7, #28
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
	...

08008164 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b0a2      	sub	sp, #136	; 0x88
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800816c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008170:	2200      	movs	r2, #0
 8008172:	601a      	str	r2, [r3, #0]
 8008174:	605a      	str	r2, [r3, #4]
 8008176:	609a      	str	r2, [r3, #8]
 8008178:	60da      	str	r2, [r3, #12]
 800817a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800817c:	f107 0318 	add.w	r3, r7, #24
 8008180:	225c      	movs	r2, #92	; 0x5c
 8008182:	2100      	movs	r1, #0
 8008184:	4618      	mov	r0, r3
 8008186:	f000 fc19 	bl	80089bc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008192:	d14c      	bne.n	800822e <HAL_PCD_MspInit+0xca>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8008194:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008198:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800819a:	2300      	movs	r3, #0
 800819c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800819e:	f107 0318 	add.w	r3, r7, #24
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7fb f896 	bl	80032d4 <HAL_RCCEx_PeriphCLKConfig>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80081ae:	f7f8 ffd7 	bl	8001160 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081b2:	2300      	movs	r3, #0
 80081b4:	617b      	str	r3, [r7, #20]
 80081b6:	4b45      	ldr	r3, [pc, #276]	; (80082cc <HAL_PCD_MspInit+0x168>)
 80081b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ba:	4a44      	ldr	r2, [pc, #272]	; (80082cc <HAL_PCD_MspInit+0x168>)
 80081bc:	f043 0301 	orr.w	r3, r3, #1
 80081c0:	6313      	str	r3, [r2, #48]	; 0x30
 80081c2:	4b42      	ldr	r3, [pc, #264]	; (80082cc <HAL_PCD_MspInit+0x168>)
 80081c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c6:	f003 0301 	and.w	r3, r3, #1
 80081ca:	617b      	str	r3, [r7, #20]
 80081cc:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80081ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80081d2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081d4:	2302      	movs	r3, #2
 80081d6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081d8:	2300      	movs	r3, #0
 80081da:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081dc:	2303      	movs	r3, #3
 80081de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80081e2:	230a      	movs	r3, #10
 80081e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80081ec:	4619      	mov	r1, r3
 80081ee:	4838      	ldr	r0, [pc, #224]	; (80082d0 <HAL_PCD_MspInit+0x16c>)
 80081f0:	f7f9 faf8 	bl	80017e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80081f4:	4b35      	ldr	r3, [pc, #212]	; (80082cc <HAL_PCD_MspInit+0x168>)
 80081f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081f8:	4a34      	ldr	r2, [pc, #208]	; (80082cc <HAL_PCD_MspInit+0x168>)
 80081fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081fe:	6353      	str	r3, [r2, #52]	; 0x34
 8008200:	2300      	movs	r3, #0
 8008202:	613b      	str	r3, [r7, #16]
 8008204:	4b31      	ldr	r3, [pc, #196]	; (80082cc <HAL_PCD_MspInit+0x168>)
 8008206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008208:	4a30      	ldr	r2, [pc, #192]	; (80082cc <HAL_PCD_MspInit+0x168>)
 800820a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800820e:	6453      	str	r3, [r2, #68]	; 0x44
 8008210:	4b2e      	ldr	r3, [pc, #184]	; (80082cc <HAL_PCD_MspInit+0x168>)
 8008212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008218:	613b      	str	r3, [r7, #16]
 800821a:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800821c:	2200      	movs	r2, #0
 800821e:	2100      	movs	r1, #0
 8008220:	2043      	movs	r0, #67	; 0x43
 8008222:	f7f9 faa8 	bl	8001776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008226:	2043      	movs	r0, #67	; 0x43
 8008228:	f7f9 fac1 	bl	80017ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800822c:	e04a      	b.n	80082c4 <HAL_PCD_MspInit+0x160>
  else if(pcdHandle->Instance==USB_OTG_HS)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a28      	ldr	r2, [pc, #160]	; (80082d4 <HAL_PCD_MspInit+0x170>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d145      	bne.n	80082c4 <HAL_PCD_MspInit+0x160>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8008238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800823c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800823e:	2300      	movs	r3, #0
 8008240:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008242:	f107 0318 	add.w	r3, r7, #24
 8008246:	4618      	mov	r0, r3
 8008248:	f7fb f844 	bl	80032d4 <HAL_RCCEx_PeriphCLKConfig>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d001      	beq.n	8008256 <HAL_PCD_MspInit+0xf2>
      Error_Handler();
 8008252:	f7f8 ff85 	bl	8001160 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008256:	2300      	movs	r3, #0
 8008258:	60fb      	str	r3, [r7, #12]
 800825a:	4b1c      	ldr	r3, [pc, #112]	; (80082cc <HAL_PCD_MspInit+0x168>)
 800825c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800825e:	4a1b      	ldr	r2, [pc, #108]	; (80082cc <HAL_PCD_MspInit+0x168>)
 8008260:	f043 0302 	orr.w	r3, r3, #2
 8008264:	6313      	str	r3, [r2, #48]	; 0x30
 8008266:	4b19      	ldr	r3, [pc, #100]	; (80082cc <HAL_PCD_MspInit+0x168>)
 8008268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826a:	f003 0302 	and.w	r3, r3, #2
 800826e:	60fb      	str	r3, [r7, #12]
 8008270:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8008272:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8008276:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008278:	2302      	movs	r3, #2
 800827a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800827c:	2300      	movs	r3, #0
 800827e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008280:	2303      	movs	r3, #3
 8008282:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8008286:	230c      	movs	r3, #12
 8008288:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800828c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008290:	4619      	mov	r1, r3
 8008292:	4811      	ldr	r0, [pc, #68]	; (80082d8 <HAL_PCD_MspInit+0x174>)
 8008294:	f7f9 faa6 	bl	80017e4 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8008298:	2300      	movs	r3, #0
 800829a:	60bb      	str	r3, [r7, #8]
 800829c:	4b0b      	ldr	r3, [pc, #44]	; (80082cc <HAL_PCD_MspInit+0x168>)
 800829e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a0:	4a0a      	ldr	r2, [pc, #40]	; (80082cc <HAL_PCD_MspInit+0x168>)
 80082a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082a6:	6313      	str	r3, [r2, #48]	; 0x30
 80082a8:	4b08      	ldr	r3, [pc, #32]	; (80082cc <HAL_PCD_MspInit+0x168>)
 80082aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082b0:	60bb      	str	r3, [r7, #8]
 80082b2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80082b4:	2200      	movs	r2, #0
 80082b6:	2100      	movs	r1, #0
 80082b8:	204d      	movs	r0, #77	; 0x4d
 80082ba:	f7f9 fa5c 	bl	8001776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80082be:	204d      	movs	r0, #77	; 0x4d
 80082c0:	f7f9 fa75 	bl	80017ae <HAL_NVIC_EnableIRQ>
}
 80082c4:	bf00      	nop
 80082c6:	3788      	adds	r7, #136	; 0x88
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	40023800 	.word	0x40023800
 80082d0:	40020000 	.word	0x40020000
 80082d4:	40040000 	.word	0x40040000
 80082d8:	40020400 	.word	0x40020400

080082dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80082f0:	4619      	mov	r1, r3
 80082f2:	4610      	mov	r0, r2
 80082f4:	f7fe facd 	bl	8006892 <USBD_LL_SetupStage>
}
 80082f8:	bf00      	nop
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	460b      	mov	r3, r1
 800830a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008312:	78fa      	ldrb	r2, [r7, #3]
 8008314:	6879      	ldr	r1, [r7, #4]
 8008316:	4613      	mov	r3, r2
 8008318:	00db      	lsls	r3, r3, #3
 800831a:	4413      	add	r3, r2
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	440b      	add	r3, r1
 8008320:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	78fb      	ldrb	r3, [r7, #3]
 8008328:	4619      	mov	r1, r3
 800832a:	f7fe fb07 	bl	800693c <USBD_LL_DataOutStage>
}
 800832e:	bf00      	nop
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b082      	sub	sp, #8
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	460b      	mov	r3, r1
 8008340:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008348:	78fa      	ldrb	r2, [r7, #3]
 800834a:	6879      	ldr	r1, [r7, #4]
 800834c:	4613      	mov	r3, r2
 800834e:	00db      	lsls	r3, r3, #3
 8008350:	4413      	add	r3, r2
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	440b      	add	r3, r1
 8008356:	334c      	adds	r3, #76	; 0x4c
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	78fb      	ldrb	r3, [r7, #3]
 800835c:	4619      	mov	r1, r3
 800835e:	f7fe fba0 	bl	8006aa2 <USBD_LL_DataInStage>
}
 8008362:	bf00      	nop
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b082      	sub	sp, #8
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008378:	4618      	mov	r0, r3
 800837a:	f7fe fcd4 	bl	8006d26 <USBD_LL_SOF>
}
 800837e:	bf00      	nop
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b084      	sub	sp, #16
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800838e:	2301      	movs	r3, #1
 8008390:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d102      	bne.n	80083a0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800839a:	2300      	movs	r3, #0
 800839c:	73fb      	strb	r3, [r7, #15]
 800839e:	e008      	b.n	80083b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d102      	bne.n	80083ae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80083a8:	2301      	movs	r3, #1
 80083aa:	73fb      	strb	r3, [r7, #15]
 80083ac:	e001      	b.n	80083b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80083ae:	f7f8 fed7 	bl	8001160 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083b8:	7bfa      	ldrb	r2, [r7, #15]
 80083ba:	4611      	mov	r1, r2
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fe fc74 	bl	8006caa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7fe fc1c 	bl	8006c06 <USBD_LL_Reset>
}
 80083ce:	bf00      	nop
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
	...

080083d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fe fc6f 	bl	8006cca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	6812      	ldr	r2, [r2, #0]
 80083fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80083fe:	f043 0301 	orr.w	r3, r3, #1
 8008402:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6a1b      	ldr	r3, [r3, #32]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d005      	beq.n	8008418 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800840c:	4b04      	ldr	r3, [pc, #16]	; (8008420 <HAL_PCD_SuspendCallback+0x48>)
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	4a03      	ldr	r2, [pc, #12]	; (8008420 <HAL_PCD_SuspendCallback+0x48>)
 8008412:	f043 0306 	orr.w	r3, r3, #6
 8008416:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008418:	bf00      	nop
 800841a:	3708      	adds	r7, #8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	e000ed00 	.word	0xe000ed00

08008424 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008432:	4618      	mov	r0, r3
 8008434:	f7fe fc5f 	bl	8006cf6 <USBD_LL_Resume>
}
 8008438:	bf00      	nop
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	460b      	mov	r3, r1
 800844a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008452:	78fa      	ldrb	r2, [r7, #3]
 8008454:	4611      	mov	r1, r2
 8008456:	4618      	mov	r0, r3
 8008458:	f7fe fcb7 	bl	8006dca <USBD_LL_IsoOUTIncomplete>
}
 800845c:	bf00      	nop
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	460b      	mov	r3, r1
 800846e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008476:	78fa      	ldrb	r2, [r7, #3]
 8008478:	4611      	mov	r1, r2
 800847a:	4618      	mov	r0, r3
 800847c:	f7fe fc73 	bl	8006d66 <USBD_LL_IsoINIncomplete>
}
 8008480:	bf00      	nop
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008496:	4618      	mov	r0, r3
 8008498:	f7fe fcc9 	bl	8006e2e <USBD_LL_DevConnected>
}
 800849c:	bf00      	nop
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fe fcc6 	bl	8006e44 <USBD_LL_DevDisconnected>
}
 80084b8:	bf00      	nop
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d13c      	bne.n	800854a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80084d0:	4a43      	ldr	r2, [pc, #268]	; (80085e0 <USBD_LL_Init+0x120>)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a41      	ldr	r2, [pc, #260]	; (80085e0 <USBD_LL_Init+0x120>)
 80084dc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80084e0:	4b3f      	ldr	r3, [pc, #252]	; (80085e0 <USBD_LL_Init+0x120>)
 80084e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80084e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80084e8:	4b3d      	ldr	r3, [pc, #244]	; (80085e0 <USBD_LL_Init+0x120>)
 80084ea:	2206      	movs	r2, #6
 80084ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80084ee:	4b3c      	ldr	r3, [pc, #240]	; (80085e0 <USBD_LL_Init+0x120>)
 80084f0:	2202      	movs	r2, #2
 80084f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80084f4:	4b3a      	ldr	r3, [pc, #232]	; (80085e0 <USBD_LL_Init+0x120>)
 80084f6:	2200      	movs	r2, #0
 80084f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80084fa:	4b39      	ldr	r3, [pc, #228]	; (80085e0 <USBD_LL_Init+0x120>)
 80084fc:	2202      	movs	r2, #2
 80084fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008500:	4b37      	ldr	r3, [pc, #220]	; (80085e0 <USBD_LL_Init+0x120>)
 8008502:	2200      	movs	r2, #0
 8008504:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008506:	4b36      	ldr	r3, [pc, #216]	; (80085e0 <USBD_LL_Init+0x120>)
 8008508:	2200      	movs	r2, #0
 800850a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800850c:	4b34      	ldr	r3, [pc, #208]	; (80085e0 <USBD_LL_Init+0x120>)
 800850e:	2200      	movs	r2, #0
 8008510:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008512:	4b33      	ldr	r3, [pc, #204]	; (80085e0 <USBD_LL_Init+0x120>)
 8008514:	2200      	movs	r2, #0
 8008516:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008518:	4b31      	ldr	r3, [pc, #196]	; (80085e0 <USBD_LL_Init+0x120>)
 800851a:	2200      	movs	r2, #0
 800851c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800851e:	4830      	ldr	r0, [pc, #192]	; (80085e0 <USBD_LL_Init+0x120>)
 8008520:	f7f9 fb0d 	bl	8001b3e <HAL_PCD_Init>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d001      	beq.n	800852e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800852a:	f7f8 fe19 	bl	8001160 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800852e:	2180      	movs	r1, #128	; 0x80
 8008530:	482b      	ldr	r0, [pc, #172]	; (80085e0 <USBD_LL_Init+0x120>)
 8008532:	f7fa fd80 	bl	8003036 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008536:	2240      	movs	r2, #64	; 0x40
 8008538:	2100      	movs	r1, #0
 800853a:	4829      	ldr	r0, [pc, #164]	; (80085e0 <USBD_LL_Init+0x120>)
 800853c:	f7fa fd34 	bl	8002fa8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008540:	2280      	movs	r2, #128	; 0x80
 8008542:	2101      	movs	r1, #1
 8008544:	4826      	ldr	r0, [pc, #152]	; (80085e0 <USBD_LL_Init+0x120>)
 8008546:	f7fa fd2f 	bl	8002fa8 <HAL_PCDEx_SetTxFiFo>
  }
  if (pdev->id == DEVICE_HS) {
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d140      	bne.n	80085d4 <USBD_LL_Init+0x114>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8008552:	4a24      	ldr	r2, [pc, #144]	; (80085e4 <USBD_LL_Init+0x124>)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a21      	ldr	r2, [pc, #132]	; (80085e4 <USBD_LL_Init+0x124>)
 800855e:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8008562:	4b20      	ldr	r3, [pc, #128]	; (80085e4 <USBD_LL_Init+0x124>)
 8008564:	4a20      	ldr	r2, [pc, #128]	; (80085e8 <USBD_LL_Init+0x128>)
 8008566:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 8008568:	4b1e      	ldr	r3, [pc, #120]	; (80085e4 <USBD_LL_Init+0x124>)
 800856a:	2208      	movs	r2, #8
 800856c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800856e:	4b1d      	ldr	r3, [pc, #116]	; (80085e4 <USBD_LL_Init+0x124>)
 8008570:	2202      	movs	r2, #2
 8008572:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8008574:	4b1b      	ldr	r3, [pc, #108]	; (80085e4 <USBD_LL_Init+0x124>)
 8008576:	2200      	movs	r2, #0
 8008578:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800857a:	4b1a      	ldr	r3, [pc, #104]	; (80085e4 <USBD_LL_Init+0x124>)
 800857c:	2202      	movs	r2, #2
 800857e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8008580:	4b18      	ldr	r3, [pc, #96]	; (80085e4 <USBD_LL_Init+0x124>)
 8008582:	2200      	movs	r2, #0
 8008584:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8008586:	4b17      	ldr	r3, [pc, #92]	; (80085e4 <USBD_LL_Init+0x124>)
 8008588:	2200      	movs	r2, #0
 800858a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800858c:	4b15      	ldr	r3, [pc, #84]	; (80085e4 <USBD_LL_Init+0x124>)
 800858e:	2200      	movs	r2, #0
 8008590:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8008592:	4b14      	ldr	r3, [pc, #80]	; (80085e4 <USBD_LL_Init+0x124>)
 8008594:	2200      	movs	r2, #0
 8008596:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8008598:	4b12      	ldr	r3, [pc, #72]	; (80085e4 <USBD_LL_Init+0x124>)
 800859a:	2200      	movs	r2, #0
 800859c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800859e:	4b11      	ldr	r3, [pc, #68]	; (80085e4 <USBD_LL_Init+0x124>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80085a4:	480f      	ldr	r0, [pc, #60]	; (80085e4 <USBD_LL_Init+0x124>)
 80085a6:	f7f9 faca 	bl	8001b3e <HAL_PCD_Init>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <USBD_LL_Init+0xf4>
  {
    Error_Handler( );
 80085b0:	f7f8 fdd6 	bl	8001160 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80085b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80085b8:	480a      	ldr	r0, [pc, #40]	; (80085e4 <USBD_LL_Init+0x124>)
 80085ba:	f7fa fd3c 	bl	8003036 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80085be:	2280      	movs	r2, #128	; 0x80
 80085c0:	2100      	movs	r1, #0
 80085c2:	4808      	ldr	r0, [pc, #32]	; (80085e4 <USBD_LL_Init+0x124>)
 80085c4:	f7fa fcf0 	bl	8002fa8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80085c8:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80085cc:	2101      	movs	r1, #1
 80085ce:	4805      	ldr	r0, [pc, #20]	; (80085e4 <USBD_LL_Init+0x124>)
 80085d0:	f7fa fcea 	bl	8002fa8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	20000b54 	.word	0x20000b54
 80085e4:	20001060 	.word	0x20001060
 80085e8:	40040000 	.word	0x40040000

080085ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085f4:	2300      	movs	r3, #0
 80085f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008602:	4618      	mov	r0, r3
 8008604:	f7f9 fbbf 	bl	8001d86 <HAL_PCD_Start>
 8008608:	4603      	mov	r3, r0
 800860a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800860c:	7bfb      	ldrb	r3, [r7, #15]
 800860e:	4618      	mov	r0, r3
 8008610:	f000 f97e 	bl	8008910 <USBD_Get_USB_Status>
 8008614:	4603      	mov	r3, r0
 8008616:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008618:	7bbb      	ldrb	r3, [r7, #14]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b084      	sub	sp, #16
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	4608      	mov	r0, r1
 800862c:	4611      	mov	r1, r2
 800862e:	461a      	mov	r2, r3
 8008630:	4603      	mov	r3, r0
 8008632:	70fb      	strb	r3, [r7, #3]
 8008634:	460b      	mov	r3, r1
 8008636:	70bb      	strb	r3, [r7, #2]
 8008638:	4613      	mov	r3, r2
 800863a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800863c:	2300      	movs	r3, #0
 800863e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800864a:	78bb      	ldrb	r3, [r7, #2]
 800864c:	883a      	ldrh	r2, [r7, #0]
 800864e:	78f9      	ldrb	r1, [r7, #3]
 8008650:	f7fa f8bd 	bl	80027ce <HAL_PCD_EP_Open>
 8008654:	4603      	mov	r3, r0
 8008656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008658:	7bfb      	ldrb	r3, [r7, #15]
 800865a:	4618      	mov	r0, r3
 800865c:	f000 f958 	bl	8008910 <USBD_Get_USB_Status>
 8008660:	4603      	mov	r3, r0
 8008662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008664:	7bbb      	ldrb	r3, [r7, #14]
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b084      	sub	sp, #16
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	460b      	mov	r3, r1
 8008678:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008688:	78fa      	ldrb	r2, [r7, #3]
 800868a:	4611      	mov	r1, r2
 800868c:	4618      	mov	r0, r3
 800868e:	f7fa f906 	bl	800289e <HAL_PCD_EP_Close>
 8008692:	4603      	mov	r3, r0
 8008694:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008696:	7bfb      	ldrb	r3, [r7, #15]
 8008698:	4618      	mov	r0, r3
 800869a:	f000 f939 	bl	8008910 <USBD_Get_USB_Status>
 800869e:	4603      	mov	r3, r0
 80086a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	460b      	mov	r3, r1
 80086b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80086c6:	78fa      	ldrb	r2, [r7, #3]
 80086c8:	4611      	mov	r1, r2
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7fa f9c6 	bl	8002a5c <HAL_PCD_EP_SetStall>
 80086d0:	4603      	mov	r3, r0
 80086d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 f91a 	bl	8008910 <USBD_Get_USB_Status>
 80086dc:	4603      	mov	r3, r0
 80086de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	460b      	mov	r3, r1
 80086f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086fa:	2300      	movs	r3, #0
 80086fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008704:	78fa      	ldrb	r2, [r7, #3]
 8008706:	4611      	mov	r1, r2
 8008708:	4618      	mov	r0, r3
 800870a:	f7fa fa0b 	bl	8002b24 <HAL_PCD_EP_ClrStall>
 800870e:	4603      	mov	r3, r0
 8008710:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008712:	7bfb      	ldrb	r3, [r7, #15]
 8008714:	4618      	mov	r0, r3
 8008716:	f000 f8fb 	bl	8008910 <USBD_Get_USB_Status>
 800871a:	4603      	mov	r3, r0
 800871c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800871e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800873a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800873c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008740:	2b00      	cmp	r3, #0
 8008742:	da0b      	bge.n	800875c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008744:	78fb      	ldrb	r3, [r7, #3]
 8008746:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800874a:	68f9      	ldr	r1, [r7, #12]
 800874c:	4613      	mov	r3, r2
 800874e:	00db      	lsls	r3, r3, #3
 8008750:	4413      	add	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	440b      	add	r3, r1
 8008756:	333e      	adds	r3, #62	; 0x3e
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	e00b      	b.n	8008774 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800875c:	78fb      	ldrb	r3, [r7, #3]
 800875e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008762:	68f9      	ldr	r1, [r7, #12]
 8008764:	4613      	mov	r3, r2
 8008766:	00db      	lsls	r3, r3, #3
 8008768:	4413      	add	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	440b      	add	r3, r1
 800876e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008772:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008774:	4618      	mov	r0, r3
 8008776:	3714      	adds	r7, #20
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	460b      	mov	r3, r1
 800878a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800878c:	2300      	movs	r3, #0
 800878e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008790:	2300      	movs	r3, #0
 8008792:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800879a:	78fa      	ldrb	r2, [r7, #3]
 800879c:	4611      	mov	r1, r2
 800879e:	4618      	mov	r0, r3
 80087a0:	f7f9 fff0 	bl	8002784 <HAL_PCD_SetAddress>
 80087a4:	4603      	mov	r3, r0
 80087a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 f8b0 	bl	8008910 <USBD_Get_USB_Status>
 80087b0:	4603      	mov	r3, r0
 80087b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b086      	sub	sp, #24
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	60f8      	str	r0, [r7, #12]
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	603b      	str	r3, [r7, #0]
 80087ca:	460b      	mov	r3, r1
 80087cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80087dc:	7af9      	ldrb	r1, [r7, #11]
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	f7fa f8f1 	bl	80029c8 <HAL_PCD_EP_Transmit>
 80087e6:	4603      	mov	r3, r0
 80087e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087ea:	7dfb      	ldrb	r3, [r7, #23]
 80087ec:	4618      	mov	r0, r3
 80087ee:	f000 f88f 	bl	8008910 <USBD_Get_USB_Status>
 80087f2:	4603      	mov	r3, r0
 80087f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3718      	adds	r7, #24
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	607a      	str	r2, [r7, #4]
 800880a:	603b      	str	r3, [r7, #0]
 800880c:	460b      	mov	r3, r1
 800880e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008810:	2300      	movs	r3, #0
 8008812:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008814:	2300      	movs	r3, #0
 8008816:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800881e:	7af9      	ldrb	r1, [r7, #11]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	f7fa f885 	bl	8002932 <HAL_PCD_EP_Receive>
 8008828:	4603      	mov	r3, r0
 800882a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800882c:	7dfb      	ldrb	r3, [r7, #23]
 800882e:	4618      	mov	r0, r3
 8008830:	f000 f86e 	bl	8008910 <USBD_Get_USB_Status>
 8008834:	4603      	mov	r3, r0
 8008836:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008838:	7dbb      	ldrb	r3, [r7, #22]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3718      	adds	r7, #24
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
	...

08008844 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	460b      	mov	r3, r1
 800884e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008850:	78fb      	ldrb	r3, [r7, #3]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d002      	beq.n	800885c <HAL_PCDEx_LPM_Callback+0x18>
 8008856:	2b01      	cmp	r3, #1
 8008858:	d01f      	beq.n	800889a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800885a:	e03b      	b.n	80088d4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a1b      	ldr	r3, [r3, #32]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d007      	beq.n	8008874 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8008864:	f7f8 fb78 	bl	8000f58 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008868:	4b1c      	ldr	r3, [pc, #112]	; (80088dc <HAL_PCDEx_LPM_Callback+0x98>)
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	4a1b      	ldr	r2, [pc, #108]	; (80088dc <HAL_PCDEx_LPM_Callback+0x98>)
 800886e:	f023 0306 	bic.w	r3, r3, #6
 8008872:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	6812      	ldr	r2, [r2, #0]
 8008882:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008886:	f023 0301 	bic.w	r3, r3, #1
 800888a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008892:	4618      	mov	r0, r3
 8008894:	f7fe fa2f 	bl	8006cf6 <USBD_LL_Resume>
    break;
 8008898:	e01c      	b.n	80088d4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	6812      	ldr	r2, [r2, #0]
 80088a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088ac:	f043 0301 	orr.w	r3, r3, #1
 80088b0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7fe fa06 	bl	8006cca <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d005      	beq.n	80088d2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088c6:	4b05      	ldr	r3, [pc, #20]	; (80088dc <HAL_PCDEx_LPM_Callback+0x98>)
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	4a04      	ldr	r2, [pc, #16]	; (80088dc <HAL_PCDEx_LPM_Callback+0x98>)
 80088cc:	f043 0306 	orr.w	r3, r3, #6
 80088d0:	6113      	str	r3, [r2, #16]
    break;
 80088d2:	bf00      	nop
}
 80088d4:	bf00      	nop
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	e000ed00 	.word	0xe000ed00

080088e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80088e8:	4b03      	ldr	r3, [pc, #12]	; (80088f8 <USBD_static_malloc+0x18>)
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	2000156c 	.word	0x2000156c

080088fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]

}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	4603      	mov	r3, r0
 8008918:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800891e:	79fb      	ldrb	r3, [r7, #7]
 8008920:	2b03      	cmp	r3, #3
 8008922:	d817      	bhi.n	8008954 <USBD_Get_USB_Status+0x44>
 8008924:	a201      	add	r2, pc, #4	; (adr r2, 800892c <USBD_Get_USB_Status+0x1c>)
 8008926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800892a:	bf00      	nop
 800892c:	0800893d 	.word	0x0800893d
 8008930:	08008943 	.word	0x08008943
 8008934:	08008949 	.word	0x08008949
 8008938:	0800894f 	.word	0x0800894f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	73fb      	strb	r3, [r7, #15]
    break;
 8008940:	e00b      	b.n	800895a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008942:	2303      	movs	r3, #3
 8008944:	73fb      	strb	r3, [r7, #15]
    break;
 8008946:	e008      	b.n	800895a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008948:	2301      	movs	r3, #1
 800894a:	73fb      	strb	r3, [r7, #15]
    break;
 800894c:	e005      	b.n	800895a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800894e:	2303      	movs	r3, #3
 8008950:	73fb      	strb	r3, [r7, #15]
    break;
 8008952:	e002      	b.n	800895a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008954:	2303      	movs	r3, #3
 8008956:	73fb      	strb	r3, [r7, #15]
    break;
 8008958:	bf00      	nop
  }
  return usb_status;
 800895a:	7bfb      	ldrb	r3, [r7, #15]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <__errno>:
 8008968:	4b01      	ldr	r3, [pc, #4]	; (8008970 <__errno+0x8>)
 800896a:	6818      	ldr	r0, [r3, #0]
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	20000160 	.word	0x20000160

08008974 <__libc_init_array>:
 8008974:	b570      	push	{r4, r5, r6, lr}
 8008976:	4d0d      	ldr	r5, [pc, #52]	; (80089ac <__libc_init_array+0x38>)
 8008978:	4c0d      	ldr	r4, [pc, #52]	; (80089b0 <__libc_init_array+0x3c>)
 800897a:	1b64      	subs	r4, r4, r5
 800897c:	10a4      	asrs	r4, r4, #2
 800897e:	2600      	movs	r6, #0
 8008980:	42a6      	cmp	r6, r4
 8008982:	d109      	bne.n	8008998 <__libc_init_array+0x24>
 8008984:	4d0b      	ldr	r5, [pc, #44]	; (80089b4 <__libc_init_array+0x40>)
 8008986:	4c0c      	ldr	r4, [pc, #48]	; (80089b8 <__libc_init_array+0x44>)
 8008988:	f002 fd4e 	bl	800b428 <_init>
 800898c:	1b64      	subs	r4, r4, r5
 800898e:	10a4      	asrs	r4, r4, #2
 8008990:	2600      	movs	r6, #0
 8008992:	42a6      	cmp	r6, r4
 8008994:	d105      	bne.n	80089a2 <__libc_init_array+0x2e>
 8008996:	bd70      	pop	{r4, r5, r6, pc}
 8008998:	f855 3b04 	ldr.w	r3, [r5], #4
 800899c:	4798      	blx	r3
 800899e:	3601      	adds	r6, #1
 80089a0:	e7ee      	b.n	8008980 <__libc_init_array+0xc>
 80089a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80089a6:	4798      	blx	r3
 80089a8:	3601      	adds	r6, #1
 80089aa:	e7f2      	b.n	8008992 <__libc_init_array+0x1e>
 80089ac:	0800b894 	.word	0x0800b894
 80089b0:	0800b894 	.word	0x0800b894
 80089b4:	0800b894 	.word	0x0800b894
 80089b8:	0800b898 	.word	0x0800b898

080089bc <memset>:
 80089bc:	4402      	add	r2, r0
 80089be:	4603      	mov	r3, r0
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d100      	bne.n	80089c6 <memset+0xa>
 80089c4:	4770      	bx	lr
 80089c6:	f803 1b01 	strb.w	r1, [r3], #1
 80089ca:	e7f9      	b.n	80089c0 <memset+0x4>

080089cc <__cvt>:
 80089cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089d0:	ec55 4b10 	vmov	r4, r5, d0
 80089d4:	2d00      	cmp	r5, #0
 80089d6:	460e      	mov	r6, r1
 80089d8:	4619      	mov	r1, r3
 80089da:	462b      	mov	r3, r5
 80089dc:	bfbb      	ittet	lt
 80089de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80089e2:	461d      	movlt	r5, r3
 80089e4:	2300      	movge	r3, #0
 80089e6:	232d      	movlt	r3, #45	; 0x2d
 80089e8:	700b      	strb	r3, [r1, #0]
 80089ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80089f0:	4691      	mov	r9, r2
 80089f2:	f023 0820 	bic.w	r8, r3, #32
 80089f6:	bfbc      	itt	lt
 80089f8:	4622      	movlt	r2, r4
 80089fa:	4614      	movlt	r4, r2
 80089fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a00:	d005      	beq.n	8008a0e <__cvt+0x42>
 8008a02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008a06:	d100      	bne.n	8008a0a <__cvt+0x3e>
 8008a08:	3601      	adds	r6, #1
 8008a0a:	2102      	movs	r1, #2
 8008a0c:	e000      	b.n	8008a10 <__cvt+0x44>
 8008a0e:	2103      	movs	r1, #3
 8008a10:	ab03      	add	r3, sp, #12
 8008a12:	9301      	str	r3, [sp, #4]
 8008a14:	ab02      	add	r3, sp, #8
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	ec45 4b10 	vmov	d0, r4, r5
 8008a1c:	4653      	mov	r3, sl
 8008a1e:	4632      	mov	r2, r6
 8008a20:	f000 fce2 	bl	80093e8 <_dtoa_r>
 8008a24:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008a28:	4607      	mov	r7, r0
 8008a2a:	d102      	bne.n	8008a32 <__cvt+0x66>
 8008a2c:	f019 0f01 	tst.w	r9, #1
 8008a30:	d022      	beq.n	8008a78 <__cvt+0xac>
 8008a32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a36:	eb07 0906 	add.w	r9, r7, r6
 8008a3a:	d110      	bne.n	8008a5e <__cvt+0x92>
 8008a3c:	783b      	ldrb	r3, [r7, #0]
 8008a3e:	2b30      	cmp	r3, #48	; 0x30
 8008a40:	d10a      	bne.n	8008a58 <__cvt+0x8c>
 8008a42:	2200      	movs	r2, #0
 8008a44:	2300      	movs	r3, #0
 8008a46:	4620      	mov	r0, r4
 8008a48:	4629      	mov	r1, r5
 8008a4a:	f7f8 f85d 	bl	8000b08 <__aeabi_dcmpeq>
 8008a4e:	b918      	cbnz	r0, 8008a58 <__cvt+0x8c>
 8008a50:	f1c6 0601 	rsb	r6, r6, #1
 8008a54:	f8ca 6000 	str.w	r6, [sl]
 8008a58:	f8da 3000 	ldr.w	r3, [sl]
 8008a5c:	4499      	add	r9, r3
 8008a5e:	2200      	movs	r2, #0
 8008a60:	2300      	movs	r3, #0
 8008a62:	4620      	mov	r0, r4
 8008a64:	4629      	mov	r1, r5
 8008a66:	f7f8 f84f 	bl	8000b08 <__aeabi_dcmpeq>
 8008a6a:	b108      	cbz	r0, 8008a70 <__cvt+0xa4>
 8008a6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008a70:	2230      	movs	r2, #48	; 0x30
 8008a72:	9b03      	ldr	r3, [sp, #12]
 8008a74:	454b      	cmp	r3, r9
 8008a76:	d307      	bcc.n	8008a88 <__cvt+0xbc>
 8008a78:	9b03      	ldr	r3, [sp, #12]
 8008a7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a7c:	1bdb      	subs	r3, r3, r7
 8008a7e:	4638      	mov	r0, r7
 8008a80:	6013      	str	r3, [r2, #0]
 8008a82:	b004      	add	sp, #16
 8008a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a88:	1c59      	adds	r1, r3, #1
 8008a8a:	9103      	str	r1, [sp, #12]
 8008a8c:	701a      	strb	r2, [r3, #0]
 8008a8e:	e7f0      	b.n	8008a72 <__cvt+0xa6>

08008a90 <__exponent>:
 8008a90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a92:	4603      	mov	r3, r0
 8008a94:	2900      	cmp	r1, #0
 8008a96:	bfb8      	it	lt
 8008a98:	4249      	neglt	r1, r1
 8008a9a:	f803 2b02 	strb.w	r2, [r3], #2
 8008a9e:	bfb4      	ite	lt
 8008aa0:	222d      	movlt	r2, #45	; 0x2d
 8008aa2:	222b      	movge	r2, #43	; 0x2b
 8008aa4:	2909      	cmp	r1, #9
 8008aa6:	7042      	strb	r2, [r0, #1]
 8008aa8:	dd2a      	ble.n	8008b00 <__exponent+0x70>
 8008aaa:	f10d 0407 	add.w	r4, sp, #7
 8008aae:	46a4      	mov	ip, r4
 8008ab0:	270a      	movs	r7, #10
 8008ab2:	46a6      	mov	lr, r4
 8008ab4:	460a      	mov	r2, r1
 8008ab6:	fb91 f6f7 	sdiv	r6, r1, r7
 8008aba:	fb07 1516 	mls	r5, r7, r6, r1
 8008abe:	3530      	adds	r5, #48	; 0x30
 8008ac0:	2a63      	cmp	r2, #99	; 0x63
 8008ac2:	f104 34ff 	add.w	r4, r4, #4294967295
 8008ac6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008aca:	4631      	mov	r1, r6
 8008acc:	dcf1      	bgt.n	8008ab2 <__exponent+0x22>
 8008ace:	3130      	adds	r1, #48	; 0x30
 8008ad0:	f1ae 0502 	sub.w	r5, lr, #2
 8008ad4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008ad8:	1c44      	adds	r4, r0, #1
 8008ada:	4629      	mov	r1, r5
 8008adc:	4561      	cmp	r1, ip
 8008ade:	d30a      	bcc.n	8008af6 <__exponent+0x66>
 8008ae0:	f10d 0209 	add.w	r2, sp, #9
 8008ae4:	eba2 020e 	sub.w	r2, r2, lr
 8008ae8:	4565      	cmp	r5, ip
 8008aea:	bf88      	it	hi
 8008aec:	2200      	movhi	r2, #0
 8008aee:	4413      	add	r3, r2
 8008af0:	1a18      	subs	r0, r3, r0
 8008af2:	b003      	add	sp, #12
 8008af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008af6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008afa:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008afe:	e7ed      	b.n	8008adc <__exponent+0x4c>
 8008b00:	2330      	movs	r3, #48	; 0x30
 8008b02:	3130      	adds	r1, #48	; 0x30
 8008b04:	7083      	strb	r3, [r0, #2]
 8008b06:	70c1      	strb	r1, [r0, #3]
 8008b08:	1d03      	adds	r3, r0, #4
 8008b0a:	e7f1      	b.n	8008af0 <__exponent+0x60>

08008b0c <_printf_float>:
 8008b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b10:	ed2d 8b02 	vpush	{d8}
 8008b14:	b08d      	sub	sp, #52	; 0x34
 8008b16:	460c      	mov	r4, r1
 8008b18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008b1c:	4616      	mov	r6, r2
 8008b1e:	461f      	mov	r7, r3
 8008b20:	4605      	mov	r5, r0
 8008b22:	f001 fb45 	bl	800a1b0 <_localeconv_r>
 8008b26:	f8d0 a000 	ldr.w	sl, [r0]
 8008b2a:	4650      	mov	r0, sl
 8008b2c:	f7f7 fb70 	bl	8000210 <strlen>
 8008b30:	2300      	movs	r3, #0
 8008b32:	930a      	str	r3, [sp, #40]	; 0x28
 8008b34:	6823      	ldr	r3, [r4, #0]
 8008b36:	9305      	str	r3, [sp, #20]
 8008b38:	f8d8 3000 	ldr.w	r3, [r8]
 8008b3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008b40:	3307      	adds	r3, #7
 8008b42:	f023 0307 	bic.w	r3, r3, #7
 8008b46:	f103 0208 	add.w	r2, r3, #8
 8008b4a:	f8c8 2000 	str.w	r2, [r8]
 8008b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b52:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008b56:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008b5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b5e:	9307      	str	r3, [sp, #28]
 8008b60:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b64:	ee08 0a10 	vmov	s16, r0
 8008b68:	4b9f      	ldr	r3, [pc, #636]	; (8008de8 <_printf_float+0x2dc>)
 8008b6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b72:	f7f7 fffb 	bl	8000b6c <__aeabi_dcmpun>
 8008b76:	bb88      	cbnz	r0, 8008bdc <_printf_float+0xd0>
 8008b78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b7c:	4b9a      	ldr	r3, [pc, #616]	; (8008de8 <_printf_float+0x2dc>)
 8008b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b82:	f7f7 ffd5 	bl	8000b30 <__aeabi_dcmple>
 8008b86:	bb48      	cbnz	r0, 8008bdc <_printf_float+0xd0>
 8008b88:	2200      	movs	r2, #0
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	4640      	mov	r0, r8
 8008b8e:	4649      	mov	r1, r9
 8008b90:	f7f7 ffc4 	bl	8000b1c <__aeabi_dcmplt>
 8008b94:	b110      	cbz	r0, 8008b9c <_printf_float+0x90>
 8008b96:	232d      	movs	r3, #45	; 0x2d
 8008b98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b9c:	4b93      	ldr	r3, [pc, #588]	; (8008dec <_printf_float+0x2e0>)
 8008b9e:	4894      	ldr	r0, [pc, #592]	; (8008df0 <_printf_float+0x2e4>)
 8008ba0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008ba4:	bf94      	ite	ls
 8008ba6:	4698      	movls	r8, r3
 8008ba8:	4680      	movhi	r8, r0
 8008baa:	2303      	movs	r3, #3
 8008bac:	6123      	str	r3, [r4, #16]
 8008bae:	9b05      	ldr	r3, [sp, #20]
 8008bb0:	f023 0204 	bic.w	r2, r3, #4
 8008bb4:	6022      	str	r2, [r4, #0]
 8008bb6:	f04f 0900 	mov.w	r9, #0
 8008bba:	9700      	str	r7, [sp, #0]
 8008bbc:	4633      	mov	r3, r6
 8008bbe:	aa0b      	add	r2, sp, #44	; 0x2c
 8008bc0:	4621      	mov	r1, r4
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	f000 f9d8 	bl	8008f78 <_printf_common>
 8008bc8:	3001      	adds	r0, #1
 8008bca:	f040 8090 	bne.w	8008cee <_printf_float+0x1e2>
 8008bce:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd2:	b00d      	add	sp, #52	; 0x34
 8008bd4:	ecbd 8b02 	vpop	{d8}
 8008bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bdc:	4642      	mov	r2, r8
 8008bde:	464b      	mov	r3, r9
 8008be0:	4640      	mov	r0, r8
 8008be2:	4649      	mov	r1, r9
 8008be4:	f7f7 ffc2 	bl	8000b6c <__aeabi_dcmpun>
 8008be8:	b140      	cbz	r0, 8008bfc <_printf_float+0xf0>
 8008bea:	464b      	mov	r3, r9
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	bfbc      	itt	lt
 8008bf0:	232d      	movlt	r3, #45	; 0x2d
 8008bf2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008bf6:	487f      	ldr	r0, [pc, #508]	; (8008df4 <_printf_float+0x2e8>)
 8008bf8:	4b7f      	ldr	r3, [pc, #508]	; (8008df8 <_printf_float+0x2ec>)
 8008bfa:	e7d1      	b.n	8008ba0 <_printf_float+0x94>
 8008bfc:	6863      	ldr	r3, [r4, #4]
 8008bfe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008c02:	9206      	str	r2, [sp, #24]
 8008c04:	1c5a      	adds	r2, r3, #1
 8008c06:	d13f      	bne.n	8008c88 <_printf_float+0x17c>
 8008c08:	2306      	movs	r3, #6
 8008c0a:	6063      	str	r3, [r4, #4]
 8008c0c:	9b05      	ldr	r3, [sp, #20]
 8008c0e:	6861      	ldr	r1, [r4, #4]
 8008c10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008c14:	2300      	movs	r3, #0
 8008c16:	9303      	str	r3, [sp, #12]
 8008c18:	ab0a      	add	r3, sp, #40	; 0x28
 8008c1a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008c1e:	ab09      	add	r3, sp, #36	; 0x24
 8008c20:	ec49 8b10 	vmov	d0, r8, r9
 8008c24:	9300      	str	r3, [sp, #0]
 8008c26:	6022      	str	r2, [r4, #0]
 8008c28:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	f7ff fecd 	bl	80089cc <__cvt>
 8008c32:	9b06      	ldr	r3, [sp, #24]
 8008c34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c36:	2b47      	cmp	r3, #71	; 0x47
 8008c38:	4680      	mov	r8, r0
 8008c3a:	d108      	bne.n	8008c4e <_printf_float+0x142>
 8008c3c:	1cc8      	adds	r0, r1, #3
 8008c3e:	db02      	blt.n	8008c46 <_printf_float+0x13a>
 8008c40:	6863      	ldr	r3, [r4, #4]
 8008c42:	4299      	cmp	r1, r3
 8008c44:	dd41      	ble.n	8008cca <_printf_float+0x1be>
 8008c46:	f1ab 0b02 	sub.w	fp, fp, #2
 8008c4a:	fa5f fb8b 	uxtb.w	fp, fp
 8008c4e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008c52:	d820      	bhi.n	8008c96 <_printf_float+0x18a>
 8008c54:	3901      	subs	r1, #1
 8008c56:	465a      	mov	r2, fp
 8008c58:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008c5c:	9109      	str	r1, [sp, #36]	; 0x24
 8008c5e:	f7ff ff17 	bl	8008a90 <__exponent>
 8008c62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c64:	1813      	adds	r3, r2, r0
 8008c66:	2a01      	cmp	r2, #1
 8008c68:	4681      	mov	r9, r0
 8008c6a:	6123      	str	r3, [r4, #16]
 8008c6c:	dc02      	bgt.n	8008c74 <_printf_float+0x168>
 8008c6e:	6822      	ldr	r2, [r4, #0]
 8008c70:	07d2      	lsls	r2, r2, #31
 8008c72:	d501      	bpl.n	8008c78 <_printf_float+0x16c>
 8008c74:	3301      	adds	r3, #1
 8008c76:	6123      	str	r3, [r4, #16]
 8008c78:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d09c      	beq.n	8008bba <_printf_float+0xae>
 8008c80:	232d      	movs	r3, #45	; 0x2d
 8008c82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c86:	e798      	b.n	8008bba <_printf_float+0xae>
 8008c88:	9a06      	ldr	r2, [sp, #24]
 8008c8a:	2a47      	cmp	r2, #71	; 0x47
 8008c8c:	d1be      	bne.n	8008c0c <_printf_float+0x100>
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1bc      	bne.n	8008c0c <_printf_float+0x100>
 8008c92:	2301      	movs	r3, #1
 8008c94:	e7b9      	b.n	8008c0a <_printf_float+0xfe>
 8008c96:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008c9a:	d118      	bne.n	8008cce <_printf_float+0x1c2>
 8008c9c:	2900      	cmp	r1, #0
 8008c9e:	6863      	ldr	r3, [r4, #4]
 8008ca0:	dd0b      	ble.n	8008cba <_printf_float+0x1ae>
 8008ca2:	6121      	str	r1, [r4, #16]
 8008ca4:	b913      	cbnz	r3, 8008cac <_printf_float+0x1a0>
 8008ca6:	6822      	ldr	r2, [r4, #0]
 8008ca8:	07d0      	lsls	r0, r2, #31
 8008caa:	d502      	bpl.n	8008cb2 <_printf_float+0x1a6>
 8008cac:	3301      	adds	r3, #1
 8008cae:	440b      	add	r3, r1
 8008cb0:	6123      	str	r3, [r4, #16]
 8008cb2:	65a1      	str	r1, [r4, #88]	; 0x58
 8008cb4:	f04f 0900 	mov.w	r9, #0
 8008cb8:	e7de      	b.n	8008c78 <_printf_float+0x16c>
 8008cba:	b913      	cbnz	r3, 8008cc2 <_printf_float+0x1b6>
 8008cbc:	6822      	ldr	r2, [r4, #0]
 8008cbe:	07d2      	lsls	r2, r2, #31
 8008cc0:	d501      	bpl.n	8008cc6 <_printf_float+0x1ba>
 8008cc2:	3302      	adds	r3, #2
 8008cc4:	e7f4      	b.n	8008cb0 <_printf_float+0x1a4>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e7f2      	b.n	8008cb0 <_printf_float+0x1a4>
 8008cca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cd0:	4299      	cmp	r1, r3
 8008cd2:	db05      	blt.n	8008ce0 <_printf_float+0x1d4>
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	6121      	str	r1, [r4, #16]
 8008cd8:	07d8      	lsls	r0, r3, #31
 8008cda:	d5ea      	bpl.n	8008cb2 <_printf_float+0x1a6>
 8008cdc:	1c4b      	adds	r3, r1, #1
 8008cde:	e7e7      	b.n	8008cb0 <_printf_float+0x1a4>
 8008ce0:	2900      	cmp	r1, #0
 8008ce2:	bfd4      	ite	le
 8008ce4:	f1c1 0202 	rsble	r2, r1, #2
 8008ce8:	2201      	movgt	r2, #1
 8008cea:	4413      	add	r3, r2
 8008cec:	e7e0      	b.n	8008cb0 <_printf_float+0x1a4>
 8008cee:	6823      	ldr	r3, [r4, #0]
 8008cf0:	055a      	lsls	r2, r3, #21
 8008cf2:	d407      	bmi.n	8008d04 <_printf_float+0x1f8>
 8008cf4:	6923      	ldr	r3, [r4, #16]
 8008cf6:	4642      	mov	r2, r8
 8008cf8:	4631      	mov	r1, r6
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	47b8      	blx	r7
 8008cfe:	3001      	adds	r0, #1
 8008d00:	d12c      	bne.n	8008d5c <_printf_float+0x250>
 8008d02:	e764      	b.n	8008bce <_printf_float+0xc2>
 8008d04:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d08:	f240 80e0 	bls.w	8008ecc <_printf_float+0x3c0>
 8008d0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d10:	2200      	movs	r2, #0
 8008d12:	2300      	movs	r3, #0
 8008d14:	f7f7 fef8 	bl	8000b08 <__aeabi_dcmpeq>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d034      	beq.n	8008d86 <_printf_float+0x27a>
 8008d1c:	4a37      	ldr	r2, [pc, #220]	; (8008dfc <_printf_float+0x2f0>)
 8008d1e:	2301      	movs	r3, #1
 8008d20:	4631      	mov	r1, r6
 8008d22:	4628      	mov	r0, r5
 8008d24:	47b8      	blx	r7
 8008d26:	3001      	adds	r0, #1
 8008d28:	f43f af51 	beq.w	8008bce <_printf_float+0xc2>
 8008d2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d30:	429a      	cmp	r2, r3
 8008d32:	db02      	blt.n	8008d3a <_printf_float+0x22e>
 8008d34:	6823      	ldr	r3, [r4, #0]
 8008d36:	07d8      	lsls	r0, r3, #31
 8008d38:	d510      	bpl.n	8008d5c <_printf_float+0x250>
 8008d3a:	ee18 3a10 	vmov	r3, s16
 8008d3e:	4652      	mov	r2, sl
 8008d40:	4631      	mov	r1, r6
 8008d42:	4628      	mov	r0, r5
 8008d44:	47b8      	blx	r7
 8008d46:	3001      	adds	r0, #1
 8008d48:	f43f af41 	beq.w	8008bce <_printf_float+0xc2>
 8008d4c:	f04f 0800 	mov.w	r8, #0
 8008d50:	f104 091a 	add.w	r9, r4, #26
 8008d54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d56:	3b01      	subs	r3, #1
 8008d58:	4543      	cmp	r3, r8
 8008d5a:	dc09      	bgt.n	8008d70 <_printf_float+0x264>
 8008d5c:	6823      	ldr	r3, [r4, #0]
 8008d5e:	079b      	lsls	r3, r3, #30
 8008d60:	f100 8105 	bmi.w	8008f6e <_printf_float+0x462>
 8008d64:	68e0      	ldr	r0, [r4, #12]
 8008d66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d68:	4298      	cmp	r0, r3
 8008d6a:	bfb8      	it	lt
 8008d6c:	4618      	movlt	r0, r3
 8008d6e:	e730      	b.n	8008bd2 <_printf_float+0xc6>
 8008d70:	2301      	movs	r3, #1
 8008d72:	464a      	mov	r2, r9
 8008d74:	4631      	mov	r1, r6
 8008d76:	4628      	mov	r0, r5
 8008d78:	47b8      	blx	r7
 8008d7a:	3001      	adds	r0, #1
 8008d7c:	f43f af27 	beq.w	8008bce <_printf_float+0xc2>
 8008d80:	f108 0801 	add.w	r8, r8, #1
 8008d84:	e7e6      	b.n	8008d54 <_printf_float+0x248>
 8008d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	dc39      	bgt.n	8008e00 <_printf_float+0x2f4>
 8008d8c:	4a1b      	ldr	r2, [pc, #108]	; (8008dfc <_printf_float+0x2f0>)
 8008d8e:	2301      	movs	r3, #1
 8008d90:	4631      	mov	r1, r6
 8008d92:	4628      	mov	r0, r5
 8008d94:	47b8      	blx	r7
 8008d96:	3001      	adds	r0, #1
 8008d98:	f43f af19 	beq.w	8008bce <_printf_float+0xc2>
 8008d9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008da0:	4313      	orrs	r3, r2
 8008da2:	d102      	bne.n	8008daa <_printf_float+0x29e>
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	07d9      	lsls	r1, r3, #31
 8008da8:	d5d8      	bpl.n	8008d5c <_printf_float+0x250>
 8008daa:	ee18 3a10 	vmov	r3, s16
 8008dae:	4652      	mov	r2, sl
 8008db0:	4631      	mov	r1, r6
 8008db2:	4628      	mov	r0, r5
 8008db4:	47b8      	blx	r7
 8008db6:	3001      	adds	r0, #1
 8008db8:	f43f af09 	beq.w	8008bce <_printf_float+0xc2>
 8008dbc:	f04f 0900 	mov.w	r9, #0
 8008dc0:	f104 0a1a 	add.w	sl, r4, #26
 8008dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dc6:	425b      	negs	r3, r3
 8008dc8:	454b      	cmp	r3, r9
 8008dca:	dc01      	bgt.n	8008dd0 <_printf_float+0x2c4>
 8008dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dce:	e792      	b.n	8008cf6 <_printf_float+0x1ea>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	4652      	mov	r2, sl
 8008dd4:	4631      	mov	r1, r6
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	47b8      	blx	r7
 8008dda:	3001      	adds	r0, #1
 8008ddc:	f43f aef7 	beq.w	8008bce <_printf_float+0xc2>
 8008de0:	f109 0901 	add.w	r9, r9, #1
 8008de4:	e7ee      	b.n	8008dc4 <_printf_float+0x2b8>
 8008de6:	bf00      	nop
 8008de8:	7fefffff 	.word	0x7fefffff
 8008dec:	0800b4b8 	.word	0x0800b4b8
 8008df0:	0800b4bc 	.word	0x0800b4bc
 8008df4:	0800b4c4 	.word	0x0800b4c4
 8008df8:	0800b4c0 	.word	0x0800b4c0
 8008dfc:	0800b4c8 	.word	0x0800b4c8
 8008e00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e04:	429a      	cmp	r2, r3
 8008e06:	bfa8      	it	ge
 8008e08:	461a      	movge	r2, r3
 8008e0a:	2a00      	cmp	r2, #0
 8008e0c:	4691      	mov	r9, r2
 8008e0e:	dc37      	bgt.n	8008e80 <_printf_float+0x374>
 8008e10:	f04f 0b00 	mov.w	fp, #0
 8008e14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e18:	f104 021a 	add.w	r2, r4, #26
 8008e1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e1e:	9305      	str	r3, [sp, #20]
 8008e20:	eba3 0309 	sub.w	r3, r3, r9
 8008e24:	455b      	cmp	r3, fp
 8008e26:	dc33      	bgt.n	8008e90 <_printf_float+0x384>
 8008e28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	db3b      	blt.n	8008ea8 <_printf_float+0x39c>
 8008e30:	6823      	ldr	r3, [r4, #0]
 8008e32:	07da      	lsls	r2, r3, #31
 8008e34:	d438      	bmi.n	8008ea8 <_printf_float+0x39c>
 8008e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e38:	9a05      	ldr	r2, [sp, #20]
 8008e3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e3c:	1a9a      	subs	r2, r3, r2
 8008e3e:	eba3 0901 	sub.w	r9, r3, r1
 8008e42:	4591      	cmp	r9, r2
 8008e44:	bfa8      	it	ge
 8008e46:	4691      	movge	r9, r2
 8008e48:	f1b9 0f00 	cmp.w	r9, #0
 8008e4c:	dc35      	bgt.n	8008eba <_printf_float+0x3ae>
 8008e4e:	f04f 0800 	mov.w	r8, #0
 8008e52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e56:	f104 0a1a 	add.w	sl, r4, #26
 8008e5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e5e:	1a9b      	subs	r3, r3, r2
 8008e60:	eba3 0309 	sub.w	r3, r3, r9
 8008e64:	4543      	cmp	r3, r8
 8008e66:	f77f af79 	ble.w	8008d5c <_printf_float+0x250>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	4652      	mov	r2, sl
 8008e6e:	4631      	mov	r1, r6
 8008e70:	4628      	mov	r0, r5
 8008e72:	47b8      	blx	r7
 8008e74:	3001      	adds	r0, #1
 8008e76:	f43f aeaa 	beq.w	8008bce <_printf_float+0xc2>
 8008e7a:	f108 0801 	add.w	r8, r8, #1
 8008e7e:	e7ec      	b.n	8008e5a <_printf_float+0x34e>
 8008e80:	4613      	mov	r3, r2
 8008e82:	4631      	mov	r1, r6
 8008e84:	4642      	mov	r2, r8
 8008e86:	4628      	mov	r0, r5
 8008e88:	47b8      	blx	r7
 8008e8a:	3001      	adds	r0, #1
 8008e8c:	d1c0      	bne.n	8008e10 <_printf_float+0x304>
 8008e8e:	e69e      	b.n	8008bce <_printf_float+0xc2>
 8008e90:	2301      	movs	r3, #1
 8008e92:	4631      	mov	r1, r6
 8008e94:	4628      	mov	r0, r5
 8008e96:	9205      	str	r2, [sp, #20]
 8008e98:	47b8      	blx	r7
 8008e9a:	3001      	adds	r0, #1
 8008e9c:	f43f ae97 	beq.w	8008bce <_printf_float+0xc2>
 8008ea0:	9a05      	ldr	r2, [sp, #20]
 8008ea2:	f10b 0b01 	add.w	fp, fp, #1
 8008ea6:	e7b9      	b.n	8008e1c <_printf_float+0x310>
 8008ea8:	ee18 3a10 	vmov	r3, s16
 8008eac:	4652      	mov	r2, sl
 8008eae:	4631      	mov	r1, r6
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	47b8      	blx	r7
 8008eb4:	3001      	adds	r0, #1
 8008eb6:	d1be      	bne.n	8008e36 <_printf_float+0x32a>
 8008eb8:	e689      	b.n	8008bce <_printf_float+0xc2>
 8008eba:	9a05      	ldr	r2, [sp, #20]
 8008ebc:	464b      	mov	r3, r9
 8008ebe:	4442      	add	r2, r8
 8008ec0:	4631      	mov	r1, r6
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	47b8      	blx	r7
 8008ec6:	3001      	adds	r0, #1
 8008ec8:	d1c1      	bne.n	8008e4e <_printf_float+0x342>
 8008eca:	e680      	b.n	8008bce <_printf_float+0xc2>
 8008ecc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ece:	2a01      	cmp	r2, #1
 8008ed0:	dc01      	bgt.n	8008ed6 <_printf_float+0x3ca>
 8008ed2:	07db      	lsls	r3, r3, #31
 8008ed4:	d538      	bpl.n	8008f48 <_printf_float+0x43c>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	4642      	mov	r2, r8
 8008eda:	4631      	mov	r1, r6
 8008edc:	4628      	mov	r0, r5
 8008ede:	47b8      	blx	r7
 8008ee0:	3001      	adds	r0, #1
 8008ee2:	f43f ae74 	beq.w	8008bce <_printf_float+0xc2>
 8008ee6:	ee18 3a10 	vmov	r3, s16
 8008eea:	4652      	mov	r2, sl
 8008eec:	4631      	mov	r1, r6
 8008eee:	4628      	mov	r0, r5
 8008ef0:	47b8      	blx	r7
 8008ef2:	3001      	adds	r0, #1
 8008ef4:	f43f ae6b 	beq.w	8008bce <_printf_float+0xc2>
 8008ef8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008efc:	2200      	movs	r2, #0
 8008efe:	2300      	movs	r3, #0
 8008f00:	f7f7 fe02 	bl	8000b08 <__aeabi_dcmpeq>
 8008f04:	b9d8      	cbnz	r0, 8008f3e <_printf_float+0x432>
 8008f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f08:	f108 0201 	add.w	r2, r8, #1
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	4631      	mov	r1, r6
 8008f10:	4628      	mov	r0, r5
 8008f12:	47b8      	blx	r7
 8008f14:	3001      	adds	r0, #1
 8008f16:	d10e      	bne.n	8008f36 <_printf_float+0x42a>
 8008f18:	e659      	b.n	8008bce <_printf_float+0xc2>
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	4652      	mov	r2, sl
 8008f1e:	4631      	mov	r1, r6
 8008f20:	4628      	mov	r0, r5
 8008f22:	47b8      	blx	r7
 8008f24:	3001      	adds	r0, #1
 8008f26:	f43f ae52 	beq.w	8008bce <_printf_float+0xc2>
 8008f2a:	f108 0801 	add.w	r8, r8, #1
 8008f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f30:	3b01      	subs	r3, #1
 8008f32:	4543      	cmp	r3, r8
 8008f34:	dcf1      	bgt.n	8008f1a <_printf_float+0x40e>
 8008f36:	464b      	mov	r3, r9
 8008f38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008f3c:	e6dc      	b.n	8008cf8 <_printf_float+0x1ec>
 8008f3e:	f04f 0800 	mov.w	r8, #0
 8008f42:	f104 0a1a 	add.w	sl, r4, #26
 8008f46:	e7f2      	b.n	8008f2e <_printf_float+0x422>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	4642      	mov	r2, r8
 8008f4c:	e7df      	b.n	8008f0e <_printf_float+0x402>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	464a      	mov	r2, r9
 8008f52:	4631      	mov	r1, r6
 8008f54:	4628      	mov	r0, r5
 8008f56:	47b8      	blx	r7
 8008f58:	3001      	adds	r0, #1
 8008f5a:	f43f ae38 	beq.w	8008bce <_printf_float+0xc2>
 8008f5e:	f108 0801 	add.w	r8, r8, #1
 8008f62:	68e3      	ldr	r3, [r4, #12]
 8008f64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f66:	1a5b      	subs	r3, r3, r1
 8008f68:	4543      	cmp	r3, r8
 8008f6a:	dcf0      	bgt.n	8008f4e <_printf_float+0x442>
 8008f6c:	e6fa      	b.n	8008d64 <_printf_float+0x258>
 8008f6e:	f04f 0800 	mov.w	r8, #0
 8008f72:	f104 0919 	add.w	r9, r4, #25
 8008f76:	e7f4      	b.n	8008f62 <_printf_float+0x456>

08008f78 <_printf_common>:
 8008f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f7c:	4616      	mov	r6, r2
 8008f7e:	4699      	mov	r9, r3
 8008f80:	688a      	ldr	r2, [r1, #8]
 8008f82:	690b      	ldr	r3, [r1, #16]
 8008f84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	bfb8      	it	lt
 8008f8c:	4613      	movlt	r3, r2
 8008f8e:	6033      	str	r3, [r6, #0]
 8008f90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f94:	4607      	mov	r7, r0
 8008f96:	460c      	mov	r4, r1
 8008f98:	b10a      	cbz	r2, 8008f9e <_printf_common+0x26>
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	6033      	str	r3, [r6, #0]
 8008f9e:	6823      	ldr	r3, [r4, #0]
 8008fa0:	0699      	lsls	r1, r3, #26
 8008fa2:	bf42      	ittt	mi
 8008fa4:	6833      	ldrmi	r3, [r6, #0]
 8008fa6:	3302      	addmi	r3, #2
 8008fa8:	6033      	strmi	r3, [r6, #0]
 8008faa:	6825      	ldr	r5, [r4, #0]
 8008fac:	f015 0506 	ands.w	r5, r5, #6
 8008fb0:	d106      	bne.n	8008fc0 <_printf_common+0x48>
 8008fb2:	f104 0a19 	add.w	sl, r4, #25
 8008fb6:	68e3      	ldr	r3, [r4, #12]
 8008fb8:	6832      	ldr	r2, [r6, #0]
 8008fba:	1a9b      	subs	r3, r3, r2
 8008fbc:	42ab      	cmp	r3, r5
 8008fbe:	dc26      	bgt.n	800900e <_printf_common+0x96>
 8008fc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008fc4:	1e13      	subs	r3, r2, #0
 8008fc6:	6822      	ldr	r2, [r4, #0]
 8008fc8:	bf18      	it	ne
 8008fca:	2301      	movne	r3, #1
 8008fcc:	0692      	lsls	r2, r2, #26
 8008fce:	d42b      	bmi.n	8009028 <_printf_common+0xb0>
 8008fd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fd4:	4649      	mov	r1, r9
 8008fd6:	4638      	mov	r0, r7
 8008fd8:	47c0      	blx	r8
 8008fda:	3001      	adds	r0, #1
 8008fdc:	d01e      	beq.n	800901c <_printf_common+0xa4>
 8008fde:	6823      	ldr	r3, [r4, #0]
 8008fe0:	68e5      	ldr	r5, [r4, #12]
 8008fe2:	6832      	ldr	r2, [r6, #0]
 8008fe4:	f003 0306 	and.w	r3, r3, #6
 8008fe8:	2b04      	cmp	r3, #4
 8008fea:	bf08      	it	eq
 8008fec:	1aad      	subeq	r5, r5, r2
 8008fee:	68a3      	ldr	r3, [r4, #8]
 8008ff0:	6922      	ldr	r2, [r4, #16]
 8008ff2:	bf0c      	ite	eq
 8008ff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ff8:	2500      	movne	r5, #0
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	bfc4      	itt	gt
 8008ffe:	1a9b      	subgt	r3, r3, r2
 8009000:	18ed      	addgt	r5, r5, r3
 8009002:	2600      	movs	r6, #0
 8009004:	341a      	adds	r4, #26
 8009006:	42b5      	cmp	r5, r6
 8009008:	d11a      	bne.n	8009040 <_printf_common+0xc8>
 800900a:	2000      	movs	r0, #0
 800900c:	e008      	b.n	8009020 <_printf_common+0xa8>
 800900e:	2301      	movs	r3, #1
 8009010:	4652      	mov	r2, sl
 8009012:	4649      	mov	r1, r9
 8009014:	4638      	mov	r0, r7
 8009016:	47c0      	blx	r8
 8009018:	3001      	adds	r0, #1
 800901a:	d103      	bne.n	8009024 <_printf_common+0xac>
 800901c:	f04f 30ff 	mov.w	r0, #4294967295
 8009020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009024:	3501      	adds	r5, #1
 8009026:	e7c6      	b.n	8008fb6 <_printf_common+0x3e>
 8009028:	18e1      	adds	r1, r4, r3
 800902a:	1c5a      	adds	r2, r3, #1
 800902c:	2030      	movs	r0, #48	; 0x30
 800902e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009032:	4422      	add	r2, r4
 8009034:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009038:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800903c:	3302      	adds	r3, #2
 800903e:	e7c7      	b.n	8008fd0 <_printf_common+0x58>
 8009040:	2301      	movs	r3, #1
 8009042:	4622      	mov	r2, r4
 8009044:	4649      	mov	r1, r9
 8009046:	4638      	mov	r0, r7
 8009048:	47c0      	blx	r8
 800904a:	3001      	adds	r0, #1
 800904c:	d0e6      	beq.n	800901c <_printf_common+0xa4>
 800904e:	3601      	adds	r6, #1
 8009050:	e7d9      	b.n	8009006 <_printf_common+0x8e>
	...

08009054 <_printf_i>:
 8009054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009058:	7e0f      	ldrb	r7, [r1, #24]
 800905a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800905c:	2f78      	cmp	r7, #120	; 0x78
 800905e:	4691      	mov	r9, r2
 8009060:	4680      	mov	r8, r0
 8009062:	460c      	mov	r4, r1
 8009064:	469a      	mov	sl, r3
 8009066:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800906a:	d807      	bhi.n	800907c <_printf_i+0x28>
 800906c:	2f62      	cmp	r7, #98	; 0x62
 800906e:	d80a      	bhi.n	8009086 <_printf_i+0x32>
 8009070:	2f00      	cmp	r7, #0
 8009072:	f000 80d8 	beq.w	8009226 <_printf_i+0x1d2>
 8009076:	2f58      	cmp	r7, #88	; 0x58
 8009078:	f000 80a3 	beq.w	80091c2 <_printf_i+0x16e>
 800907c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009080:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009084:	e03a      	b.n	80090fc <_printf_i+0xa8>
 8009086:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800908a:	2b15      	cmp	r3, #21
 800908c:	d8f6      	bhi.n	800907c <_printf_i+0x28>
 800908e:	a101      	add	r1, pc, #4	; (adr r1, 8009094 <_printf_i+0x40>)
 8009090:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009094:	080090ed 	.word	0x080090ed
 8009098:	08009101 	.word	0x08009101
 800909c:	0800907d 	.word	0x0800907d
 80090a0:	0800907d 	.word	0x0800907d
 80090a4:	0800907d 	.word	0x0800907d
 80090a8:	0800907d 	.word	0x0800907d
 80090ac:	08009101 	.word	0x08009101
 80090b0:	0800907d 	.word	0x0800907d
 80090b4:	0800907d 	.word	0x0800907d
 80090b8:	0800907d 	.word	0x0800907d
 80090bc:	0800907d 	.word	0x0800907d
 80090c0:	0800920d 	.word	0x0800920d
 80090c4:	08009131 	.word	0x08009131
 80090c8:	080091ef 	.word	0x080091ef
 80090cc:	0800907d 	.word	0x0800907d
 80090d0:	0800907d 	.word	0x0800907d
 80090d4:	0800922f 	.word	0x0800922f
 80090d8:	0800907d 	.word	0x0800907d
 80090dc:	08009131 	.word	0x08009131
 80090e0:	0800907d 	.word	0x0800907d
 80090e4:	0800907d 	.word	0x0800907d
 80090e8:	080091f7 	.word	0x080091f7
 80090ec:	682b      	ldr	r3, [r5, #0]
 80090ee:	1d1a      	adds	r2, r3, #4
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	602a      	str	r2, [r5, #0]
 80090f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090fc:	2301      	movs	r3, #1
 80090fe:	e0a3      	b.n	8009248 <_printf_i+0x1f4>
 8009100:	6820      	ldr	r0, [r4, #0]
 8009102:	6829      	ldr	r1, [r5, #0]
 8009104:	0606      	lsls	r6, r0, #24
 8009106:	f101 0304 	add.w	r3, r1, #4
 800910a:	d50a      	bpl.n	8009122 <_printf_i+0xce>
 800910c:	680e      	ldr	r6, [r1, #0]
 800910e:	602b      	str	r3, [r5, #0]
 8009110:	2e00      	cmp	r6, #0
 8009112:	da03      	bge.n	800911c <_printf_i+0xc8>
 8009114:	232d      	movs	r3, #45	; 0x2d
 8009116:	4276      	negs	r6, r6
 8009118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800911c:	485e      	ldr	r0, [pc, #376]	; (8009298 <_printf_i+0x244>)
 800911e:	230a      	movs	r3, #10
 8009120:	e019      	b.n	8009156 <_printf_i+0x102>
 8009122:	680e      	ldr	r6, [r1, #0]
 8009124:	602b      	str	r3, [r5, #0]
 8009126:	f010 0f40 	tst.w	r0, #64	; 0x40
 800912a:	bf18      	it	ne
 800912c:	b236      	sxthne	r6, r6
 800912e:	e7ef      	b.n	8009110 <_printf_i+0xbc>
 8009130:	682b      	ldr	r3, [r5, #0]
 8009132:	6820      	ldr	r0, [r4, #0]
 8009134:	1d19      	adds	r1, r3, #4
 8009136:	6029      	str	r1, [r5, #0]
 8009138:	0601      	lsls	r1, r0, #24
 800913a:	d501      	bpl.n	8009140 <_printf_i+0xec>
 800913c:	681e      	ldr	r6, [r3, #0]
 800913e:	e002      	b.n	8009146 <_printf_i+0xf2>
 8009140:	0646      	lsls	r6, r0, #25
 8009142:	d5fb      	bpl.n	800913c <_printf_i+0xe8>
 8009144:	881e      	ldrh	r6, [r3, #0]
 8009146:	4854      	ldr	r0, [pc, #336]	; (8009298 <_printf_i+0x244>)
 8009148:	2f6f      	cmp	r7, #111	; 0x6f
 800914a:	bf0c      	ite	eq
 800914c:	2308      	moveq	r3, #8
 800914e:	230a      	movne	r3, #10
 8009150:	2100      	movs	r1, #0
 8009152:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009156:	6865      	ldr	r5, [r4, #4]
 8009158:	60a5      	str	r5, [r4, #8]
 800915a:	2d00      	cmp	r5, #0
 800915c:	bfa2      	ittt	ge
 800915e:	6821      	ldrge	r1, [r4, #0]
 8009160:	f021 0104 	bicge.w	r1, r1, #4
 8009164:	6021      	strge	r1, [r4, #0]
 8009166:	b90e      	cbnz	r6, 800916c <_printf_i+0x118>
 8009168:	2d00      	cmp	r5, #0
 800916a:	d04d      	beq.n	8009208 <_printf_i+0x1b4>
 800916c:	4615      	mov	r5, r2
 800916e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009172:	fb03 6711 	mls	r7, r3, r1, r6
 8009176:	5dc7      	ldrb	r7, [r0, r7]
 8009178:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800917c:	4637      	mov	r7, r6
 800917e:	42bb      	cmp	r3, r7
 8009180:	460e      	mov	r6, r1
 8009182:	d9f4      	bls.n	800916e <_printf_i+0x11a>
 8009184:	2b08      	cmp	r3, #8
 8009186:	d10b      	bne.n	80091a0 <_printf_i+0x14c>
 8009188:	6823      	ldr	r3, [r4, #0]
 800918a:	07de      	lsls	r6, r3, #31
 800918c:	d508      	bpl.n	80091a0 <_printf_i+0x14c>
 800918e:	6923      	ldr	r3, [r4, #16]
 8009190:	6861      	ldr	r1, [r4, #4]
 8009192:	4299      	cmp	r1, r3
 8009194:	bfde      	ittt	le
 8009196:	2330      	movle	r3, #48	; 0x30
 8009198:	f805 3c01 	strble.w	r3, [r5, #-1]
 800919c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80091a0:	1b52      	subs	r2, r2, r5
 80091a2:	6122      	str	r2, [r4, #16]
 80091a4:	f8cd a000 	str.w	sl, [sp]
 80091a8:	464b      	mov	r3, r9
 80091aa:	aa03      	add	r2, sp, #12
 80091ac:	4621      	mov	r1, r4
 80091ae:	4640      	mov	r0, r8
 80091b0:	f7ff fee2 	bl	8008f78 <_printf_common>
 80091b4:	3001      	adds	r0, #1
 80091b6:	d14c      	bne.n	8009252 <_printf_i+0x1fe>
 80091b8:	f04f 30ff 	mov.w	r0, #4294967295
 80091bc:	b004      	add	sp, #16
 80091be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091c2:	4835      	ldr	r0, [pc, #212]	; (8009298 <_printf_i+0x244>)
 80091c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80091c8:	6829      	ldr	r1, [r5, #0]
 80091ca:	6823      	ldr	r3, [r4, #0]
 80091cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80091d0:	6029      	str	r1, [r5, #0]
 80091d2:	061d      	lsls	r5, r3, #24
 80091d4:	d514      	bpl.n	8009200 <_printf_i+0x1ac>
 80091d6:	07df      	lsls	r7, r3, #31
 80091d8:	bf44      	itt	mi
 80091da:	f043 0320 	orrmi.w	r3, r3, #32
 80091de:	6023      	strmi	r3, [r4, #0]
 80091e0:	b91e      	cbnz	r6, 80091ea <_printf_i+0x196>
 80091e2:	6823      	ldr	r3, [r4, #0]
 80091e4:	f023 0320 	bic.w	r3, r3, #32
 80091e8:	6023      	str	r3, [r4, #0]
 80091ea:	2310      	movs	r3, #16
 80091ec:	e7b0      	b.n	8009150 <_printf_i+0xfc>
 80091ee:	6823      	ldr	r3, [r4, #0]
 80091f0:	f043 0320 	orr.w	r3, r3, #32
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	2378      	movs	r3, #120	; 0x78
 80091f8:	4828      	ldr	r0, [pc, #160]	; (800929c <_printf_i+0x248>)
 80091fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091fe:	e7e3      	b.n	80091c8 <_printf_i+0x174>
 8009200:	0659      	lsls	r1, r3, #25
 8009202:	bf48      	it	mi
 8009204:	b2b6      	uxthmi	r6, r6
 8009206:	e7e6      	b.n	80091d6 <_printf_i+0x182>
 8009208:	4615      	mov	r5, r2
 800920a:	e7bb      	b.n	8009184 <_printf_i+0x130>
 800920c:	682b      	ldr	r3, [r5, #0]
 800920e:	6826      	ldr	r6, [r4, #0]
 8009210:	6961      	ldr	r1, [r4, #20]
 8009212:	1d18      	adds	r0, r3, #4
 8009214:	6028      	str	r0, [r5, #0]
 8009216:	0635      	lsls	r5, r6, #24
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	d501      	bpl.n	8009220 <_printf_i+0x1cc>
 800921c:	6019      	str	r1, [r3, #0]
 800921e:	e002      	b.n	8009226 <_printf_i+0x1d2>
 8009220:	0670      	lsls	r0, r6, #25
 8009222:	d5fb      	bpl.n	800921c <_printf_i+0x1c8>
 8009224:	8019      	strh	r1, [r3, #0]
 8009226:	2300      	movs	r3, #0
 8009228:	6123      	str	r3, [r4, #16]
 800922a:	4615      	mov	r5, r2
 800922c:	e7ba      	b.n	80091a4 <_printf_i+0x150>
 800922e:	682b      	ldr	r3, [r5, #0]
 8009230:	1d1a      	adds	r2, r3, #4
 8009232:	602a      	str	r2, [r5, #0]
 8009234:	681d      	ldr	r5, [r3, #0]
 8009236:	6862      	ldr	r2, [r4, #4]
 8009238:	2100      	movs	r1, #0
 800923a:	4628      	mov	r0, r5
 800923c:	f7f6 fff0 	bl	8000220 <memchr>
 8009240:	b108      	cbz	r0, 8009246 <_printf_i+0x1f2>
 8009242:	1b40      	subs	r0, r0, r5
 8009244:	6060      	str	r0, [r4, #4]
 8009246:	6863      	ldr	r3, [r4, #4]
 8009248:	6123      	str	r3, [r4, #16]
 800924a:	2300      	movs	r3, #0
 800924c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009250:	e7a8      	b.n	80091a4 <_printf_i+0x150>
 8009252:	6923      	ldr	r3, [r4, #16]
 8009254:	462a      	mov	r2, r5
 8009256:	4649      	mov	r1, r9
 8009258:	4640      	mov	r0, r8
 800925a:	47d0      	blx	sl
 800925c:	3001      	adds	r0, #1
 800925e:	d0ab      	beq.n	80091b8 <_printf_i+0x164>
 8009260:	6823      	ldr	r3, [r4, #0]
 8009262:	079b      	lsls	r3, r3, #30
 8009264:	d413      	bmi.n	800928e <_printf_i+0x23a>
 8009266:	68e0      	ldr	r0, [r4, #12]
 8009268:	9b03      	ldr	r3, [sp, #12]
 800926a:	4298      	cmp	r0, r3
 800926c:	bfb8      	it	lt
 800926e:	4618      	movlt	r0, r3
 8009270:	e7a4      	b.n	80091bc <_printf_i+0x168>
 8009272:	2301      	movs	r3, #1
 8009274:	4632      	mov	r2, r6
 8009276:	4649      	mov	r1, r9
 8009278:	4640      	mov	r0, r8
 800927a:	47d0      	blx	sl
 800927c:	3001      	adds	r0, #1
 800927e:	d09b      	beq.n	80091b8 <_printf_i+0x164>
 8009280:	3501      	adds	r5, #1
 8009282:	68e3      	ldr	r3, [r4, #12]
 8009284:	9903      	ldr	r1, [sp, #12]
 8009286:	1a5b      	subs	r3, r3, r1
 8009288:	42ab      	cmp	r3, r5
 800928a:	dcf2      	bgt.n	8009272 <_printf_i+0x21e>
 800928c:	e7eb      	b.n	8009266 <_printf_i+0x212>
 800928e:	2500      	movs	r5, #0
 8009290:	f104 0619 	add.w	r6, r4, #25
 8009294:	e7f5      	b.n	8009282 <_printf_i+0x22e>
 8009296:	bf00      	nop
 8009298:	0800b4ca 	.word	0x0800b4ca
 800929c:	0800b4db 	.word	0x0800b4db

080092a0 <iprintf>:
 80092a0:	b40f      	push	{r0, r1, r2, r3}
 80092a2:	4b0a      	ldr	r3, [pc, #40]	; (80092cc <iprintf+0x2c>)
 80092a4:	b513      	push	{r0, r1, r4, lr}
 80092a6:	681c      	ldr	r4, [r3, #0]
 80092a8:	b124      	cbz	r4, 80092b4 <iprintf+0x14>
 80092aa:	69a3      	ldr	r3, [r4, #24]
 80092ac:	b913      	cbnz	r3, 80092b4 <iprintf+0x14>
 80092ae:	4620      	mov	r0, r4
 80092b0:	f000 fee0 	bl	800a074 <__sinit>
 80092b4:	ab05      	add	r3, sp, #20
 80092b6:	9a04      	ldr	r2, [sp, #16]
 80092b8:	68a1      	ldr	r1, [r4, #8]
 80092ba:	9301      	str	r3, [sp, #4]
 80092bc:	4620      	mov	r0, r4
 80092be:	f001 fc39 	bl	800ab34 <_vfiprintf_r>
 80092c2:	b002      	add	sp, #8
 80092c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092c8:	b004      	add	sp, #16
 80092ca:	4770      	bx	lr
 80092cc:	20000160 	.word	0x20000160

080092d0 <quorem>:
 80092d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d4:	6903      	ldr	r3, [r0, #16]
 80092d6:	690c      	ldr	r4, [r1, #16]
 80092d8:	42a3      	cmp	r3, r4
 80092da:	4607      	mov	r7, r0
 80092dc:	f2c0 8081 	blt.w	80093e2 <quorem+0x112>
 80092e0:	3c01      	subs	r4, #1
 80092e2:	f101 0814 	add.w	r8, r1, #20
 80092e6:	f100 0514 	add.w	r5, r0, #20
 80092ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092ee:	9301      	str	r3, [sp, #4]
 80092f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80092f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092f8:	3301      	adds	r3, #1
 80092fa:	429a      	cmp	r2, r3
 80092fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009300:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009304:	fbb2 f6f3 	udiv	r6, r2, r3
 8009308:	d331      	bcc.n	800936e <quorem+0x9e>
 800930a:	f04f 0e00 	mov.w	lr, #0
 800930e:	4640      	mov	r0, r8
 8009310:	46ac      	mov	ip, r5
 8009312:	46f2      	mov	sl, lr
 8009314:	f850 2b04 	ldr.w	r2, [r0], #4
 8009318:	b293      	uxth	r3, r2
 800931a:	fb06 e303 	mla	r3, r6, r3, lr
 800931e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009322:	b29b      	uxth	r3, r3
 8009324:	ebaa 0303 	sub.w	r3, sl, r3
 8009328:	f8dc a000 	ldr.w	sl, [ip]
 800932c:	0c12      	lsrs	r2, r2, #16
 800932e:	fa13 f38a 	uxtah	r3, r3, sl
 8009332:	fb06 e202 	mla	r2, r6, r2, lr
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	9b00      	ldr	r3, [sp, #0]
 800933a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800933e:	b292      	uxth	r2, r2
 8009340:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009344:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009348:	f8bd 3000 	ldrh.w	r3, [sp]
 800934c:	4581      	cmp	r9, r0
 800934e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009352:	f84c 3b04 	str.w	r3, [ip], #4
 8009356:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800935a:	d2db      	bcs.n	8009314 <quorem+0x44>
 800935c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009360:	b92b      	cbnz	r3, 800936e <quorem+0x9e>
 8009362:	9b01      	ldr	r3, [sp, #4]
 8009364:	3b04      	subs	r3, #4
 8009366:	429d      	cmp	r5, r3
 8009368:	461a      	mov	r2, r3
 800936a:	d32e      	bcc.n	80093ca <quorem+0xfa>
 800936c:	613c      	str	r4, [r7, #16]
 800936e:	4638      	mov	r0, r7
 8009370:	f001 f9be 	bl	800a6f0 <__mcmp>
 8009374:	2800      	cmp	r0, #0
 8009376:	db24      	blt.n	80093c2 <quorem+0xf2>
 8009378:	3601      	adds	r6, #1
 800937a:	4628      	mov	r0, r5
 800937c:	f04f 0c00 	mov.w	ip, #0
 8009380:	f858 2b04 	ldr.w	r2, [r8], #4
 8009384:	f8d0 e000 	ldr.w	lr, [r0]
 8009388:	b293      	uxth	r3, r2
 800938a:	ebac 0303 	sub.w	r3, ip, r3
 800938e:	0c12      	lsrs	r2, r2, #16
 8009390:	fa13 f38e 	uxtah	r3, r3, lr
 8009394:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009398:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800939c:	b29b      	uxth	r3, r3
 800939e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093a2:	45c1      	cmp	r9, r8
 80093a4:	f840 3b04 	str.w	r3, [r0], #4
 80093a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80093ac:	d2e8      	bcs.n	8009380 <quorem+0xb0>
 80093ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093b6:	b922      	cbnz	r2, 80093c2 <quorem+0xf2>
 80093b8:	3b04      	subs	r3, #4
 80093ba:	429d      	cmp	r5, r3
 80093bc:	461a      	mov	r2, r3
 80093be:	d30a      	bcc.n	80093d6 <quorem+0x106>
 80093c0:	613c      	str	r4, [r7, #16]
 80093c2:	4630      	mov	r0, r6
 80093c4:	b003      	add	sp, #12
 80093c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ca:	6812      	ldr	r2, [r2, #0]
 80093cc:	3b04      	subs	r3, #4
 80093ce:	2a00      	cmp	r2, #0
 80093d0:	d1cc      	bne.n	800936c <quorem+0x9c>
 80093d2:	3c01      	subs	r4, #1
 80093d4:	e7c7      	b.n	8009366 <quorem+0x96>
 80093d6:	6812      	ldr	r2, [r2, #0]
 80093d8:	3b04      	subs	r3, #4
 80093da:	2a00      	cmp	r2, #0
 80093dc:	d1f0      	bne.n	80093c0 <quorem+0xf0>
 80093de:	3c01      	subs	r4, #1
 80093e0:	e7eb      	b.n	80093ba <quorem+0xea>
 80093e2:	2000      	movs	r0, #0
 80093e4:	e7ee      	b.n	80093c4 <quorem+0xf4>
	...

080093e8 <_dtoa_r>:
 80093e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ec:	ed2d 8b04 	vpush	{d8-d9}
 80093f0:	ec57 6b10 	vmov	r6, r7, d0
 80093f4:	b093      	sub	sp, #76	; 0x4c
 80093f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80093f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80093fc:	9106      	str	r1, [sp, #24]
 80093fe:	ee10 aa10 	vmov	sl, s0
 8009402:	4604      	mov	r4, r0
 8009404:	9209      	str	r2, [sp, #36]	; 0x24
 8009406:	930c      	str	r3, [sp, #48]	; 0x30
 8009408:	46bb      	mov	fp, r7
 800940a:	b975      	cbnz	r5, 800942a <_dtoa_r+0x42>
 800940c:	2010      	movs	r0, #16
 800940e:	f000 fed7 	bl	800a1c0 <malloc>
 8009412:	4602      	mov	r2, r0
 8009414:	6260      	str	r0, [r4, #36]	; 0x24
 8009416:	b920      	cbnz	r0, 8009422 <_dtoa_r+0x3a>
 8009418:	4ba7      	ldr	r3, [pc, #668]	; (80096b8 <_dtoa_r+0x2d0>)
 800941a:	21ea      	movs	r1, #234	; 0xea
 800941c:	48a7      	ldr	r0, [pc, #668]	; (80096bc <_dtoa_r+0x2d4>)
 800941e:	f001 fddf 	bl	800afe0 <__assert_func>
 8009422:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009426:	6005      	str	r5, [r0, #0]
 8009428:	60c5      	str	r5, [r0, #12]
 800942a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800942c:	6819      	ldr	r1, [r3, #0]
 800942e:	b151      	cbz	r1, 8009446 <_dtoa_r+0x5e>
 8009430:	685a      	ldr	r2, [r3, #4]
 8009432:	604a      	str	r2, [r1, #4]
 8009434:	2301      	movs	r3, #1
 8009436:	4093      	lsls	r3, r2
 8009438:	608b      	str	r3, [r1, #8]
 800943a:	4620      	mov	r0, r4
 800943c:	f000 ff16 	bl	800a26c <_Bfree>
 8009440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009442:	2200      	movs	r2, #0
 8009444:	601a      	str	r2, [r3, #0]
 8009446:	1e3b      	subs	r3, r7, #0
 8009448:	bfaa      	itet	ge
 800944a:	2300      	movge	r3, #0
 800944c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009450:	f8c8 3000 	strge.w	r3, [r8]
 8009454:	4b9a      	ldr	r3, [pc, #616]	; (80096c0 <_dtoa_r+0x2d8>)
 8009456:	bfbc      	itt	lt
 8009458:	2201      	movlt	r2, #1
 800945a:	f8c8 2000 	strlt.w	r2, [r8]
 800945e:	ea33 030b 	bics.w	r3, r3, fp
 8009462:	d11b      	bne.n	800949c <_dtoa_r+0xb4>
 8009464:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009466:	f242 730f 	movw	r3, #9999	; 0x270f
 800946a:	6013      	str	r3, [r2, #0]
 800946c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009470:	4333      	orrs	r3, r6
 8009472:	f000 8592 	beq.w	8009f9a <_dtoa_r+0xbb2>
 8009476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009478:	b963      	cbnz	r3, 8009494 <_dtoa_r+0xac>
 800947a:	4b92      	ldr	r3, [pc, #584]	; (80096c4 <_dtoa_r+0x2dc>)
 800947c:	e022      	b.n	80094c4 <_dtoa_r+0xdc>
 800947e:	4b92      	ldr	r3, [pc, #584]	; (80096c8 <_dtoa_r+0x2e0>)
 8009480:	9301      	str	r3, [sp, #4]
 8009482:	3308      	adds	r3, #8
 8009484:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009486:	6013      	str	r3, [r2, #0]
 8009488:	9801      	ldr	r0, [sp, #4]
 800948a:	b013      	add	sp, #76	; 0x4c
 800948c:	ecbd 8b04 	vpop	{d8-d9}
 8009490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009494:	4b8b      	ldr	r3, [pc, #556]	; (80096c4 <_dtoa_r+0x2dc>)
 8009496:	9301      	str	r3, [sp, #4]
 8009498:	3303      	adds	r3, #3
 800949a:	e7f3      	b.n	8009484 <_dtoa_r+0x9c>
 800949c:	2200      	movs	r2, #0
 800949e:	2300      	movs	r3, #0
 80094a0:	4650      	mov	r0, sl
 80094a2:	4659      	mov	r1, fp
 80094a4:	f7f7 fb30 	bl	8000b08 <__aeabi_dcmpeq>
 80094a8:	ec4b ab19 	vmov	d9, sl, fp
 80094ac:	4680      	mov	r8, r0
 80094ae:	b158      	cbz	r0, 80094c8 <_dtoa_r+0xe0>
 80094b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094b2:	2301      	movs	r3, #1
 80094b4:	6013      	str	r3, [r2, #0]
 80094b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 856b 	beq.w	8009f94 <_dtoa_r+0xbac>
 80094be:	4883      	ldr	r0, [pc, #524]	; (80096cc <_dtoa_r+0x2e4>)
 80094c0:	6018      	str	r0, [r3, #0]
 80094c2:	1e43      	subs	r3, r0, #1
 80094c4:	9301      	str	r3, [sp, #4]
 80094c6:	e7df      	b.n	8009488 <_dtoa_r+0xa0>
 80094c8:	ec4b ab10 	vmov	d0, sl, fp
 80094cc:	aa10      	add	r2, sp, #64	; 0x40
 80094ce:	a911      	add	r1, sp, #68	; 0x44
 80094d0:	4620      	mov	r0, r4
 80094d2:	f001 f9b3 	bl	800a83c <__d2b>
 80094d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80094da:	ee08 0a10 	vmov	s16, r0
 80094de:	2d00      	cmp	r5, #0
 80094e0:	f000 8084 	beq.w	80095ec <_dtoa_r+0x204>
 80094e4:	ee19 3a90 	vmov	r3, s19
 80094e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80094f0:	4656      	mov	r6, sl
 80094f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80094f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80094fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80094fe:	4b74      	ldr	r3, [pc, #464]	; (80096d0 <_dtoa_r+0x2e8>)
 8009500:	2200      	movs	r2, #0
 8009502:	4630      	mov	r0, r6
 8009504:	4639      	mov	r1, r7
 8009506:	f7f6 fedf 	bl	80002c8 <__aeabi_dsub>
 800950a:	a365      	add	r3, pc, #404	; (adr r3, 80096a0 <_dtoa_r+0x2b8>)
 800950c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009510:	f7f7 f892 	bl	8000638 <__aeabi_dmul>
 8009514:	a364      	add	r3, pc, #400	; (adr r3, 80096a8 <_dtoa_r+0x2c0>)
 8009516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951a:	f7f6 fed7 	bl	80002cc <__adddf3>
 800951e:	4606      	mov	r6, r0
 8009520:	4628      	mov	r0, r5
 8009522:	460f      	mov	r7, r1
 8009524:	f7f7 f81e 	bl	8000564 <__aeabi_i2d>
 8009528:	a361      	add	r3, pc, #388	; (adr r3, 80096b0 <_dtoa_r+0x2c8>)
 800952a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952e:	f7f7 f883 	bl	8000638 <__aeabi_dmul>
 8009532:	4602      	mov	r2, r0
 8009534:	460b      	mov	r3, r1
 8009536:	4630      	mov	r0, r6
 8009538:	4639      	mov	r1, r7
 800953a:	f7f6 fec7 	bl	80002cc <__adddf3>
 800953e:	4606      	mov	r6, r0
 8009540:	460f      	mov	r7, r1
 8009542:	f7f7 fb29 	bl	8000b98 <__aeabi_d2iz>
 8009546:	2200      	movs	r2, #0
 8009548:	9000      	str	r0, [sp, #0]
 800954a:	2300      	movs	r3, #0
 800954c:	4630      	mov	r0, r6
 800954e:	4639      	mov	r1, r7
 8009550:	f7f7 fae4 	bl	8000b1c <__aeabi_dcmplt>
 8009554:	b150      	cbz	r0, 800956c <_dtoa_r+0x184>
 8009556:	9800      	ldr	r0, [sp, #0]
 8009558:	f7f7 f804 	bl	8000564 <__aeabi_i2d>
 800955c:	4632      	mov	r2, r6
 800955e:	463b      	mov	r3, r7
 8009560:	f7f7 fad2 	bl	8000b08 <__aeabi_dcmpeq>
 8009564:	b910      	cbnz	r0, 800956c <_dtoa_r+0x184>
 8009566:	9b00      	ldr	r3, [sp, #0]
 8009568:	3b01      	subs	r3, #1
 800956a:	9300      	str	r3, [sp, #0]
 800956c:	9b00      	ldr	r3, [sp, #0]
 800956e:	2b16      	cmp	r3, #22
 8009570:	d85a      	bhi.n	8009628 <_dtoa_r+0x240>
 8009572:	9a00      	ldr	r2, [sp, #0]
 8009574:	4b57      	ldr	r3, [pc, #348]	; (80096d4 <_dtoa_r+0x2ec>)
 8009576:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800957a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957e:	ec51 0b19 	vmov	r0, r1, d9
 8009582:	f7f7 facb 	bl	8000b1c <__aeabi_dcmplt>
 8009586:	2800      	cmp	r0, #0
 8009588:	d050      	beq.n	800962c <_dtoa_r+0x244>
 800958a:	9b00      	ldr	r3, [sp, #0]
 800958c:	3b01      	subs	r3, #1
 800958e:	9300      	str	r3, [sp, #0]
 8009590:	2300      	movs	r3, #0
 8009592:	930b      	str	r3, [sp, #44]	; 0x2c
 8009594:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009596:	1b5d      	subs	r5, r3, r5
 8009598:	1e6b      	subs	r3, r5, #1
 800959a:	9305      	str	r3, [sp, #20]
 800959c:	bf45      	ittet	mi
 800959e:	f1c5 0301 	rsbmi	r3, r5, #1
 80095a2:	9304      	strmi	r3, [sp, #16]
 80095a4:	2300      	movpl	r3, #0
 80095a6:	2300      	movmi	r3, #0
 80095a8:	bf4c      	ite	mi
 80095aa:	9305      	strmi	r3, [sp, #20]
 80095ac:	9304      	strpl	r3, [sp, #16]
 80095ae:	9b00      	ldr	r3, [sp, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	db3d      	blt.n	8009630 <_dtoa_r+0x248>
 80095b4:	9b05      	ldr	r3, [sp, #20]
 80095b6:	9a00      	ldr	r2, [sp, #0]
 80095b8:	920a      	str	r2, [sp, #40]	; 0x28
 80095ba:	4413      	add	r3, r2
 80095bc:	9305      	str	r3, [sp, #20]
 80095be:	2300      	movs	r3, #0
 80095c0:	9307      	str	r3, [sp, #28]
 80095c2:	9b06      	ldr	r3, [sp, #24]
 80095c4:	2b09      	cmp	r3, #9
 80095c6:	f200 8089 	bhi.w	80096dc <_dtoa_r+0x2f4>
 80095ca:	2b05      	cmp	r3, #5
 80095cc:	bfc4      	itt	gt
 80095ce:	3b04      	subgt	r3, #4
 80095d0:	9306      	strgt	r3, [sp, #24]
 80095d2:	9b06      	ldr	r3, [sp, #24]
 80095d4:	f1a3 0302 	sub.w	r3, r3, #2
 80095d8:	bfcc      	ite	gt
 80095da:	2500      	movgt	r5, #0
 80095dc:	2501      	movle	r5, #1
 80095de:	2b03      	cmp	r3, #3
 80095e0:	f200 8087 	bhi.w	80096f2 <_dtoa_r+0x30a>
 80095e4:	e8df f003 	tbb	[pc, r3]
 80095e8:	59383a2d 	.word	0x59383a2d
 80095ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80095f0:	441d      	add	r5, r3
 80095f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80095f6:	2b20      	cmp	r3, #32
 80095f8:	bfc1      	itttt	gt
 80095fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80095fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009602:	fa0b f303 	lslgt.w	r3, fp, r3
 8009606:	fa26 f000 	lsrgt.w	r0, r6, r0
 800960a:	bfda      	itte	le
 800960c:	f1c3 0320 	rsble	r3, r3, #32
 8009610:	fa06 f003 	lslle.w	r0, r6, r3
 8009614:	4318      	orrgt	r0, r3
 8009616:	f7f6 ff95 	bl	8000544 <__aeabi_ui2d>
 800961a:	2301      	movs	r3, #1
 800961c:	4606      	mov	r6, r0
 800961e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009622:	3d01      	subs	r5, #1
 8009624:	930e      	str	r3, [sp, #56]	; 0x38
 8009626:	e76a      	b.n	80094fe <_dtoa_r+0x116>
 8009628:	2301      	movs	r3, #1
 800962a:	e7b2      	b.n	8009592 <_dtoa_r+0x1aa>
 800962c:	900b      	str	r0, [sp, #44]	; 0x2c
 800962e:	e7b1      	b.n	8009594 <_dtoa_r+0x1ac>
 8009630:	9b04      	ldr	r3, [sp, #16]
 8009632:	9a00      	ldr	r2, [sp, #0]
 8009634:	1a9b      	subs	r3, r3, r2
 8009636:	9304      	str	r3, [sp, #16]
 8009638:	4253      	negs	r3, r2
 800963a:	9307      	str	r3, [sp, #28]
 800963c:	2300      	movs	r3, #0
 800963e:	930a      	str	r3, [sp, #40]	; 0x28
 8009640:	e7bf      	b.n	80095c2 <_dtoa_r+0x1da>
 8009642:	2300      	movs	r3, #0
 8009644:	9308      	str	r3, [sp, #32]
 8009646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009648:	2b00      	cmp	r3, #0
 800964a:	dc55      	bgt.n	80096f8 <_dtoa_r+0x310>
 800964c:	2301      	movs	r3, #1
 800964e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009652:	461a      	mov	r2, r3
 8009654:	9209      	str	r2, [sp, #36]	; 0x24
 8009656:	e00c      	b.n	8009672 <_dtoa_r+0x28a>
 8009658:	2301      	movs	r3, #1
 800965a:	e7f3      	b.n	8009644 <_dtoa_r+0x25c>
 800965c:	2300      	movs	r3, #0
 800965e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009660:	9308      	str	r3, [sp, #32]
 8009662:	9b00      	ldr	r3, [sp, #0]
 8009664:	4413      	add	r3, r2
 8009666:	9302      	str	r3, [sp, #8]
 8009668:	3301      	adds	r3, #1
 800966a:	2b01      	cmp	r3, #1
 800966c:	9303      	str	r3, [sp, #12]
 800966e:	bfb8      	it	lt
 8009670:	2301      	movlt	r3, #1
 8009672:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009674:	2200      	movs	r2, #0
 8009676:	6042      	str	r2, [r0, #4]
 8009678:	2204      	movs	r2, #4
 800967a:	f102 0614 	add.w	r6, r2, #20
 800967e:	429e      	cmp	r6, r3
 8009680:	6841      	ldr	r1, [r0, #4]
 8009682:	d93d      	bls.n	8009700 <_dtoa_r+0x318>
 8009684:	4620      	mov	r0, r4
 8009686:	f000 fdb1 	bl	800a1ec <_Balloc>
 800968a:	9001      	str	r0, [sp, #4]
 800968c:	2800      	cmp	r0, #0
 800968e:	d13b      	bne.n	8009708 <_dtoa_r+0x320>
 8009690:	4b11      	ldr	r3, [pc, #68]	; (80096d8 <_dtoa_r+0x2f0>)
 8009692:	4602      	mov	r2, r0
 8009694:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009698:	e6c0      	b.n	800941c <_dtoa_r+0x34>
 800969a:	2301      	movs	r3, #1
 800969c:	e7df      	b.n	800965e <_dtoa_r+0x276>
 800969e:	bf00      	nop
 80096a0:	636f4361 	.word	0x636f4361
 80096a4:	3fd287a7 	.word	0x3fd287a7
 80096a8:	8b60c8b3 	.word	0x8b60c8b3
 80096ac:	3fc68a28 	.word	0x3fc68a28
 80096b0:	509f79fb 	.word	0x509f79fb
 80096b4:	3fd34413 	.word	0x3fd34413
 80096b8:	0800b4f9 	.word	0x0800b4f9
 80096bc:	0800b510 	.word	0x0800b510
 80096c0:	7ff00000 	.word	0x7ff00000
 80096c4:	0800b4f5 	.word	0x0800b4f5
 80096c8:	0800b4ec 	.word	0x0800b4ec
 80096cc:	0800b4c9 	.word	0x0800b4c9
 80096d0:	3ff80000 	.word	0x3ff80000
 80096d4:	0800b660 	.word	0x0800b660
 80096d8:	0800b56b 	.word	0x0800b56b
 80096dc:	2501      	movs	r5, #1
 80096de:	2300      	movs	r3, #0
 80096e0:	9306      	str	r3, [sp, #24]
 80096e2:	9508      	str	r5, [sp, #32]
 80096e4:	f04f 33ff 	mov.w	r3, #4294967295
 80096e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80096ec:	2200      	movs	r2, #0
 80096ee:	2312      	movs	r3, #18
 80096f0:	e7b0      	b.n	8009654 <_dtoa_r+0x26c>
 80096f2:	2301      	movs	r3, #1
 80096f4:	9308      	str	r3, [sp, #32]
 80096f6:	e7f5      	b.n	80096e4 <_dtoa_r+0x2fc>
 80096f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80096fe:	e7b8      	b.n	8009672 <_dtoa_r+0x28a>
 8009700:	3101      	adds	r1, #1
 8009702:	6041      	str	r1, [r0, #4]
 8009704:	0052      	lsls	r2, r2, #1
 8009706:	e7b8      	b.n	800967a <_dtoa_r+0x292>
 8009708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800970a:	9a01      	ldr	r2, [sp, #4]
 800970c:	601a      	str	r2, [r3, #0]
 800970e:	9b03      	ldr	r3, [sp, #12]
 8009710:	2b0e      	cmp	r3, #14
 8009712:	f200 809d 	bhi.w	8009850 <_dtoa_r+0x468>
 8009716:	2d00      	cmp	r5, #0
 8009718:	f000 809a 	beq.w	8009850 <_dtoa_r+0x468>
 800971c:	9b00      	ldr	r3, [sp, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	dd32      	ble.n	8009788 <_dtoa_r+0x3a0>
 8009722:	4ab7      	ldr	r2, [pc, #732]	; (8009a00 <_dtoa_r+0x618>)
 8009724:	f003 030f 	and.w	r3, r3, #15
 8009728:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800972c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009730:	9b00      	ldr	r3, [sp, #0]
 8009732:	05d8      	lsls	r0, r3, #23
 8009734:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009738:	d516      	bpl.n	8009768 <_dtoa_r+0x380>
 800973a:	4bb2      	ldr	r3, [pc, #712]	; (8009a04 <_dtoa_r+0x61c>)
 800973c:	ec51 0b19 	vmov	r0, r1, d9
 8009740:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009744:	f7f7 f8a2 	bl	800088c <__aeabi_ddiv>
 8009748:	f007 070f 	and.w	r7, r7, #15
 800974c:	4682      	mov	sl, r0
 800974e:	468b      	mov	fp, r1
 8009750:	2503      	movs	r5, #3
 8009752:	4eac      	ldr	r6, [pc, #688]	; (8009a04 <_dtoa_r+0x61c>)
 8009754:	b957      	cbnz	r7, 800976c <_dtoa_r+0x384>
 8009756:	4642      	mov	r2, r8
 8009758:	464b      	mov	r3, r9
 800975a:	4650      	mov	r0, sl
 800975c:	4659      	mov	r1, fp
 800975e:	f7f7 f895 	bl	800088c <__aeabi_ddiv>
 8009762:	4682      	mov	sl, r0
 8009764:	468b      	mov	fp, r1
 8009766:	e028      	b.n	80097ba <_dtoa_r+0x3d2>
 8009768:	2502      	movs	r5, #2
 800976a:	e7f2      	b.n	8009752 <_dtoa_r+0x36a>
 800976c:	07f9      	lsls	r1, r7, #31
 800976e:	d508      	bpl.n	8009782 <_dtoa_r+0x39a>
 8009770:	4640      	mov	r0, r8
 8009772:	4649      	mov	r1, r9
 8009774:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009778:	f7f6 ff5e 	bl	8000638 <__aeabi_dmul>
 800977c:	3501      	adds	r5, #1
 800977e:	4680      	mov	r8, r0
 8009780:	4689      	mov	r9, r1
 8009782:	107f      	asrs	r7, r7, #1
 8009784:	3608      	adds	r6, #8
 8009786:	e7e5      	b.n	8009754 <_dtoa_r+0x36c>
 8009788:	f000 809b 	beq.w	80098c2 <_dtoa_r+0x4da>
 800978c:	9b00      	ldr	r3, [sp, #0]
 800978e:	4f9d      	ldr	r7, [pc, #628]	; (8009a04 <_dtoa_r+0x61c>)
 8009790:	425e      	negs	r6, r3
 8009792:	4b9b      	ldr	r3, [pc, #620]	; (8009a00 <_dtoa_r+0x618>)
 8009794:	f006 020f 	and.w	r2, r6, #15
 8009798:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800979c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a0:	ec51 0b19 	vmov	r0, r1, d9
 80097a4:	f7f6 ff48 	bl	8000638 <__aeabi_dmul>
 80097a8:	1136      	asrs	r6, r6, #4
 80097aa:	4682      	mov	sl, r0
 80097ac:	468b      	mov	fp, r1
 80097ae:	2300      	movs	r3, #0
 80097b0:	2502      	movs	r5, #2
 80097b2:	2e00      	cmp	r6, #0
 80097b4:	d17a      	bne.n	80098ac <_dtoa_r+0x4c4>
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1d3      	bne.n	8009762 <_dtoa_r+0x37a>
 80097ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f000 8082 	beq.w	80098c6 <_dtoa_r+0x4de>
 80097c2:	4b91      	ldr	r3, [pc, #580]	; (8009a08 <_dtoa_r+0x620>)
 80097c4:	2200      	movs	r2, #0
 80097c6:	4650      	mov	r0, sl
 80097c8:	4659      	mov	r1, fp
 80097ca:	f7f7 f9a7 	bl	8000b1c <__aeabi_dcmplt>
 80097ce:	2800      	cmp	r0, #0
 80097d0:	d079      	beq.n	80098c6 <_dtoa_r+0x4de>
 80097d2:	9b03      	ldr	r3, [sp, #12]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d076      	beq.n	80098c6 <_dtoa_r+0x4de>
 80097d8:	9b02      	ldr	r3, [sp, #8]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	dd36      	ble.n	800984c <_dtoa_r+0x464>
 80097de:	9b00      	ldr	r3, [sp, #0]
 80097e0:	4650      	mov	r0, sl
 80097e2:	4659      	mov	r1, fp
 80097e4:	1e5f      	subs	r7, r3, #1
 80097e6:	2200      	movs	r2, #0
 80097e8:	4b88      	ldr	r3, [pc, #544]	; (8009a0c <_dtoa_r+0x624>)
 80097ea:	f7f6 ff25 	bl	8000638 <__aeabi_dmul>
 80097ee:	9e02      	ldr	r6, [sp, #8]
 80097f0:	4682      	mov	sl, r0
 80097f2:	468b      	mov	fp, r1
 80097f4:	3501      	adds	r5, #1
 80097f6:	4628      	mov	r0, r5
 80097f8:	f7f6 feb4 	bl	8000564 <__aeabi_i2d>
 80097fc:	4652      	mov	r2, sl
 80097fe:	465b      	mov	r3, fp
 8009800:	f7f6 ff1a 	bl	8000638 <__aeabi_dmul>
 8009804:	4b82      	ldr	r3, [pc, #520]	; (8009a10 <_dtoa_r+0x628>)
 8009806:	2200      	movs	r2, #0
 8009808:	f7f6 fd60 	bl	80002cc <__adddf3>
 800980c:	46d0      	mov	r8, sl
 800980e:	46d9      	mov	r9, fp
 8009810:	4682      	mov	sl, r0
 8009812:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009816:	2e00      	cmp	r6, #0
 8009818:	d158      	bne.n	80098cc <_dtoa_r+0x4e4>
 800981a:	4b7e      	ldr	r3, [pc, #504]	; (8009a14 <_dtoa_r+0x62c>)
 800981c:	2200      	movs	r2, #0
 800981e:	4640      	mov	r0, r8
 8009820:	4649      	mov	r1, r9
 8009822:	f7f6 fd51 	bl	80002c8 <__aeabi_dsub>
 8009826:	4652      	mov	r2, sl
 8009828:	465b      	mov	r3, fp
 800982a:	4680      	mov	r8, r0
 800982c:	4689      	mov	r9, r1
 800982e:	f7f7 f993 	bl	8000b58 <__aeabi_dcmpgt>
 8009832:	2800      	cmp	r0, #0
 8009834:	f040 8295 	bne.w	8009d62 <_dtoa_r+0x97a>
 8009838:	4652      	mov	r2, sl
 800983a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800983e:	4640      	mov	r0, r8
 8009840:	4649      	mov	r1, r9
 8009842:	f7f7 f96b 	bl	8000b1c <__aeabi_dcmplt>
 8009846:	2800      	cmp	r0, #0
 8009848:	f040 8289 	bne.w	8009d5e <_dtoa_r+0x976>
 800984c:	ec5b ab19 	vmov	sl, fp, d9
 8009850:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009852:	2b00      	cmp	r3, #0
 8009854:	f2c0 8148 	blt.w	8009ae8 <_dtoa_r+0x700>
 8009858:	9a00      	ldr	r2, [sp, #0]
 800985a:	2a0e      	cmp	r2, #14
 800985c:	f300 8144 	bgt.w	8009ae8 <_dtoa_r+0x700>
 8009860:	4b67      	ldr	r3, [pc, #412]	; (8009a00 <_dtoa_r+0x618>)
 8009862:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009866:	e9d3 8900 	ldrd	r8, r9, [r3]
 800986a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800986c:	2b00      	cmp	r3, #0
 800986e:	f280 80d5 	bge.w	8009a1c <_dtoa_r+0x634>
 8009872:	9b03      	ldr	r3, [sp, #12]
 8009874:	2b00      	cmp	r3, #0
 8009876:	f300 80d1 	bgt.w	8009a1c <_dtoa_r+0x634>
 800987a:	f040 826f 	bne.w	8009d5c <_dtoa_r+0x974>
 800987e:	4b65      	ldr	r3, [pc, #404]	; (8009a14 <_dtoa_r+0x62c>)
 8009880:	2200      	movs	r2, #0
 8009882:	4640      	mov	r0, r8
 8009884:	4649      	mov	r1, r9
 8009886:	f7f6 fed7 	bl	8000638 <__aeabi_dmul>
 800988a:	4652      	mov	r2, sl
 800988c:	465b      	mov	r3, fp
 800988e:	f7f7 f959 	bl	8000b44 <__aeabi_dcmpge>
 8009892:	9e03      	ldr	r6, [sp, #12]
 8009894:	4637      	mov	r7, r6
 8009896:	2800      	cmp	r0, #0
 8009898:	f040 8245 	bne.w	8009d26 <_dtoa_r+0x93e>
 800989c:	9d01      	ldr	r5, [sp, #4]
 800989e:	2331      	movs	r3, #49	; 0x31
 80098a0:	f805 3b01 	strb.w	r3, [r5], #1
 80098a4:	9b00      	ldr	r3, [sp, #0]
 80098a6:	3301      	adds	r3, #1
 80098a8:	9300      	str	r3, [sp, #0]
 80098aa:	e240      	b.n	8009d2e <_dtoa_r+0x946>
 80098ac:	07f2      	lsls	r2, r6, #31
 80098ae:	d505      	bpl.n	80098bc <_dtoa_r+0x4d4>
 80098b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098b4:	f7f6 fec0 	bl	8000638 <__aeabi_dmul>
 80098b8:	3501      	adds	r5, #1
 80098ba:	2301      	movs	r3, #1
 80098bc:	1076      	asrs	r6, r6, #1
 80098be:	3708      	adds	r7, #8
 80098c0:	e777      	b.n	80097b2 <_dtoa_r+0x3ca>
 80098c2:	2502      	movs	r5, #2
 80098c4:	e779      	b.n	80097ba <_dtoa_r+0x3d2>
 80098c6:	9f00      	ldr	r7, [sp, #0]
 80098c8:	9e03      	ldr	r6, [sp, #12]
 80098ca:	e794      	b.n	80097f6 <_dtoa_r+0x40e>
 80098cc:	9901      	ldr	r1, [sp, #4]
 80098ce:	4b4c      	ldr	r3, [pc, #304]	; (8009a00 <_dtoa_r+0x618>)
 80098d0:	4431      	add	r1, r6
 80098d2:	910d      	str	r1, [sp, #52]	; 0x34
 80098d4:	9908      	ldr	r1, [sp, #32]
 80098d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80098da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80098de:	2900      	cmp	r1, #0
 80098e0:	d043      	beq.n	800996a <_dtoa_r+0x582>
 80098e2:	494d      	ldr	r1, [pc, #308]	; (8009a18 <_dtoa_r+0x630>)
 80098e4:	2000      	movs	r0, #0
 80098e6:	f7f6 ffd1 	bl	800088c <__aeabi_ddiv>
 80098ea:	4652      	mov	r2, sl
 80098ec:	465b      	mov	r3, fp
 80098ee:	f7f6 fceb 	bl	80002c8 <__aeabi_dsub>
 80098f2:	9d01      	ldr	r5, [sp, #4]
 80098f4:	4682      	mov	sl, r0
 80098f6:	468b      	mov	fp, r1
 80098f8:	4649      	mov	r1, r9
 80098fa:	4640      	mov	r0, r8
 80098fc:	f7f7 f94c 	bl	8000b98 <__aeabi_d2iz>
 8009900:	4606      	mov	r6, r0
 8009902:	f7f6 fe2f 	bl	8000564 <__aeabi_i2d>
 8009906:	4602      	mov	r2, r0
 8009908:	460b      	mov	r3, r1
 800990a:	4640      	mov	r0, r8
 800990c:	4649      	mov	r1, r9
 800990e:	f7f6 fcdb 	bl	80002c8 <__aeabi_dsub>
 8009912:	3630      	adds	r6, #48	; 0x30
 8009914:	f805 6b01 	strb.w	r6, [r5], #1
 8009918:	4652      	mov	r2, sl
 800991a:	465b      	mov	r3, fp
 800991c:	4680      	mov	r8, r0
 800991e:	4689      	mov	r9, r1
 8009920:	f7f7 f8fc 	bl	8000b1c <__aeabi_dcmplt>
 8009924:	2800      	cmp	r0, #0
 8009926:	d163      	bne.n	80099f0 <_dtoa_r+0x608>
 8009928:	4642      	mov	r2, r8
 800992a:	464b      	mov	r3, r9
 800992c:	4936      	ldr	r1, [pc, #216]	; (8009a08 <_dtoa_r+0x620>)
 800992e:	2000      	movs	r0, #0
 8009930:	f7f6 fcca 	bl	80002c8 <__aeabi_dsub>
 8009934:	4652      	mov	r2, sl
 8009936:	465b      	mov	r3, fp
 8009938:	f7f7 f8f0 	bl	8000b1c <__aeabi_dcmplt>
 800993c:	2800      	cmp	r0, #0
 800993e:	f040 80b5 	bne.w	8009aac <_dtoa_r+0x6c4>
 8009942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009944:	429d      	cmp	r5, r3
 8009946:	d081      	beq.n	800984c <_dtoa_r+0x464>
 8009948:	4b30      	ldr	r3, [pc, #192]	; (8009a0c <_dtoa_r+0x624>)
 800994a:	2200      	movs	r2, #0
 800994c:	4650      	mov	r0, sl
 800994e:	4659      	mov	r1, fp
 8009950:	f7f6 fe72 	bl	8000638 <__aeabi_dmul>
 8009954:	4b2d      	ldr	r3, [pc, #180]	; (8009a0c <_dtoa_r+0x624>)
 8009956:	4682      	mov	sl, r0
 8009958:	468b      	mov	fp, r1
 800995a:	4640      	mov	r0, r8
 800995c:	4649      	mov	r1, r9
 800995e:	2200      	movs	r2, #0
 8009960:	f7f6 fe6a 	bl	8000638 <__aeabi_dmul>
 8009964:	4680      	mov	r8, r0
 8009966:	4689      	mov	r9, r1
 8009968:	e7c6      	b.n	80098f8 <_dtoa_r+0x510>
 800996a:	4650      	mov	r0, sl
 800996c:	4659      	mov	r1, fp
 800996e:	f7f6 fe63 	bl	8000638 <__aeabi_dmul>
 8009972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009974:	9d01      	ldr	r5, [sp, #4]
 8009976:	930f      	str	r3, [sp, #60]	; 0x3c
 8009978:	4682      	mov	sl, r0
 800997a:	468b      	mov	fp, r1
 800997c:	4649      	mov	r1, r9
 800997e:	4640      	mov	r0, r8
 8009980:	f7f7 f90a 	bl	8000b98 <__aeabi_d2iz>
 8009984:	4606      	mov	r6, r0
 8009986:	f7f6 fded 	bl	8000564 <__aeabi_i2d>
 800998a:	3630      	adds	r6, #48	; 0x30
 800998c:	4602      	mov	r2, r0
 800998e:	460b      	mov	r3, r1
 8009990:	4640      	mov	r0, r8
 8009992:	4649      	mov	r1, r9
 8009994:	f7f6 fc98 	bl	80002c8 <__aeabi_dsub>
 8009998:	f805 6b01 	strb.w	r6, [r5], #1
 800999c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800999e:	429d      	cmp	r5, r3
 80099a0:	4680      	mov	r8, r0
 80099a2:	4689      	mov	r9, r1
 80099a4:	f04f 0200 	mov.w	r2, #0
 80099a8:	d124      	bne.n	80099f4 <_dtoa_r+0x60c>
 80099aa:	4b1b      	ldr	r3, [pc, #108]	; (8009a18 <_dtoa_r+0x630>)
 80099ac:	4650      	mov	r0, sl
 80099ae:	4659      	mov	r1, fp
 80099b0:	f7f6 fc8c 	bl	80002cc <__adddf3>
 80099b4:	4602      	mov	r2, r0
 80099b6:	460b      	mov	r3, r1
 80099b8:	4640      	mov	r0, r8
 80099ba:	4649      	mov	r1, r9
 80099bc:	f7f7 f8cc 	bl	8000b58 <__aeabi_dcmpgt>
 80099c0:	2800      	cmp	r0, #0
 80099c2:	d173      	bne.n	8009aac <_dtoa_r+0x6c4>
 80099c4:	4652      	mov	r2, sl
 80099c6:	465b      	mov	r3, fp
 80099c8:	4913      	ldr	r1, [pc, #76]	; (8009a18 <_dtoa_r+0x630>)
 80099ca:	2000      	movs	r0, #0
 80099cc:	f7f6 fc7c 	bl	80002c8 <__aeabi_dsub>
 80099d0:	4602      	mov	r2, r0
 80099d2:	460b      	mov	r3, r1
 80099d4:	4640      	mov	r0, r8
 80099d6:	4649      	mov	r1, r9
 80099d8:	f7f7 f8a0 	bl	8000b1c <__aeabi_dcmplt>
 80099dc:	2800      	cmp	r0, #0
 80099de:	f43f af35 	beq.w	800984c <_dtoa_r+0x464>
 80099e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80099e4:	1e6b      	subs	r3, r5, #1
 80099e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80099e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80099ec:	2b30      	cmp	r3, #48	; 0x30
 80099ee:	d0f8      	beq.n	80099e2 <_dtoa_r+0x5fa>
 80099f0:	9700      	str	r7, [sp, #0]
 80099f2:	e049      	b.n	8009a88 <_dtoa_r+0x6a0>
 80099f4:	4b05      	ldr	r3, [pc, #20]	; (8009a0c <_dtoa_r+0x624>)
 80099f6:	f7f6 fe1f 	bl	8000638 <__aeabi_dmul>
 80099fa:	4680      	mov	r8, r0
 80099fc:	4689      	mov	r9, r1
 80099fe:	e7bd      	b.n	800997c <_dtoa_r+0x594>
 8009a00:	0800b660 	.word	0x0800b660
 8009a04:	0800b638 	.word	0x0800b638
 8009a08:	3ff00000 	.word	0x3ff00000
 8009a0c:	40240000 	.word	0x40240000
 8009a10:	401c0000 	.word	0x401c0000
 8009a14:	40140000 	.word	0x40140000
 8009a18:	3fe00000 	.word	0x3fe00000
 8009a1c:	9d01      	ldr	r5, [sp, #4]
 8009a1e:	4656      	mov	r6, sl
 8009a20:	465f      	mov	r7, fp
 8009a22:	4642      	mov	r2, r8
 8009a24:	464b      	mov	r3, r9
 8009a26:	4630      	mov	r0, r6
 8009a28:	4639      	mov	r1, r7
 8009a2a:	f7f6 ff2f 	bl	800088c <__aeabi_ddiv>
 8009a2e:	f7f7 f8b3 	bl	8000b98 <__aeabi_d2iz>
 8009a32:	4682      	mov	sl, r0
 8009a34:	f7f6 fd96 	bl	8000564 <__aeabi_i2d>
 8009a38:	4642      	mov	r2, r8
 8009a3a:	464b      	mov	r3, r9
 8009a3c:	f7f6 fdfc 	bl	8000638 <__aeabi_dmul>
 8009a40:	4602      	mov	r2, r0
 8009a42:	460b      	mov	r3, r1
 8009a44:	4630      	mov	r0, r6
 8009a46:	4639      	mov	r1, r7
 8009a48:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009a4c:	f7f6 fc3c 	bl	80002c8 <__aeabi_dsub>
 8009a50:	f805 6b01 	strb.w	r6, [r5], #1
 8009a54:	9e01      	ldr	r6, [sp, #4]
 8009a56:	9f03      	ldr	r7, [sp, #12]
 8009a58:	1bae      	subs	r6, r5, r6
 8009a5a:	42b7      	cmp	r7, r6
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	460b      	mov	r3, r1
 8009a60:	d135      	bne.n	8009ace <_dtoa_r+0x6e6>
 8009a62:	f7f6 fc33 	bl	80002cc <__adddf3>
 8009a66:	4642      	mov	r2, r8
 8009a68:	464b      	mov	r3, r9
 8009a6a:	4606      	mov	r6, r0
 8009a6c:	460f      	mov	r7, r1
 8009a6e:	f7f7 f873 	bl	8000b58 <__aeabi_dcmpgt>
 8009a72:	b9d0      	cbnz	r0, 8009aaa <_dtoa_r+0x6c2>
 8009a74:	4642      	mov	r2, r8
 8009a76:	464b      	mov	r3, r9
 8009a78:	4630      	mov	r0, r6
 8009a7a:	4639      	mov	r1, r7
 8009a7c:	f7f7 f844 	bl	8000b08 <__aeabi_dcmpeq>
 8009a80:	b110      	cbz	r0, 8009a88 <_dtoa_r+0x6a0>
 8009a82:	f01a 0f01 	tst.w	sl, #1
 8009a86:	d110      	bne.n	8009aaa <_dtoa_r+0x6c2>
 8009a88:	4620      	mov	r0, r4
 8009a8a:	ee18 1a10 	vmov	r1, s16
 8009a8e:	f000 fbed 	bl	800a26c <_Bfree>
 8009a92:	2300      	movs	r3, #0
 8009a94:	9800      	ldr	r0, [sp, #0]
 8009a96:	702b      	strb	r3, [r5, #0]
 8009a98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a9a:	3001      	adds	r0, #1
 8009a9c:	6018      	str	r0, [r3, #0]
 8009a9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	f43f acf1 	beq.w	8009488 <_dtoa_r+0xa0>
 8009aa6:	601d      	str	r5, [r3, #0]
 8009aa8:	e4ee      	b.n	8009488 <_dtoa_r+0xa0>
 8009aaa:	9f00      	ldr	r7, [sp, #0]
 8009aac:	462b      	mov	r3, r5
 8009aae:	461d      	mov	r5, r3
 8009ab0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ab4:	2a39      	cmp	r2, #57	; 0x39
 8009ab6:	d106      	bne.n	8009ac6 <_dtoa_r+0x6de>
 8009ab8:	9a01      	ldr	r2, [sp, #4]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d1f7      	bne.n	8009aae <_dtoa_r+0x6c6>
 8009abe:	9901      	ldr	r1, [sp, #4]
 8009ac0:	2230      	movs	r2, #48	; 0x30
 8009ac2:	3701      	adds	r7, #1
 8009ac4:	700a      	strb	r2, [r1, #0]
 8009ac6:	781a      	ldrb	r2, [r3, #0]
 8009ac8:	3201      	adds	r2, #1
 8009aca:	701a      	strb	r2, [r3, #0]
 8009acc:	e790      	b.n	80099f0 <_dtoa_r+0x608>
 8009ace:	4ba6      	ldr	r3, [pc, #664]	; (8009d68 <_dtoa_r+0x980>)
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f7f6 fdb1 	bl	8000638 <__aeabi_dmul>
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	2300      	movs	r3, #0
 8009ada:	4606      	mov	r6, r0
 8009adc:	460f      	mov	r7, r1
 8009ade:	f7f7 f813 	bl	8000b08 <__aeabi_dcmpeq>
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	d09d      	beq.n	8009a22 <_dtoa_r+0x63a>
 8009ae6:	e7cf      	b.n	8009a88 <_dtoa_r+0x6a0>
 8009ae8:	9a08      	ldr	r2, [sp, #32]
 8009aea:	2a00      	cmp	r2, #0
 8009aec:	f000 80d7 	beq.w	8009c9e <_dtoa_r+0x8b6>
 8009af0:	9a06      	ldr	r2, [sp, #24]
 8009af2:	2a01      	cmp	r2, #1
 8009af4:	f300 80ba 	bgt.w	8009c6c <_dtoa_r+0x884>
 8009af8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009afa:	2a00      	cmp	r2, #0
 8009afc:	f000 80b2 	beq.w	8009c64 <_dtoa_r+0x87c>
 8009b00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009b04:	9e07      	ldr	r6, [sp, #28]
 8009b06:	9d04      	ldr	r5, [sp, #16]
 8009b08:	9a04      	ldr	r2, [sp, #16]
 8009b0a:	441a      	add	r2, r3
 8009b0c:	9204      	str	r2, [sp, #16]
 8009b0e:	9a05      	ldr	r2, [sp, #20]
 8009b10:	2101      	movs	r1, #1
 8009b12:	441a      	add	r2, r3
 8009b14:	4620      	mov	r0, r4
 8009b16:	9205      	str	r2, [sp, #20]
 8009b18:	f000 fc60 	bl	800a3dc <__i2b>
 8009b1c:	4607      	mov	r7, r0
 8009b1e:	2d00      	cmp	r5, #0
 8009b20:	dd0c      	ble.n	8009b3c <_dtoa_r+0x754>
 8009b22:	9b05      	ldr	r3, [sp, #20]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	dd09      	ble.n	8009b3c <_dtoa_r+0x754>
 8009b28:	42ab      	cmp	r3, r5
 8009b2a:	9a04      	ldr	r2, [sp, #16]
 8009b2c:	bfa8      	it	ge
 8009b2e:	462b      	movge	r3, r5
 8009b30:	1ad2      	subs	r2, r2, r3
 8009b32:	9204      	str	r2, [sp, #16]
 8009b34:	9a05      	ldr	r2, [sp, #20]
 8009b36:	1aed      	subs	r5, r5, r3
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	9305      	str	r3, [sp, #20]
 8009b3c:	9b07      	ldr	r3, [sp, #28]
 8009b3e:	b31b      	cbz	r3, 8009b88 <_dtoa_r+0x7a0>
 8009b40:	9b08      	ldr	r3, [sp, #32]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f000 80af 	beq.w	8009ca6 <_dtoa_r+0x8be>
 8009b48:	2e00      	cmp	r6, #0
 8009b4a:	dd13      	ble.n	8009b74 <_dtoa_r+0x78c>
 8009b4c:	4639      	mov	r1, r7
 8009b4e:	4632      	mov	r2, r6
 8009b50:	4620      	mov	r0, r4
 8009b52:	f000 fd03 	bl	800a55c <__pow5mult>
 8009b56:	ee18 2a10 	vmov	r2, s16
 8009b5a:	4601      	mov	r1, r0
 8009b5c:	4607      	mov	r7, r0
 8009b5e:	4620      	mov	r0, r4
 8009b60:	f000 fc52 	bl	800a408 <__multiply>
 8009b64:	ee18 1a10 	vmov	r1, s16
 8009b68:	4680      	mov	r8, r0
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	f000 fb7e 	bl	800a26c <_Bfree>
 8009b70:	ee08 8a10 	vmov	s16, r8
 8009b74:	9b07      	ldr	r3, [sp, #28]
 8009b76:	1b9a      	subs	r2, r3, r6
 8009b78:	d006      	beq.n	8009b88 <_dtoa_r+0x7a0>
 8009b7a:	ee18 1a10 	vmov	r1, s16
 8009b7e:	4620      	mov	r0, r4
 8009b80:	f000 fcec 	bl	800a55c <__pow5mult>
 8009b84:	ee08 0a10 	vmov	s16, r0
 8009b88:	2101      	movs	r1, #1
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f000 fc26 	bl	800a3dc <__i2b>
 8009b90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	4606      	mov	r6, r0
 8009b96:	f340 8088 	ble.w	8009caa <_dtoa_r+0x8c2>
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	4601      	mov	r1, r0
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	f000 fcdc 	bl	800a55c <__pow5mult>
 8009ba4:	9b06      	ldr	r3, [sp, #24]
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	4606      	mov	r6, r0
 8009baa:	f340 8081 	ble.w	8009cb0 <_dtoa_r+0x8c8>
 8009bae:	f04f 0800 	mov.w	r8, #0
 8009bb2:	6933      	ldr	r3, [r6, #16]
 8009bb4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009bb8:	6918      	ldr	r0, [r3, #16]
 8009bba:	f000 fbbf 	bl	800a33c <__hi0bits>
 8009bbe:	f1c0 0020 	rsb	r0, r0, #32
 8009bc2:	9b05      	ldr	r3, [sp, #20]
 8009bc4:	4418      	add	r0, r3
 8009bc6:	f010 001f 	ands.w	r0, r0, #31
 8009bca:	f000 8092 	beq.w	8009cf2 <_dtoa_r+0x90a>
 8009bce:	f1c0 0320 	rsb	r3, r0, #32
 8009bd2:	2b04      	cmp	r3, #4
 8009bd4:	f340 808a 	ble.w	8009cec <_dtoa_r+0x904>
 8009bd8:	f1c0 001c 	rsb	r0, r0, #28
 8009bdc:	9b04      	ldr	r3, [sp, #16]
 8009bde:	4403      	add	r3, r0
 8009be0:	9304      	str	r3, [sp, #16]
 8009be2:	9b05      	ldr	r3, [sp, #20]
 8009be4:	4403      	add	r3, r0
 8009be6:	4405      	add	r5, r0
 8009be8:	9305      	str	r3, [sp, #20]
 8009bea:	9b04      	ldr	r3, [sp, #16]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	dd07      	ble.n	8009c00 <_dtoa_r+0x818>
 8009bf0:	ee18 1a10 	vmov	r1, s16
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	f000 fd0a 	bl	800a610 <__lshift>
 8009bfc:	ee08 0a10 	vmov	s16, r0
 8009c00:	9b05      	ldr	r3, [sp, #20]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	dd05      	ble.n	8009c12 <_dtoa_r+0x82a>
 8009c06:	4631      	mov	r1, r6
 8009c08:	461a      	mov	r2, r3
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f000 fd00 	bl	800a610 <__lshift>
 8009c10:	4606      	mov	r6, r0
 8009c12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d06e      	beq.n	8009cf6 <_dtoa_r+0x90e>
 8009c18:	ee18 0a10 	vmov	r0, s16
 8009c1c:	4631      	mov	r1, r6
 8009c1e:	f000 fd67 	bl	800a6f0 <__mcmp>
 8009c22:	2800      	cmp	r0, #0
 8009c24:	da67      	bge.n	8009cf6 <_dtoa_r+0x90e>
 8009c26:	9b00      	ldr	r3, [sp, #0]
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	ee18 1a10 	vmov	r1, s16
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	220a      	movs	r2, #10
 8009c32:	2300      	movs	r3, #0
 8009c34:	4620      	mov	r0, r4
 8009c36:	f000 fb3b 	bl	800a2b0 <__multadd>
 8009c3a:	9b08      	ldr	r3, [sp, #32]
 8009c3c:	ee08 0a10 	vmov	s16, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f000 81b1 	beq.w	8009fa8 <_dtoa_r+0xbc0>
 8009c46:	2300      	movs	r3, #0
 8009c48:	4639      	mov	r1, r7
 8009c4a:	220a      	movs	r2, #10
 8009c4c:	4620      	mov	r0, r4
 8009c4e:	f000 fb2f 	bl	800a2b0 <__multadd>
 8009c52:	9b02      	ldr	r3, [sp, #8]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	4607      	mov	r7, r0
 8009c58:	f300 808e 	bgt.w	8009d78 <_dtoa_r+0x990>
 8009c5c:	9b06      	ldr	r3, [sp, #24]
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	dc51      	bgt.n	8009d06 <_dtoa_r+0x91e>
 8009c62:	e089      	b.n	8009d78 <_dtoa_r+0x990>
 8009c64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009c6a:	e74b      	b.n	8009b04 <_dtoa_r+0x71c>
 8009c6c:	9b03      	ldr	r3, [sp, #12]
 8009c6e:	1e5e      	subs	r6, r3, #1
 8009c70:	9b07      	ldr	r3, [sp, #28]
 8009c72:	42b3      	cmp	r3, r6
 8009c74:	bfbf      	itttt	lt
 8009c76:	9b07      	ldrlt	r3, [sp, #28]
 8009c78:	9607      	strlt	r6, [sp, #28]
 8009c7a:	1af2      	sublt	r2, r6, r3
 8009c7c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009c7e:	bfb6      	itet	lt
 8009c80:	189b      	addlt	r3, r3, r2
 8009c82:	1b9e      	subge	r6, r3, r6
 8009c84:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009c86:	9b03      	ldr	r3, [sp, #12]
 8009c88:	bfb8      	it	lt
 8009c8a:	2600      	movlt	r6, #0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	bfb7      	itett	lt
 8009c90:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009c94:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009c98:	1a9d      	sublt	r5, r3, r2
 8009c9a:	2300      	movlt	r3, #0
 8009c9c:	e734      	b.n	8009b08 <_dtoa_r+0x720>
 8009c9e:	9e07      	ldr	r6, [sp, #28]
 8009ca0:	9d04      	ldr	r5, [sp, #16]
 8009ca2:	9f08      	ldr	r7, [sp, #32]
 8009ca4:	e73b      	b.n	8009b1e <_dtoa_r+0x736>
 8009ca6:	9a07      	ldr	r2, [sp, #28]
 8009ca8:	e767      	b.n	8009b7a <_dtoa_r+0x792>
 8009caa:	9b06      	ldr	r3, [sp, #24]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	dc18      	bgt.n	8009ce2 <_dtoa_r+0x8fa>
 8009cb0:	f1ba 0f00 	cmp.w	sl, #0
 8009cb4:	d115      	bne.n	8009ce2 <_dtoa_r+0x8fa>
 8009cb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009cba:	b993      	cbnz	r3, 8009ce2 <_dtoa_r+0x8fa>
 8009cbc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009cc0:	0d1b      	lsrs	r3, r3, #20
 8009cc2:	051b      	lsls	r3, r3, #20
 8009cc4:	b183      	cbz	r3, 8009ce8 <_dtoa_r+0x900>
 8009cc6:	9b04      	ldr	r3, [sp, #16]
 8009cc8:	3301      	adds	r3, #1
 8009cca:	9304      	str	r3, [sp, #16]
 8009ccc:	9b05      	ldr	r3, [sp, #20]
 8009cce:	3301      	adds	r3, #1
 8009cd0:	9305      	str	r3, [sp, #20]
 8009cd2:	f04f 0801 	mov.w	r8, #1
 8009cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f47f af6a 	bne.w	8009bb2 <_dtoa_r+0x7ca>
 8009cde:	2001      	movs	r0, #1
 8009ce0:	e76f      	b.n	8009bc2 <_dtoa_r+0x7da>
 8009ce2:	f04f 0800 	mov.w	r8, #0
 8009ce6:	e7f6      	b.n	8009cd6 <_dtoa_r+0x8ee>
 8009ce8:	4698      	mov	r8, r3
 8009cea:	e7f4      	b.n	8009cd6 <_dtoa_r+0x8ee>
 8009cec:	f43f af7d 	beq.w	8009bea <_dtoa_r+0x802>
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	301c      	adds	r0, #28
 8009cf4:	e772      	b.n	8009bdc <_dtoa_r+0x7f4>
 8009cf6:	9b03      	ldr	r3, [sp, #12]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	dc37      	bgt.n	8009d6c <_dtoa_r+0x984>
 8009cfc:	9b06      	ldr	r3, [sp, #24]
 8009cfe:	2b02      	cmp	r3, #2
 8009d00:	dd34      	ble.n	8009d6c <_dtoa_r+0x984>
 8009d02:	9b03      	ldr	r3, [sp, #12]
 8009d04:	9302      	str	r3, [sp, #8]
 8009d06:	9b02      	ldr	r3, [sp, #8]
 8009d08:	b96b      	cbnz	r3, 8009d26 <_dtoa_r+0x93e>
 8009d0a:	4631      	mov	r1, r6
 8009d0c:	2205      	movs	r2, #5
 8009d0e:	4620      	mov	r0, r4
 8009d10:	f000 face 	bl	800a2b0 <__multadd>
 8009d14:	4601      	mov	r1, r0
 8009d16:	4606      	mov	r6, r0
 8009d18:	ee18 0a10 	vmov	r0, s16
 8009d1c:	f000 fce8 	bl	800a6f0 <__mcmp>
 8009d20:	2800      	cmp	r0, #0
 8009d22:	f73f adbb 	bgt.w	800989c <_dtoa_r+0x4b4>
 8009d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d28:	9d01      	ldr	r5, [sp, #4]
 8009d2a:	43db      	mvns	r3, r3
 8009d2c:	9300      	str	r3, [sp, #0]
 8009d2e:	f04f 0800 	mov.w	r8, #0
 8009d32:	4631      	mov	r1, r6
 8009d34:	4620      	mov	r0, r4
 8009d36:	f000 fa99 	bl	800a26c <_Bfree>
 8009d3a:	2f00      	cmp	r7, #0
 8009d3c:	f43f aea4 	beq.w	8009a88 <_dtoa_r+0x6a0>
 8009d40:	f1b8 0f00 	cmp.w	r8, #0
 8009d44:	d005      	beq.n	8009d52 <_dtoa_r+0x96a>
 8009d46:	45b8      	cmp	r8, r7
 8009d48:	d003      	beq.n	8009d52 <_dtoa_r+0x96a>
 8009d4a:	4641      	mov	r1, r8
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	f000 fa8d 	bl	800a26c <_Bfree>
 8009d52:	4639      	mov	r1, r7
 8009d54:	4620      	mov	r0, r4
 8009d56:	f000 fa89 	bl	800a26c <_Bfree>
 8009d5a:	e695      	b.n	8009a88 <_dtoa_r+0x6a0>
 8009d5c:	2600      	movs	r6, #0
 8009d5e:	4637      	mov	r7, r6
 8009d60:	e7e1      	b.n	8009d26 <_dtoa_r+0x93e>
 8009d62:	9700      	str	r7, [sp, #0]
 8009d64:	4637      	mov	r7, r6
 8009d66:	e599      	b.n	800989c <_dtoa_r+0x4b4>
 8009d68:	40240000 	.word	0x40240000
 8009d6c:	9b08      	ldr	r3, [sp, #32]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f000 80ca 	beq.w	8009f08 <_dtoa_r+0xb20>
 8009d74:	9b03      	ldr	r3, [sp, #12]
 8009d76:	9302      	str	r3, [sp, #8]
 8009d78:	2d00      	cmp	r5, #0
 8009d7a:	dd05      	ble.n	8009d88 <_dtoa_r+0x9a0>
 8009d7c:	4639      	mov	r1, r7
 8009d7e:	462a      	mov	r2, r5
 8009d80:	4620      	mov	r0, r4
 8009d82:	f000 fc45 	bl	800a610 <__lshift>
 8009d86:	4607      	mov	r7, r0
 8009d88:	f1b8 0f00 	cmp.w	r8, #0
 8009d8c:	d05b      	beq.n	8009e46 <_dtoa_r+0xa5e>
 8009d8e:	6879      	ldr	r1, [r7, #4]
 8009d90:	4620      	mov	r0, r4
 8009d92:	f000 fa2b 	bl	800a1ec <_Balloc>
 8009d96:	4605      	mov	r5, r0
 8009d98:	b928      	cbnz	r0, 8009da6 <_dtoa_r+0x9be>
 8009d9a:	4b87      	ldr	r3, [pc, #540]	; (8009fb8 <_dtoa_r+0xbd0>)
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009da2:	f7ff bb3b 	b.w	800941c <_dtoa_r+0x34>
 8009da6:	693a      	ldr	r2, [r7, #16]
 8009da8:	3202      	adds	r2, #2
 8009daa:	0092      	lsls	r2, r2, #2
 8009dac:	f107 010c 	add.w	r1, r7, #12
 8009db0:	300c      	adds	r0, #12
 8009db2:	f000 fa0d 	bl	800a1d0 <memcpy>
 8009db6:	2201      	movs	r2, #1
 8009db8:	4629      	mov	r1, r5
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f000 fc28 	bl	800a610 <__lshift>
 8009dc0:	9b01      	ldr	r3, [sp, #4]
 8009dc2:	f103 0901 	add.w	r9, r3, #1
 8009dc6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009dca:	4413      	add	r3, r2
 8009dcc:	9305      	str	r3, [sp, #20]
 8009dce:	f00a 0301 	and.w	r3, sl, #1
 8009dd2:	46b8      	mov	r8, r7
 8009dd4:	9304      	str	r3, [sp, #16]
 8009dd6:	4607      	mov	r7, r0
 8009dd8:	4631      	mov	r1, r6
 8009dda:	ee18 0a10 	vmov	r0, s16
 8009dde:	f7ff fa77 	bl	80092d0 <quorem>
 8009de2:	4641      	mov	r1, r8
 8009de4:	9002      	str	r0, [sp, #8]
 8009de6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009dea:	ee18 0a10 	vmov	r0, s16
 8009dee:	f000 fc7f 	bl	800a6f0 <__mcmp>
 8009df2:	463a      	mov	r2, r7
 8009df4:	9003      	str	r0, [sp, #12]
 8009df6:	4631      	mov	r1, r6
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f000 fc95 	bl	800a728 <__mdiff>
 8009dfe:	68c2      	ldr	r2, [r0, #12]
 8009e00:	f109 3bff 	add.w	fp, r9, #4294967295
 8009e04:	4605      	mov	r5, r0
 8009e06:	bb02      	cbnz	r2, 8009e4a <_dtoa_r+0xa62>
 8009e08:	4601      	mov	r1, r0
 8009e0a:	ee18 0a10 	vmov	r0, s16
 8009e0e:	f000 fc6f 	bl	800a6f0 <__mcmp>
 8009e12:	4602      	mov	r2, r0
 8009e14:	4629      	mov	r1, r5
 8009e16:	4620      	mov	r0, r4
 8009e18:	9207      	str	r2, [sp, #28]
 8009e1a:	f000 fa27 	bl	800a26c <_Bfree>
 8009e1e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009e22:	ea43 0102 	orr.w	r1, r3, r2
 8009e26:	9b04      	ldr	r3, [sp, #16]
 8009e28:	430b      	orrs	r3, r1
 8009e2a:	464d      	mov	r5, r9
 8009e2c:	d10f      	bne.n	8009e4e <_dtoa_r+0xa66>
 8009e2e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009e32:	d02a      	beq.n	8009e8a <_dtoa_r+0xaa2>
 8009e34:	9b03      	ldr	r3, [sp, #12]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	dd02      	ble.n	8009e40 <_dtoa_r+0xa58>
 8009e3a:	9b02      	ldr	r3, [sp, #8]
 8009e3c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009e40:	f88b a000 	strb.w	sl, [fp]
 8009e44:	e775      	b.n	8009d32 <_dtoa_r+0x94a>
 8009e46:	4638      	mov	r0, r7
 8009e48:	e7ba      	b.n	8009dc0 <_dtoa_r+0x9d8>
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	e7e2      	b.n	8009e14 <_dtoa_r+0xa2c>
 8009e4e:	9b03      	ldr	r3, [sp, #12]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	db04      	blt.n	8009e5e <_dtoa_r+0xa76>
 8009e54:	9906      	ldr	r1, [sp, #24]
 8009e56:	430b      	orrs	r3, r1
 8009e58:	9904      	ldr	r1, [sp, #16]
 8009e5a:	430b      	orrs	r3, r1
 8009e5c:	d122      	bne.n	8009ea4 <_dtoa_r+0xabc>
 8009e5e:	2a00      	cmp	r2, #0
 8009e60:	ddee      	ble.n	8009e40 <_dtoa_r+0xa58>
 8009e62:	ee18 1a10 	vmov	r1, s16
 8009e66:	2201      	movs	r2, #1
 8009e68:	4620      	mov	r0, r4
 8009e6a:	f000 fbd1 	bl	800a610 <__lshift>
 8009e6e:	4631      	mov	r1, r6
 8009e70:	ee08 0a10 	vmov	s16, r0
 8009e74:	f000 fc3c 	bl	800a6f0 <__mcmp>
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	dc03      	bgt.n	8009e84 <_dtoa_r+0xa9c>
 8009e7c:	d1e0      	bne.n	8009e40 <_dtoa_r+0xa58>
 8009e7e:	f01a 0f01 	tst.w	sl, #1
 8009e82:	d0dd      	beq.n	8009e40 <_dtoa_r+0xa58>
 8009e84:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009e88:	d1d7      	bne.n	8009e3a <_dtoa_r+0xa52>
 8009e8a:	2339      	movs	r3, #57	; 0x39
 8009e8c:	f88b 3000 	strb.w	r3, [fp]
 8009e90:	462b      	mov	r3, r5
 8009e92:	461d      	mov	r5, r3
 8009e94:	3b01      	subs	r3, #1
 8009e96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009e9a:	2a39      	cmp	r2, #57	; 0x39
 8009e9c:	d071      	beq.n	8009f82 <_dtoa_r+0xb9a>
 8009e9e:	3201      	adds	r2, #1
 8009ea0:	701a      	strb	r2, [r3, #0]
 8009ea2:	e746      	b.n	8009d32 <_dtoa_r+0x94a>
 8009ea4:	2a00      	cmp	r2, #0
 8009ea6:	dd07      	ble.n	8009eb8 <_dtoa_r+0xad0>
 8009ea8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009eac:	d0ed      	beq.n	8009e8a <_dtoa_r+0xaa2>
 8009eae:	f10a 0301 	add.w	r3, sl, #1
 8009eb2:	f88b 3000 	strb.w	r3, [fp]
 8009eb6:	e73c      	b.n	8009d32 <_dtoa_r+0x94a>
 8009eb8:	9b05      	ldr	r3, [sp, #20]
 8009eba:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009ebe:	4599      	cmp	r9, r3
 8009ec0:	d047      	beq.n	8009f52 <_dtoa_r+0xb6a>
 8009ec2:	ee18 1a10 	vmov	r1, s16
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	220a      	movs	r2, #10
 8009eca:	4620      	mov	r0, r4
 8009ecc:	f000 f9f0 	bl	800a2b0 <__multadd>
 8009ed0:	45b8      	cmp	r8, r7
 8009ed2:	ee08 0a10 	vmov	s16, r0
 8009ed6:	f04f 0300 	mov.w	r3, #0
 8009eda:	f04f 020a 	mov.w	r2, #10
 8009ede:	4641      	mov	r1, r8
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	d106      	bne.n	8009ef2 <_dtoa_r+0xb0a>
 8009ee4:	f000 f9e4 	bl	800a2b0 <__multadd>
 8009ee8:	4680      	mov	r8, r0
 8009eea:	4607      	mov	r7, r0
 8009eec:	f109 0901 	add.w	r9, r9, #1
 8009ef0:	e772      	b.n	8009dd8 <_dtoa_r+0x9f0>
 8009ef2:	f000 f9dd 	bl	800a2b0 <__multadd>
 8009ef6:	4639      	mov	r1, r7
 8009ef8:	4680      	mov	r8, r0
 8009efa:	2300      	movs	r3, #0
 8009efc:	220a      	movs	r2, #10
 8009efe:	4620      	mov	r0, r4
 8009f00:	f000 f9d6 	bl	800a2b0 <__multadd>
 8009f04:	4607      	mov	r7, r0
 8009f06:	e7f1      	b.n	8009eec <_dtoa_r+0xb04>
 8009f08:	9b03      	ldr	r3, [sp, #12]
 8009f0a:	9302      	str	r3, [sp, #8]
 8009f0c:	9d01      	ldr	r5, [sp, #4]
 8009f0e:	ee18 0a10 	vmov	r0, s16
 8009f12:	4631      	mov	r1, r6
 8009f14:	f7ff f9dc 	bl	80092d0 <quorem>
 8009f18:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009f1c:	9b01      	ldr	r3, [sp, #4]
 8009f1e:	f805 ab01 	strb.w	sl, [r5], #1
 8009f22:	1aea      	subs	r2, r5, r3
 8009f24:	9b02      	ldr	r3, [sp, #8]
 8009f26:	4293      	cmp	r3, r2
 8009f28:	dd09      	ble.n	8009f3e <_dtoa_r+0xb56>
 8009f2a:	ee18 1a10 	vmov	r1, s16
 8009f2e:	2300      	movs	r3, #0
 8009f30:	220a      	movs	r2, #10
 8009f32:	4620      	mov	r0, r4
 8009f34:	f000 f9bc 	bl	800a2b0 <__multadd>
 8009f38:	ee08 0a10 	vmov	s16, r0
 8009f3c:	e7e7      	b.n	8009f0e <_dtoa_r+0xb26>
 8009f3e:	9b02      	ldr	r3, [sp, #8]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	bfc8      	it	gt
 8009f44:	461d      	movgt	r5, r3
 8009f46:	9b01      	ldr	r3, [sp, #4]
 8009f48:	bfd8      	it	le
 8009f4a:	2501      	movle	r5, #1
 8009f4c:	441d      	add	r5, r3
 8009f4e:	f04f 0800 	mov.w	r8, #0
 8009f52:	ee18 1a10 	vmov	r1, s16
 8009f56:	2201      	movs	r2, #1
 8009f58:	4620      	mov	r0, r4
 8009f5a:	f000 fb59 	bl	800a610 <__lshift>
 8009f5e:	4631      	mov	r1, r6
 8009f60:	ee08 0a10 	vmov	s16, r0
 8009f64:	f000 fbc4 	bl	800a6f0 <__mcmp>
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	dc91      	bgt.n	8009e90 <_dtoa_r+0xaa8>
 8009f6c:	d102      	bne.n	8009f74 <_dtoa_r+0xb8c>
 8009f6e:	f01a 0f01 	tst.w	sl, #1
 8009f72:	d18d      	bne.n	8009e90 <_dtoa_r+0xaa8>
 8009f74:	462b      	mov	r3, r5
 8009f76:	461d      	mov	r5, r3
 8009f78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f7c:	2a30      	cmp	r2, #48	; 0x30
 8009f7e:	d0fa      	beq.n	8009f76 <_dtoa_r+0xb8e>
 8009f80:	e6d7      	b.n	8009d32 <_dtoa_r+0x94a>
 8009f82:	9a01      	ldr	r2, [sp, #4]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d184      	bne.n	8009e92 <_dtoa_r+0xaaa>
 8009f88:	9b00      	ldr	r3, [sp, #0]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	9300      	str	r3, [sp, #0]
 8009f8e:	2331      	movs	r3, #49	; 0x31
 8009f90:	7013      	strb	r3, [r2, #0]
 8009f92:	e6ce      	b.n	8009d32 <_dtoa_r+0x94a>
 8009f94:	4b09      	ldr	r3, [pc, #36]	; (8009fbc <_dtoa_r+0xbd4>)
 8009f96:	f7ff ba95 	b.w	80094c4 <_dtoa_r+0xdc>
 8009f9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	f47f aa6e 	bne.w	800947e <_dtoa_r+0x96>
 8009fa2:	4b07      	ldr	r3, [pc, #28]	; (8009fc0 <_dtoa_r+0xbd8>)
 8009fa4:	f7ff ba8e 	b.w	80094c4 <_dtoa_r+0xdc>
 8009fa8:	9b02      	ldr	r3, [sp, #8]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	dcae      	bgt.n	8009f0c <_dtoa_r+0xb24>
 8009fae:	9b06      	ldr	r3, [sp, #24]
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	f73f aea8 	bgt.w	8009d06 <_dtoa_r+0x91e>
 8009fb6:	e7a9      	b.n	8009f0c <_dtoa_r+0xb24>
 8009fb8:	0800b56b 	.word	0x0800b56b
 8009fbc:	0800b4c8 	.word	0x0800b4c8
 8009fc0:	0800b4ec 	.word	0x0800b4ec

08009fc4 <std>:
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	b510      	push	{r4, lr}
 8009fc8:	4604      	mov	r4, r0
 8009fca:	e9c0 3300 	strd	r3, r3, [r0]
 8009fce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fd2:	6083      	str	r3, [r0, #8]
 8009fd4:	8181      	strh	r1, [r0, #12]
 8009fd6:	6643      	str	r3, [r0, #100]	; 0x64
 8009fd8:	81c2      	strh	r2, [r0, #14]
 8009fda:	6183      	str	r3, [r0, #24]
 8009fdc:	4619      	mov	r1, r3
 8009fde:	2208      	movs	r2, #8
 8009fe0:	305c      	adds	r0, #92	; 0x5c
 8009fe2:	f7fe fceb 	bl	80089bc <memset>
 8009fe6:	4b05      	ldr	r3, [pc, #20]	; (8009ffc <std+0x38>)
 8009fe8:	6263      	str	r3, [r4, #36]	; 0x24
 8009fea:	4b05      	ldr	r3, [pc, #20]	; (800a000 <std+0x3c>)
 8009fec:	62a3      	str	r3, [r4, #40]	; 0x28
 8009fee:	4b05      	ldr	r3, [pc, #20]	; (800a004 <std+0x40>)
 8009ff0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ff2:	4b05      	ldr	r3, [pc, #20]	; (800a008 <std+0x44>)
 8009ff4:	6224      	str	r4, [r4, #32]
 8009ff6:	6323      	str	r3, [r4, #48]	; 0x30
 8009ff8:	bd10      	pop	{r4, pc}
 8009ffa:	bf00      	nop
 8009ffc:	0800adb5 	.word	0x0800adb5
 800a000:	0800add7 	.word	0x0800add7
 800a004:	0800ae0f 	.word	0x0800ae0f
 800a008:	0800ae33 	.word	0x0800ae33

0800a00c <_cleanup_r>:
 800a00c:	4901      	ldr	r1, [pc, #4]	; (800a014 <_cleanup_r+0x8>)
 800a00e:	f000 b8af 	b.w	800a170 <_fwalk_reent>
 800a012:	bf00      	nop
 800a014:	0800b149 	.word	0x0800b149

0800a018 <__sfmoreglue>:
 800a018:	b570      	push	{r4, r5, r6, lr}
 800a01a:	2268      	movs	r2, #104	; 0x68
 800a01c:	1e4d      	subs	r5, r1, #1
 800a01e:	4355      	muls	r5, r2
 800a020:	460e      	mov	r6, r1
 800a022:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a026:	f000 fce7 	bl	800a9f8 <_malloc_r>
 800a02a:	4604      	mov	r4, r0
 800a02c:	b140      	cbz	r0, 800a040 <__sfmoreglue+0x28>
 800a02e:	2100      	movs	r1, #0
 800a030:	e9c0 1600 	strd	r1, r6, [r0]
 800a034:	300c      	adds	r0, #12
 800a036:	60a0      	str	r0, [r4, #8]
 800a038:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a03c:	f7fe fcbe 	bl	80089bc <memset>
 800a040:	4620      	mov	r0, r4
 800a042:	bd70      	pop	{r4, r5, r6, pc}

0800a044 <__sfp_lock_acquire>:
 800a044:	4801      	ldr	r0, [pc, #4]	; (800a04c <__sfp_lock_acquire+0x8>)
 800a046:	f000 b8b8 	b.w	800a1ba <__retarget_lock_acquire_recursive>
 800a04a:	bf00      	nop
 800a04c:	20001581 	.word	0x20001581

0800a050 <__sfp_lock_release>:
 800a050:	4801      	ldr	r0, [pc, #4]	; (800a058 <__sfp_lock_release+0x8>)
 800a052:	f000 b8b3 	b.w	800a1bc <__retarget_lock_release_recursive>
 800a056:	bf00      	nop
 800a058:	20001581 	.word	0x20001581

0800a05c <__sinit_lock_acquire>:
 800a05c:	4801      	ldr	r0, [pc, #4]	; (800a064 <__sinit_lock_acquire+0x8>)
 800a05e:	f000 b8ac 	b.w	800a1ba <__retarget_lock_acquire_recursive>
 800a062:	bf00      	nop
 800a064:	20001582 	.word	0x20001582

0800a068 <__sinit_lock_release>:
 800a068:	4801      	ldr	r0, [pc, #4]	; (800a070 <__sinit_lock_release+0x8>)
 800a06a:	f000 b8a7 	b.w	800a1bc <__retarget_lock_release_recursive>
 800a06e:	bf00      	nop
 800a070:	20001582 	.word	0x20001582

0800a074 <__sinit>:
 800a074:	b510      	push	{r4, lr}
 800a076:	4604      	mov	r4, r0
 800a078:	f7ff fff0 	bl	800a05c <__sinit_lock_acquire>
 800a07c:	69a3      	ldr	r3, [r4, #24]
 800a07e:	b11b      	cbz	r3, 800a088 <__sinit+0x14>
 800a080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a084:	f7ff bff0 	b.w	800a068 <__sinit_lock_release>
 800a088:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a08c:	6523      	str	r3, [r4, #80]	; 0x50
 800a08e:	4b13      	ldr	r3, [pc, #76]	; (800a0dc <__sinit+0x68>)
 800a090:	4a13      	ldr	r2, [pc, #76]	; (800a0e0 <__sinit+0x6c>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	62a2      	str	r2, [r4, #40]	; 0x28
 800a096:	42a3      	cmp	r3, r4
 800a098:	bf04      	itt	eq
 800a09a:	2301      	moveq	r3, #1
 800a09c:	61a3      	streq	r3, [r4, #24]
 800a09e:	4620      	mov	r0, r4
 800a0a0:	f000 f820 	bl	800a0e4 <__sfp>
 800a0a4:	6060      	str	r0, [r4, #4]
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	f000 f81c 	bl	800a0e4 <__sfp>
 800a0ac:	60a0      	str	r0, [r4, #8]
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	f000 f818 	bl	800a0e4 <__sfp>
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	60e0      	str	r0, [r4, #12]
 800a0b8:	2104      	movs	r1, #4
 800a0ba:	6860      	ldr	r0, [r4, #4]
 800a0bc:	f7ff ff82 	bl	8009fc4 <std>
 800a0c0:	68a0      	ldr	r0, [r4, #8]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	2109      	movs	r1, #9
 800a0c6:	f7ff ff7d 	bl	8009fc4 <std>
 800a0ca:	68e0      	ldr	r0, [r4, #12]
 800a0cc:	2202      	movs	r2, #2
 800a0ce:	2112      	movs	r1, #18
 800a0d0:	f7ff ff78 	bl	8009fc4 <std>
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	61a3      	str	r3, [r4, #24]
 800a0d8:	e7d2      	b.n	800a080 <__sinit+0xc>
 800a0da:	bf00      	nop
 800a0dc:	0800b4b4 	.word	0x0800b4b4
 800a0e0:	0800a00d 	.word	0x0800a00d

0800a0e4 <__sfp>:
 800a0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0e6:	4607      	mov	r7, r0
 800a0e8:	f7ff ffac 	bl	800a044 <__sfp_lock_acquire>
 800a0ec:	4b1e      	ldr	r3, [pc, #120]	; (800a168 <__sfp+0x84>)
 800a0ee:	681e      	ldr	r6, [r3, #0]
 800a0f0:	69b3      	ldr	r3, [r6, #24]
 800a0f2:	b913      	cbnz	r3, 800a0fa <__sfp+0x16>
 800a0f4:	4630      	mov	r0, r6
 800a0f6:	f7ff ffbd 	bl	800a074 <__sinit>
 800a0fa:	3648      	adds	r6, #72	; 0x48
 800a0fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a100:	3b01      	subs	r3, #1
 800a102:	d503      	bpl.n	800a10c <__sfp+0x28>
 800a104:	6833      	ldr	r3, [r6, #0]
 800a106:	b30b      	cbz	r3, 800a14c <__sfp+0x68>
 800a108:	6836      	ldr	r6, [r6, #0]
 800a10a:	e7f7      	b.n	800a0fc <__sfp+0x18>
 800a10c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a110:	b9d5      	cbnz	r5, 800a148 <__sfp+0x64>
 800a112:	4b16      	ldr	r3, [pc, #88]	; (800a16c <__sfp+0x88>)
 800a114:	60e3      	str	r3, [r4, #12]
 800a116:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a11a:	6665      	str	r5, [r4, #100]	; 0x64
 800a11c:	f000 f84c 	bl	800a1b8 <__retarget_lock_init_recursive>
 800a120:	f7ff ff96 	bl	800a050 <__sfp_lock_release>
 800a124:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a128:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a12c:	6025      	str	r5, [r4, #0]
 800a12e:	61a5      	str	r5, [r4, #24]
 800a130:	2208      	movs	r2, #8
 800a132:	4629      	mov	r1, r5
 800a134:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a138:	f7fe fc40 	bl	80089bc <memset>
 800a13c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a140:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a144:	4620      	mov	r0, r4
 800a146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a148:	3468      	adds	r4, #104	; 0x68
 800a14a:	e7d9      	b.n	800a100 <__sfp+0x1c>
 800a14c:	2104      	movs	r1, #4
 800a14e:	4638      	mov	r0, r7
 800a150:	f7ff ff62 	bl	800a018 <__sfmoreglue>
 800a154:	4604      	mov	r4, r0
 800a156:	6030      	str	r0, [r6, #0]
 800a158:	2800      	cmp	r0, #0
 800a15a:	d1d5      	bne.n	800a108 <__sfp+0x24>
 800a15c:	f7ff ff78 	bl	800a050 <__sfp_lock_release>
 800a160:	230c      	movs	r3, #12
 800a162:	603b      	str	r3, [r7, #0]
 800a164:	e7ee      	b.n	800a144 <__sfp+0x60>
 800a166:	bf00      	nop
 800a168:	0800b4b4 	.word	0x0800b4b4
 800a16c:	ffff0001 	.word	0xffff0001

0800a170 <_fwalk_reent>:
 800a170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a174:	4606      	mov	r6, r0
 800a176:	4688      	mov	r8, r1
 800a178:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a17c:	2700      	movs	r7, #0
 800a17e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a182:	f1b9 0901 	subs.w	r9, r9, #1
 800a186:	d505      	bpl.n	800a194 <_fwalk_reent+0x24>
 800a188:	6824      	ldr	r4, [r4, #0]
 800a18a:	2c00      	cmp	r4, #0
 800a18c:	d1f7      	bne.n	800a17e <_fwalk_reent+0xe>
 800a18e:	4638      	mov	r0, r7
 800a190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a194:	89ab      	ldrh	r3, [r5, #12]
 800a196:	2b01      	cmp	r3, #1
 800a198:	d907      	bls.n	800a1aa <_fwalk_reent+0x3a>
 800a19a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	d003      	beq.n	800a1aa <_fwalk_reent+0x3a>
 800a1a2:	4629      	mov	r1, r5
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	47c0      	blx	r8
 800a1a8:	4307      	orrs	r7, r0
 800a1aa:	3568      	adds	r5, #104	; 0x68
 800a1ac:	e7e9      	b.n	800a182 <_fwalk_reent+0x12>
	...

0800a1b0 <_localeconv_r>:
 800a1b0:	4800      	ldr	r0, [pc, #0]	; (800a1b4 <_localeconv_r+0x4>)
 800a1b2:	4770      	bx	lr
 800a1b4:	200002b4 	.word	0x200002b4

0800a1b8 <__retarget_lock_init_recursive>:
 800a1b8:	4770      	bx	lr

0800a1ba <__retarget_lock_acquire_recursive>:
 800a1ba:	4770      	bx	lr

0800a1bc <__retarget_lock_release_recursive>:
 800a1bc:	4770      	bx	lr
	...

0800a1c0 <malloc>:
 800a1c0:	4b02      	ldr	r3, [pc, #8]	; (800a1cc <malloc+0xc>)
 800a1c2:	4601      	mov	r1, r0
 800a1c4:	6818      	ldr	r0, [r3, #0]
 800a1c6:	f000 bc17 	b.w	800a9f8 <_malloc_r>
 800a1ca:	bf00      	nop
 800a1cc:	20000160 	.word	0x20000160

0800a1d0 <memcpy>:
 800a1d0:	440a      	add	r2, r1
 800a1d2:	4291      	cmp	r1, r2
 800a1d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1d8:	d100      	bne.n	800a1dc <memcpy+0xc>
 800a1da:	4770      	bx	lr
 800a1dc:	b510      	push	{r4, lr}
 800a1de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1e6:	4291      	cmp	r1, r2
 800a1e8:	d1f9      	bne.n	800a1de <memcpy+0xe>
 800a1ea:	bd10      	pop	{r4, pc}

0800a1ec <_Balloc>:
 800a1ec:	b570      	push	{r4, r5, r6, lr}
 800a1ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	460d      	mov	r5, r1
 800a1f4:	b976      	cbnz	r6, 800a214 <_Balloc+0x28>
 800a1f6:	2010      	movs	r0, #16
 800a1f8:	f7ff ffe2 	bl	800a1c0 <malloc>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	6260      	str	r0, [r4, #36]	; 0x24
 800a200:	b920      	cbnz	r0, 800a20c <_Balloc+0x20>
 800a202:	4b18      	ldr	r3, [pc, #96]	; (800a264 <_Balloc+0x78>)
 800a204:	4818      	ldr	r0, [pc, #96]	; (800a268 <_Balloc+0x7c>)
 800a206:	2166      	movs	r1, #102	; 0x66
 800a208:	f000 feea 	bl	800afe0 <__assert_func>
 800a20c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a210:	6006      	str	r6, [r0, #0]
 800a212:	60c6      	str	r6, [r0, #12]
 800a214:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a216:	68f3      	ldr	r3, [r6, #12]
 800a218:	b183      	cbz	r3, 800a23c <_Balloc+0x50>
 800a21a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a222:	b9b8      	cbnz	r0, 800a254 <_Balloc+0x68>
 800a224:	2101      	movs	r1, #1
 800a226:	fa01 f605 	lsl.w	r6, r1, r5
 800a22a:	1d72      	adds	r2, r6, #5
 800a22c:	0092      	lsls	r2, r2, #2
 800a22e:	4620      	mov	r0, r4
 800a230:	f000 fb60 	bl	800a8f4 <_calloc_r>
 800a234:	b160      	cbz	r0, 800a250 <_Balloc+0x64>
 800a236:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a23a:	e00e      	b.n	800a25a <_Balloc+0x6e>
 800a23c:	2221      	movs	r2, #33	; 0x21
 800a23e:	2104      	movs	r1, #4
 800a240:	4620      	mov	r0, r4
 800a242:	f000 fb57 	bl	800a8f4 <_calloc_r>
 800a246:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a248:	60f0      	str	r0, [r6, #12]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d1e4      	bne.n	800a21a <_Balloc+0x2e>
 800a250:	2000      	movs	r0, #0
 800a252:	bd70      	pop	{r4, r5, r6, pc}
 800a254:	6802      	ldr	r2, [r0, #0]
 800a256:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a25a:	2300      	movs	r3, #0
 800a25c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a260:	e7f7      	b.n	800a252 <_Balloc+0x66>
 800a262:	bf00      	nop
 800a264:	0800b4f9 	.word	0x0800b4f9
 800a268:	0800b5dc 	.word	0x0800b5dc

0800a26c <_Bfree>:
 800a26c:	b570      	push	{r4, r5, r6, lr}
 800a26e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a270:	4605      	mov	r5, r0
 800a272:	460c      	mov	r4, r1
 800a274:	b976      	cbnz	r6, 800a294 <_Bfree+0x28>
 800a276:	2010      	movs	r0, #16
 800a278:	f7ff ffa2 	bl	800a1c0 <malloc>
 800a27c:	4602      	mov	r2, r0
 800a27e:	6268      	str	r0, [r5, #36]	; 0x24
 800a280:	b920      	cbnz	r0, 800a28c <_Bfree+0x20>
 800a282:	4b09      	ldr	r3, [pc, #36]	; (800a2a8 <_Bfree+0x3c>)
 800a284:	4809      	ldr	r0, [pc, #36]	; (800a2ac <_Bfree+0x40>)
 800a286:	218a      	movs	r1, #138	; 0x8a
 800a288:	f000 feaa 	bl	800afe0 <__assert_func>
 800a28c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a290:	6006      	str	r6, [r0, #0]
 800a292:	60c6      	str	r6, [r0, #12]
 800a294:	b13c      	cbz	r4, 800a2a6 <_Bfree+0x3a>
 800a296:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a298:	6862      	ldr	r2, [r4, #4]
 800a29a:	68db      	ldr	r3, [r3, #12]
 800a29c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2a0:	6021      	str	r1, [r4, #0]
 800a2a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a2a6:	bd70      	pop	{r4, r5, r6, pc}
 800a2a8:	0800b4f9 	.word	0x0800b4f9
 800a2ac:	0800b5dc 	.word	0x0800b5dc

0800a2b0 <__multadd>:
 800a2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b4:	690d      	ldr	r5, [r1, #16]
 800a2b6:	4607      	mov	r7, r0
 800a2b8:	460c      	mov	r4, r1
 800a2ba:	461e      	mov	r6, r3
 800a2bc:	f101 0c14 	add.w	ip, r1, #20
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	f8dc 3000 	ldr.w	r3, [ip]
 800a2c6:	b299      	uxth	r1, r3
 800a2c8:	fb02 6101 	mla	r1, r2, r1, r6
 800a2cc:	0c1e      	lsrs	r6, r3, #16
 800a2ce:	0c0b      	lsrs	r3, r1, #16
 800a2d0:	fb02 3306 	mla	r3, r2, r6, r3
 800a2d4:	b289      	uxth	r1, r1
 800a2d6:	3001      	adds	r0, #1
 800a2d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2dc:	4285      	cmp	r5, r0
 800a2de:	f84c 1b04 	str.w	r1, [ip], #4
 800a2e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a2e6:	dcec      	bgt.n	800a2c2 <__multadd+0x12>
 800a2e8:	b30e      	cbz	r6, 800a32e <__multadd+0x7e>
 800a2ea:	68a3      	ldr	r3, [r4, #8]
 800a2ec:	42ab      	cmp	r3, r5
 800a2ee:	dc19      	bgt.n	800a324 <__multadd+0x74>
 800a2f0:	6861      	ldr	r1, [r4, #4]
 800a2f2:	4638      	mov	r0, r7
 800a2f4:	3101      	adds	r1, #1
 800a2f6:	f7ff ff79 	bl	800a1ec <_Balloc>
 800a2fa:	4680      	mov	r8, r0
 800a2fc:	b928      	cbnz	r0, 800a30a <__multadd+0x5a>
 800a2fe:	4602      	mov	r2, r0
 800a300:	4b0c      	ldr	r3, [pc, #48]	; (800a334 <__multadd+0x84>)
 800a302:	480d      	ldr	r0, [pc, #52]	; (800a338 <__multadd+0x88>)
 800a304:	21b5      	movs	r1, #181	; 0xb5
 800a306:	f000 fe6b 	bl	800afe0 <__assert_func>
 800a30a:	6922      	ldr	r2, [r4, #16]
 800a30c:	3202      	adds	r2, #2
 800a30e:	f104 010c 	add.w	r1, r4, #12
 800a312:	0092      	lsls	r2, r2, #2
 800a314:	300c      	adds	r0, #12
 800a316:	f7ff ff5b 	bl	800a1d0 <memcpy>
 800a31a:	4621      	mov	r1, r4
 800a31c:	4638      	mov	r0, r7
 800a31e:	f7ff ffa5 	bl	800a26c <_Bfree>
 800a322:	4644      	mov	r4, r8
 800a324:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a328:	3501      	adds	r5, #1
 800a32a:	615e      	str	r6, [r3, #20]
 800a32c:	6125      	str	r5, [r4, #16]
 800a32e:	4620      	mov	r0, r4
 800a330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a334:	0800b56b 	.word	0x0800b56b
 800a338:	0800b5dc 	.word	0x0800b5dc

0800a33c <__hi0bits>:
 800a33c:	0c03      	lsrs	r3, r0, #16
 800a33e:	041b      	lsls	r3, r3, #16
 800a340:	b9d3      	cbnz	r3, 800a378 <__hi0bits+0x3c>
 800a342:	0400      	lsls	r0, r0, #16
 800a344:	2310      	movs	r3, #16
 800a346:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a34a:	bf04      	itt	eq
 800a34c:	0200      	lsleq	r0, r0, #8
 800a34e:	3308      	addeq	r3, #8
 800a350:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a354:	bf04      	itt	eq
 800a356:	0100      	lsleq	r0, r0, #4
 800a358:	3304      	addeq	r3, #4
 800a35a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a35e:	bf04      	itt	eq
 800a360:	0080      	lsleq	r0, r0, #2
 800a362:	3302      	addeq	r3, #2
 800a364:	2800      	cmp	r0, #0
 800a366:	db05      	blt.n	800a374 <__hi0bits+0x38>
 800a368:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a36c:	f103 0301 	add.w	r3, r3, #1
 800a370:	bf08      	it	eq
 800a372:	2320      	moveq	r3, #32
 800a374:	4618      	mov	r0, r3
 800a376:	4770      	bx	lr
 800a378:	2300      	movs	r3, #0
 800a37a:	e7e4      	b.n	800a346 <__hi0bits+0xa>

0800a37c <__lo0bits>:
 800a37c:	6803      	ldr	r3, [r0, #0]
 800a37e:	f013 0207 	ands.w	r2, r3, #7
 800a382:	4601      	mov	r1, r0
 800a384:	d00b      	beq.n	800a39e <__lo0bits+0x22>
 800a386:	07da      	lsls	r2, r3, #31
 800a388:	d423      	bmi.n	800a3d2 <__lo0bits+0x56>
 800a38a:	0798      	lsls	r0, r3, #30
 800a38c:	bf49      	itett	mi
 800a38e:	085b      	lsrmi	r3, r3, #1
 800a390:	089b      	lsrpl	r3, r3, #2
 800a392:	2001      	movmi	r0, #1
 800a394:	600b      	strmi	r3, [r1, #0]
 800a396:	bf5c      	itt	pl
 800a398:	600b      	strpl	r3, [r1, #0]
 800a39a:	2002      	movpl	r0, #2
 800a39c:	4770      	bx	lr
 800a39e:	b298      	uxth	r0, r3
 800a3a0:	b9a8      	cbnz	r0, 800a3ce <__lo0bits+0x52>
 800a3a2:	0c1b      	lsrs	r3, r3, #16
 800a3a4:	2010      	movs	r0, #16
 800a3a6:	b2da      	uxtb	r2, r3
 800a3a8:	b90a      	cbnz	r2, 800a3ae <__lo0bits+0x32>
 800a3aa:	3008      	adds	r0, #8
 800a3ac:	0a1b      	lsrs	r3, r3, #8
 800a3ae:	071a      	lsls	r2, r3, #28
 800a3b0:	bf04      	itt	eq
 800a3b2:	091b      	lsreq	r3, r3, #4
 800a3b4:	3004      	addeq	r0, #4
 800a3b6:	079a      	lsls	r2, r3, #30
 800a3b8:	bf04      	itt	eq
 800a3ba:	089b      	lsreq	r3, r3, #2
 800a3bc:	3002      	addeq	r0, #2
 800a3be:	07da      	lsls	r2, r3, #31
 800a3c0:	d403      	bmi.n	800a3ca <__lo0bits+0x4e>
 800a3c2:	085b      	lsrs	r3, r3, #1
 800a3c4:	f100 0001 	add.w	r0, r0, #1
 800a3c8:	d005      	beq.n	800a3d6 <__lo0bits+0x5a>
 800a3ca:	600b      	str	r3, [r1, #0]
 800a3cc:	4770      	bx	lr
 800a3ce:	4610      	mov	r0, r2
 800a3d0:	e7e9      	b.n	800a3a6 <__lo0bits+0x2a>
 800a3d2:	2000      	movs	r0, #0
 800a3d4:	4770      	bx	lr
 800a3d6:	2020      	movs	r0, #32
 800a3d8:	4770      	bx	lr
	...

0800a3dc <__i2b>:
 800a3dc:	b510      	push	{r4, lr}
 800a3de:	460c      	mov	r4, r1
 800a3e0:	2101      	movs	r1, #1
 800a3e2:	f7ff ff03 	bl	800a1ec <_Balloc>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	b928      	cbnz	r0, 800a3f6 <__i2b+0x1a>
 800a3ea:	4b05      	ldr	r3, [pc, #20]	; (800a400 <__i2b+0x24>)
 800a3ec:	4805      	ldr	r0, [pc, #20]	; (800a404 <__i2b+0x28>)
 800a3ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a3f2:	f000 fdf5 	bl	800afe0 <__assert_func>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	6144      	str	r4, [r0, #20]
 800a3fa:	6103      	str	r3, [r0, #16]
 800a3fc:	bd10      	pop	{r4, pc}
 800a3fe:	bf00      	nop
 800a400:	0800b56b 	.word	0x0800b56b
 800a404:	0800b5dc 	.word	0x0800b5dc

0800a408 <__multiply>:
 800a408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a40c:	4691      	mov	r9, r2
 800a40e:	690a      	ldr	r2, [r1, #16]
 800a410:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a414:	429a      	cmp	r2, r3
 800a416:	bfb8      	it	lt
 800a418:	460b      	movlt	r3, r1
 800a41a:	460c      	mov	r4, r1
 800a41c:	bfbc      	itt	lt
 800a41e:	464c      	movlt	r4, r9
 800a420:	4699      	movlt	r9, r3
 800a422:	6927      	ldr	r7, [r4, #16]
 800a424:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a428:	68a3      	ldr	r3, [r4, #8]
 800a42a:	6861      	ldr	r1, [r4, #4]
 800a42c:	eb07 060a 	add.w	r6, r7, sl
 800a430:	42b3      	cmp	r3, r6
 800a432:	b085      	sub	sp, #20
 800a434:	bfb8      	it	lt
 800a436:	3101      	addlt	r1, #1
 800a438:	f7ff fed8 	bl	800a1ec <_Balloc>
 800a43c:	b930      	cbnz	r0, 800a44c <__multiply+0x44>
 800a43e:	4602      	mov	r2, r0
 800a440:	4b44      	ldr	r3, [pc, #272]	; (800a554 <__multiply+0x14c>)
 800a442:	4845      	ldr	r0, [pc, #276]	; (800a558 <__multiply+0x150>)
 800a444:	f240 115d 	movw	r1, #349	; 0x15d
 800a448:	f000 fdca 	bl	800afe0 <__assert_func>
 800a44c:	f100 0514 	add.w	r5, r0, #20
 800a450:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a454:	462b      	mov	r3, r5
 800a456:	2200      	movs	r2, #0
 800a458:	4543      	cmp	r3, r8
 800a45a:	d321      	bcc.n	800a4a0 <__multiply+0x98>
 800a45c:	f104 0314 	add.w	r3, r4, #20
 800a460:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a464:	f109 0314 	add.w	r3, r9, #20
 800a468:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a46c:	9202      	str	r2, [sp, #8]
 800a46e:	1b3a      	subs	r2, r7, r4
 800a470:	3a15      	subs	r2, #21
 800a472:	f022 0203 	bic.w	r2, r2, #3
 800a476:	3204      	adds	r2, #4
 800a478:	f104 0115 	add.w	r1, r4, #21
 800a47c:	428f      	cmp	r7, r1
 800a47e:	bf38      	it	cc
 800a480:	2204      	movcc	r2, #4
 800a482:	9201      	str	r2, [sp, #4]
 800a484:	9a02      	ldr	r2, [sp, #8]
 800a486:	9303      	str	r3, [sp, #12]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d80c      	bhi.n	800a4a6 <__multiply+0x9e>
 800a48c:	2e00      	cmp	r6, #0
 800a48e:	dd03      	ble.n	800a498 <__multiply+0x90>
 800a490:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a494:	2b00      	cmp	r3, #0
 800a496:	d05a      	beq.n	800a54e <__multiply+0x146>
 800a498:	6106      	str	r6, [r0, #16]
 800a49a:	b005      	add	sp, #20
 800a49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4a0:	f843 2b04 	str.w	r2, [r3], #4
 800a4a4:	e7d8      	b.n	800a458 <__multiply+0x50>
 800a4a6:	f8b3 a000 	ldrh.w	sl, [r3]
 800a4aa:	f1ba 0f00 	cmp.w	sl, #0
 800a4ae:	d024      	beq.n	800a4fa <__multiply+0xf2>
 800a4b0:	f104 0e14 	add.w	lr, r4, #20
 800a4b4:	46a9      	mov	r9, r5
 800a4b6:	f04f 0c00 	mov.w	ip, #0
 800a4ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a4be:	f8d9 1000 	ldr.w	r1, [r9]
 800a4c2:	fa1f fb82 	uxth.w	fp, r2
 800a4c6:	b289      	uxth	r1, r1
 800a4c8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a4cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a4d0:	f8d9 2000 	ldr.w	r2, [r9]
 800a4d4:	4461      	add	r1, ip
 800a4d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a4da:	fb0a c20b 	mla	r2, sl, fp, ip
 800a4de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a4e2:	b289      	uxth	r1, r1
 800a4e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a4e8:	4577      	cmp	r7, lr
 800a4ea:	f849 1b04 	str.w	r1, [r9], #4
 800a4ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a4f2:	d8e2      	bhi.n	800a4ba <__multiply+0xb2>
 800a4f4:	9a01      	ldr	r2, [sp, #4]
 800a4f6:	f845 c002 	str.w	ip, [r5, r2]
 800a4fa:	9a03      	ldr	r2, [sp, #12]
 800a4fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a500:	3304      	adds	r3, #4
 800a502:	f1b9 0f00 	cmp.w	r9, #0
 800a506:	d020      	beq.n	800a54a <__multiply+0x142>
 800a508:	6829      	ldr	r1, [r5, #0]
 800a50a:	f104 0c14 	add.w	ip, r4, #20
 800a50e:	46ae      	mov	lr, r5
 800a510:	f04f 0a00 	mov.w	sl, #0
 800a514:	f8bc b000 	ldrh.w	fp, [ip]
 800a518:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a51c:	fb09 220b 	mla	r2, r9, fp, r2
 800a520:	4492      	add	sl, r2
 800a522:	b289      	uxth	r1, r1
 800a524:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a528:	f84e 1b04 	str.w	r1, [lr], #4
 800a52c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a530:	f8be 1000 	ldrh.w	r1, [lr]
 800a534:	0c12      	lsrs	r2, r2, #16
 800a536:	fb09 1102 	mla	r1, r9, r2, r1
 800a53a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a53e:	4567      	cmp	r7, ip
 800a540:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a544:	d8e6      	bhi.n	800a514 <__multiply+0x10c>
 800a546:	9a01      	ldr	r2, [sp, #4]
 800a548:	50a9      	str	r1, [r5, r2]
 800a54a:	3504      	adds	r5, #4
 800a54c:	e79a      	b.n	800a484 <__multiply+0x7c>
 800a54e:	3e01      	subs	r6, #1
 800a550:	e79c      	b.n	800a48c <__multiply+0x84>
 800a552:	bf00      	nop
 800a554:	0800b56b 	.word	0x0800b56b
 800a558:	0800b5dc 	.word	0x0800b5dc

0800a55c <__pow5mult>:
 800a55c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a560:	4615      	mov	r5, r2
 800a562:	f012 0203 	ands.w	r2, r2, #3
 800a566:	4606      	mov	r6, r0
 800a568:	460f      	mov	r7, r1
 800a56a:	d007      	beq.n	800a57c <__pow5mult+0x20>
 800a56c:	4c25      	ldr	r4, [pc, #148]	; (800a604 <__pow5mult+0xa8>)
 800a56e:	3a01      	subs	r2, #1
 800a570:	2300      	movs	r3, #0
 800a572:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a576:	f7ff fe9b 	bl	800a2b0 <__multadd>
 800a57a:	4607      	mov	r7, r0
 800a57c:	10ad      	asrs	r5, r5, #2
 800a57e:	d03d      	beq.n	800a5fc <__pow5mult+0xa0>
 800a580:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a582:	b97c      	cbnz	r4, 800a5a4 <__pow5mult+0x48>
 800a584:	2010      	movs	r0, #16
 800a586:	f7ff fe1b 	bl	800a1c0 <malloc>
 800a58a:	4602      	mov	r2, r0
 800a58c:	6270      	str	r0, [r6, #36]	; 0x24
 800a58e:	b928      	cbnz	r0, 800a59c <__pow5mult+0x40>
 800a590:	4b1d      	ldr	r3, [pc, #116]	; (800a608 <__pow5mult+0xac>)
 800a592:	481e      	ldr	r0, [pc, #120]	; (800a60c <__pow5mult+0xb0>)
 800a594:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a598:	f000 fd22 	bl	800afe0 <__assert_func>
 800a59c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5a0:	6004      	str	r4, [r0, #0]
 800a5a2:	60c4      	str	r4, [r0, #12]
 800a5a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a5a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a5ac:	b94c      	cbnz	r4, 800a5c2 <__pow5mult+0x66>
 800a5ae:	f240 2171 	movw	r1, #625	; 0x271
 800a5b2:	4630      	mov	r0, r6
 800a5b4:	f7ff ff12 	bl	800a3dc <__i2b>
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5be:	4604      	mov	r4, r0
 800a5c0:	6003      	str	r3, [r0, #0]
 800a5c2:	f04f 0900 	mov.w	r9, #0
 800a5c6:	07eb      	lsls	r3, r5, #31
 800a5c8:	d50a      	bpl.n	800a5e0 <__pow5mult+0x84>
 800a5ca:	4639      	mov	r1, r7
 800a5cc:	4622      	mov	r2, r4
 800a5ce:	4630      	mov	r0, r6
 800a5d0:	f7ff ff1a 	bl	800a408 <__multiply>
 800a5d4:	4639      	mov	r1, r7
 800a5d6:	4680      	mov	r8, r0
 800a5d8:	4630      	mov	r0, r6
 800a5da:	f7ff fe47 	bl	800a26c <_Bfree>
 800a5de:	4647      	mov	r7, r8
 800a5e0:	106d      	asrs	r5, r5, #1
 800a5e2:	d00b      	beq.n	800a5fc <__pow5mult+0xa0>
 800a5e4:	6820      	ldr	r0, [r4, #0]
 800a5e6:	b938      	cbnz	r0, 800a5f8 <__pow5mult+0x9c>
 800a5e8:	4622      	mov	r2, r4
 800a5ea:	4621      	mov	r1, r4
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	f7ff ff0b 	bl	800a408 <__multiply>
 800a5f2:	6020      	str	r0, [r4, #0]
 800a5f4:	f8c0 9000 	str.w	r9, [r0]
 800a5f8:	4604      	mov	r4, r0
 800a5fa:	e7e4      	b.n	800a5c6 <__pow5mult+0x6a>
 800a5fc:	4638      	mov	r0, r7
 800a5fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a602:	bf00      	nop
 800a604:	0800b728 	.word	0x0800b728
 800a608:	0800b4f9 	.word	0x0800b4f9
 800a60c:	0800b5dc 	.word	0x0800b5dc

0800a610 <__lshift>:
 800a610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a614:	460c      	mov	r4, r1
 800a616:	6849      	ldr	r1, [r1, #4]
 800a618:	6923      	ldr	r3, [r4, #16]
 800a61a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a61e:	68a3      	ldr	r3, [r4, #8]
 800a620:	4607      	mov	r7, r0
 800a622:	4691      	mov	r9, r2
 800a624:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a628:	f108 0601 	add.w	r6, r8, #1
 800a62c:	42b3      	cmp	r3, r6
 800a62e:	db0b      	blt.n	800a648 <__lshift+0x38>
 800a630:	4638      	mov	r0, r7
 800a632:	f7ff fddb 	bl	800a1ec <_Balloc>
 800a636:	4605      	mov	r5, r0
 800a638:	b948      	cbnz	r0, 800a64e <__lshift+0x3e>
 800a63a:	4602      	mov	r2, r0
 800a63c:	4b2a      	ldr	r3, [pc, #168]	; (800a6e8 <__lshift+0xd8>)
 800a63e:	482b      	ldr	r0, [pc, #172]	; (800a6ec <__lshift+0xdc>)
 800a640:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a644:	f000 fccc 	bl	800afe0 <__assert_func>
 800a648:	3101      	adds	r1, #1
 800a64a:	005b      	lsls	r3, r3, #1
 800a64c:	e7ee      	b.n	800a62c <__lshift+0x1c>
 800a64e:	2300      	movs	r3, #0
 800a650:	f100 0114 	add.w	r1, r0, #20
 800a654:	f100 0210 	add.w	r2, r0, #16
 800a658:	4618      	mov	r0, r3
 800a65a:	4553      	cmp	r3, sl
 800a65c:	db37      	blt.n	800a6ce <__lshift+0xbe>
 800a65e:	6920      	ldr	r0, [r4, #16]
 800a660:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a664:	f104 0314 	add.w	r3, r4, #20
 800a668:	f019 091f 	ands.w	r9, r9, #31
 800a66c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a670:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a674:	d02f      	beq.n	800a6d6 <__lshift+0xc6>
 800a676:	f1c9 0e20 	rsb	lr, r9, #32
 800a67a:	468a      	mov	sl, r1
 800a67c:	f04f 0c00 	mov.w	ip, #0
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	fa02 f209 	lsl.w	r2, r2, r9
 800a686:	ea42 020c 	orr.w	r2, r2, ip
 800a68a:	f84a 2b04 	str.w	r2, [sl], #4
 800a68e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a692:	4298      	cmp	r0, r3
 800a694:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a698:	d8f2      	bhi.n	800a680 <__lshift+0x70>
 800a69a:	1b03      	subs	r3, r0, r4
 800a69c:	3b15      	subs	r3, #21
 800a69e:	f023 0303 	bic.w	r3, r3, #3
 800a6a2:	3304      	adds	r3, #4
 800a6a4:	f104 0215 	add.w	r2, r4, #21
 800a6a8:	4290      	cmp	r0, r2
 800a6aa:	bf38      	it	cc
 800a6ac:	2304      	movcc	r3, #4
 800a6ae:	f841 c003 	str.w	ip, [r1, r3]
 800a6b2:	f1bc 0f00 	cmp.w	ip, #0
 800a6b6:	d001      	beq.n	800a6bc <__lshift+0xac>
 800a6b8:	f108 0602 	add.w	r6, r8, #2
 800a6bc:	3e01      	subs	r6, #1
 800a6be:	4638      	mov	r0, r7
 800a6c0:	612e      	str	r6, [r5, #16]
 800a6c2:	4621      	mov	r1, r4
 800a6c4:	f7ff fdd2 	bl	800a26c <_Bfree>
 800a6c8:	4628      	mov	r0, r5
 800a6ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	e7c1      	b.n	800a65a <__lshift+0x4a>
 800a6d6:	3904      	subs	r1, #4
 800a6d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a6e0:	4298      	cmp	r0, r3
 800a6e2:	d8f9      	bhi.n	800a6d8 <__lshift+0xc8>
 800a6e4:	e7ea      	b.n	800a6bc <__lshift+0xac>
 800a6e6:	bf00      	nop
 800a6e8:	0800b56b 	.word	0x0800b56b
 800a6ec:	0800b5dc 	.word	0x0800b5dc

0800a6f0 <__mcmp>:
 800a6f0:	b530      	push	{r4, r5, lr}
 800a6f2:	6902      	ldr	r2, [r0, #16]
 800a6f4:	690c      	ldr	r4, [r1, #16]
 800a6f6:	1b12      	subs	r2, r2, r4
 800a6f8:	d10e      	bne.n	800a718 <__mcmp+0x28>
 800a6fa:	f100 0314 	add.w	r3, r0, #20
 800a6fe:	3114      	adds	r1, #20
 800a700:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a704:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a708:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a70c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a710:	42a5      	cmp	r5, r4
 800a712:	d003      	beq.n	800a71c <__mcmp+0x2c>
 800a714:	d305      	bcc.n	800a722 <__mcmp+0x32>
 800a716:	2201      	movs	r2, #1
 800a718:	4610      	mov	r0, r2
 800a71a:	bd30      	pop	{r4, r5, pc}
 800a71c:	4283      	cmp	r3, r0
 800a71e:	d3f3      	bcc.n	800a708 <__mcmp+0x18>
 800a720:	e7fa      	b.n	800a718 <__mcmp+0x28>
 800a722:	f04f 32ff 	mov.w	r2, #4294967295
 800a726:	e7f7      	b.n	800a718 <__mcmp+0x28>

0800a728 <__mdiff>:
 800a728:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a72c:	460c      	mov	r4, r1
 800a72e:	4606      	mov	r6, r0
 800a730:	4611      	mov	r1, r2
 800a732:	4620      	mov	r0, r4
 800a734:	4690      	mov	r8, r2
 800a736:	f7ff ffdb 	bl	800a6f0 <__mcmp>
 800a73a:	1e05      	subs	r5, r0, #0
 800a73c:	d110      	bne.n	800a760 <__mdiff+0x38>
 800a73e:	4629      	mov	r1, r5
 800a740:	4630      	mov	r0, r6
 800a742:	f7ff fd53 	bl	800a1ec <_Balloc>
 800a746:	b930      	cbnz	r0, 800a756 <__mdiff+0x2e>
 800a748:	4b3a      	ldr	r3, [pc, #232]	; (800a834 <__mdiff+0x10c>)
 800a74a:	4602      	mov	r2, r0
 800a74c:	f240 2132 	movw	r1, #562	; 0x232
 800a750:	4839      	ldr	r0, [pc, #228]	; (800a838 <__mdiff+0x110>)
 800a752:	f000 fc45 	bl	800afe0 <__assert_func>
 800a756:	2301      	movs	r3, #1
 800a758:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a75c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a760:	bfa4      	itt	ge
 800a762:	4643      	movge	r3, r8
 800a764:	46a0      	movge	r8, r4
 800a766:	4630      	mov	r0, r6
 800a768:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a76c:	bfa6      	itte	ge
 800a76e:	461c      	movge	r4, r3
 800a770:	2500      	movge	r5, #0
 800a772:	2501      	movlt	r5, #1
 800a774:	f7ff fd3a 	bl	800a1ec <_Balloc>
 800a778:	b920      	cbnz	r0, 800a784 <__mdiff+0x5c>
 800a77a:	4b2e      	ldr	r3, [pc, #184]	; (800a834 <__mdiff+0x10c>)
 800a77c:	4602      	mov	r2, r0
 800a77e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a782:	e7e5      	b.n	800a750 <__mdiff+0x28>
 800a784:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a788:	6926      	ldr	r6, [r4, #16]
 800a78a:	60c5      	str	r5, [r0, #12]
 800a78c:	f104 0914 	add.w	r9, r4, #20
 800a790:	f108 0514 	add.w	r5, r8, #20
 800a794:	f100 0e14 	add.w	lr, r0, #20
 800a798:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a79c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a7a0:	f108 0210 	add.w	r2, r8, #16
 800a7a4:	46f2      	mov	sl, lr
 800a7a6:	2100      	movs	r1, #0
 800a7a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a7ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a7b0:	fa1f f883 	uxth.w	r8, r3
 800a7b4:	fa11 f18b 	uxtah	r1, r1, fp
 800a7b8:	0c1b      	lsrs	r3, r3, #16
 800a7ba:	eba1 0808 	sub.w	r8, r1, r8
 800a7be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a7c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a7c6:	fa1f f888 	uxth.w	r8, r8
 800a7ca:	1419      	asrs	r1, r3, #16
 800a7cc:	454e      	cmp	r6, r9
 800a7ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a7d2:	f84a 3b04 	str.w	r3, [sl], #4
 800a7d6:	d8e7      	bhi.n	800a7a8 <__mdiff+0x80>
 800a7d8:	1b33      	subs	r3, r6, r4
 800a7da:	3b15      	subs	r3, #21
 800a7dc:	f023 0303 	bic.w	r3, r3, #3
 800a7e0:	3304      	adds	r3, #4
 800a7e2:	3415      	adds	r4, #21
 800a7e4:	42a6      	cmp	r6, r4
 800a7e6:	bf38      	it	cc
 800a7e8:	2304      	movcc	r3, #4
 800a7ea:	441d      	add	r5, r3
 800a7ec:	4473      	add	r3, lr
 800a7ee:	469e      	mov	lr, r3
 800a7f0:	462e      	mov	r6, r5
 800a7f2:	4566      	cmp	r6, ip
 800a7f4:	d30e      	bcc.n	800a814 <__mdiff+0xec>
 800a7f6:	f10c 0203 	add.w	r2, ip, #3
 800a7fa:	1b52      	subs	r2, r2, r5
 800a7fc:	f022 0203 	bic.w	r2, r2, #3
 800a800:	3d03      	subs	r5, #3
 800a802:	45ac      	cmp	ip, r5
 800a804:	bf38      	it	cc
 800a806:	2200      	movcc	r2, #0
 800a808:	441a      	add	r2, r3
 800a80a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a80e:	b17b      	cbz	r3, 800a830 <__mdiff+0x108>
 800a810:	6107      	str	r7, [r0, #16]
 800a812:	e7a3      	b.n	800a75c <__mdiff+0x34>
 800a814:	f856 8b04 	ldr.w	r8, [r6], #4
 800a818:	fa11 f288 	uxtah	r2, r1, r8
 800a81c:	1414      	asrs	r4, r2, #16
 800a81e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a822:	b292      	uxth	r2, r2
 800a824:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a828:	f84e 2b04 	str.w	r2, [lr], #4
 800a82c:	1421      	asrs	r1, r4, #16
 800a82e:	e7e0      	b.n	800a7f2 <__mdiff+0xca>
 800a830:	3f01      	subs	r7, #1
 800a832:	e7ea      	b.n	800a80a <__mdiff+0xe2>
 800a834:	0800b56b 	.word	0x0800b56b
 800a838:	0800b5dc 	.word	0x0800b5dc

0800a83c <__d2b>:
 800a83c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a840:	4689      	mov	r9, r1
 800a842:	2101      	movs	r1, #1
 800a844:	ec57 6b10 	vmov	r6, r7, d0
 800a848:	4690      	mov	r8, r2
 800a84a:	f7ff fccf 	bl	800a1ec <_Balloc>
 800a84e:	4604      	mov	r4, r0
 800a850:	b930      	cbnz	r0, 800a860 <__d2b+0x24>
 800a852:	4602      	mov	r2, r0
 800a854:	4b25      	ldr	r3, [pc, #148]	; (800a8ec <__d2b+0xb0>)
 800a856:	4826      	ldr	r0, [pc, #152]	; (800a8f0 <__d2b+0xb4>)
 800a858:	f240 310a 	movw	r1, #778	; 0x30a
 800a85c:	f000 fbc0 	bl	800afe0 <__assert_func>
 800a860:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a864:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a868:	bb35      	cbnz	r5, 800a8b8 <__d2b+0x7c>
 800a86a:	2e00      	cmp	r6, #0
 800a86c:	9301      	str	r3, [sp, #4]
 800a86e:	d028      	beq.n	800a8c2 <__d2b+0x86>
 800a870:	4668      	mov	r0, sp
 800a872:	9600      	str	r6, [sp, #0]
 800a874:	f7ff fd82 	bl	800a37c <__lo0bits>
 800a878:	9900      	ldr	r1, [sp, #0]
 800a87a:	b300      	cbz	r0, 800a8be <__d2b+0x82>
 800a87c:	9a01      	ldr	r2, [sp, #4]
 800a87e:	f1c0 0320 	rsb	r3, r0, #32
 800a882:	fa02 f303 	lsl.w	r3, r2, r3
 800a886:	430b      	orrs	r3, r1
 800a888:	40c2      	lsrs	r2, r0
 800a88a:	6163      	str	r3, [r4, #20]
 800a88c:	9201      	str	r2, [sp, #4]
 800a88e:	9b01      	ldr	r3, [sp, #4]
 800a890:	61a3      	str	r3, [r4, #24]
 800a892:	2b00      	cmp	r3, #0
 800a894:	bf14      	ite	ne
 800a896:	2202      	movne	r2, #2
 800a898:	2201      	moveq	r2, #1
 800a89a:	6122      	str	r2, [r4, #16]
 800a89c:	b1d5      	cbz	r5, 800a8d4 <__d2b+0x98>
 800a89e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a8a2:	4405      	add	r5, r0
 800a8a4:	f8c9 5000 	str.w	r5, [r9]
 800a8a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a8ac:	f8c8 0000 	str.w	r0, [r8]
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	b003      	add	sp, #12
 800a8b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8bc:	e7d5      	b.n	800a86a <__d2b+0x2e>
 800a8be:	6161      	str	r1, [r4, #20]
 800a8c0:	e7e5      	b.n	800a88e <__d2b+0x52>
 800a8c2:	a801      	add	r0, sp, #4
 800a8c4:	f7ff fd5a 	bl	800a37c <__lo0bits>
 800a8c8:	9b01      	ldr	r3, [sp, #4]
 800a8ca:	6163      	str	r3, [r4, #20]
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	6122      	str	r2, [r4, #16]
 800a8d0:	3020      	adds	r0, #32
 800a8d2:	e7e3      	b.n	800a89c <__d2b+0x60>
 800a8d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a8d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a8dc:	f8c9 0000 	str.w	r0, [r9]
 800a8e0:	6918      	ldr	r0, [r3, #16]
 800a8e2:	f7ff fd2b 	bl	800a33c <__hi0bits>
 800a8e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a8ea:	e7df      	b.n	800a8ac <__d2b+0x70>
 800a8ec:	0800b56b 	.word	0x0800b56b
 800a8f0:	0800b5dc 	.word	0x0800b5dc

0800a8f4 <_calloc_r>:
 800a8f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8f6:	fba1 2402 	umull	r2, r4, r1, r2
 800a8fa:	b94c      	cbnz	r4, 800a910 <_calloc_r+0x1c>
 800a8fc:	4611      	mov	r1, r2
 800a8fe:	9201      	str	r2, [sp, #4]
 800a900:	f000 f87a 	bl	800a9f8 <_malloc_r>
 800a904:	9a01      	ldr	r2, [sp, #4]
 800a906:	4605      	mov	r5, r0
 800a908:	b930      	cbnz	r0, 800a918 <_calloc_r+0x24>
 800a90a:	4628      	mov	r0, r5
 800a90c:	b003      	add	sp, #12
 800a90e:	bd30      	pop	{r4, r5, pc}
 800a910:	220c      	movs	r2, #12
 800a912:	6002      	str	r2, [r0, #0]
 800a914:	2500      	movs	r5, #0
 800a916:	e7f8      	b.n	800a90a <_calloc_r+0x16>
 800a918:	4621      	mov	r1, r4
 800a91a:	f7fe f84f 	bl	80089bc <memset>
 800a91e:	e7f4      	b.n	800a90a <_calloc_r+0x16>

0800a920 <_free_r>:
 800a920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a922:	2900      	cmp	r1, #0
 800a924:	d044      	beq.n	800a9b0 <_free_r+0x90>
 800a926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a92a:	9001      	str	r0, [sp, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f1a1 0404 	sub.w	r4, r1, #4
 800a932:	bfb8      	it	lt
 800a934:	18e4      	addlt	r4, r4, r3
 800a936:	f000 fcdf 	bl	800b2f8 <__malloc_lock>
 800a93a:	4a1e      	ldr	r2, [pc, #120]	; (800a9b4 <_free_r+0x94>)
 800a93c:	9801      	ldr	r0, [sp, #4]
 800a93e:	6813      	ldr	r3, [r2, #0]
 800a940:	b933      	cbnz	r3, 800a950 <_free_r+0x30>
 800a942:	6063      	str	r3, [r4, #4]
 800a944:	6014      	str	r4, [r2, #0]
 800a946:	b003      	add	sp, #12
 800a948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a94c:	f000 bcda 	b.w	800b304 <__malloc_unlock>
 800a950:	42a3      	cmp	r3, r4
 800a952:	d908      	bls.n	800a966 <_free_r+0x46>
 800a954:	6825      	ldr	r5, [r4, #0]
 800a956:	1961      	adds	r1, r4, r5
 800a958:	428b      	cmp	r3, r1
 800a95a:	bf01      	itttt	eq
 800a95c:	6819      	ldreq	r1, [r3, #0]
 800a95e:	685b      	ldreq	r3, [r3, #4]
 800a960:	1949      	addeq	r1, r1, r5
 800a962:	6021      	streq	r1, [r4, #0]
 800a964:	e7ed      	b.n	800a942 <_free_r+0x22>
 800a966:	461a      	mov	r2, r3
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	b10b      	cbz	r3, 800a970 <_free_r+0x50>
 800a96c:	42a3      	cmp	r3, r4
 800a96e:	d9fa      	bls.n	800a966 <_free_r+0x46>
 800a970:	6811      	ldr	r1, [r2, #0]
 800a972:	1855      	adds	r5, r2, r1
 800a974:	42a5      	cmp	r5, r4
 800a976:	d10b      	bne.n	800a990 <_free_r+0x70>
 800a978:	6824      	ldr	r4, [r4, #0]
 800a97a:	4421      	add	r1, r4
 800a97c:	1854      	adds	r4, r2, r1
 800a97e:	42a3      	cmp	r3, r4
 800a980:	6011      	str	r1, [r2, #0]
 800a982:	d1e0      	bne.n	800a946 <_free_r+0x26>
 800a984:	681c      	ldr	r4, [r3, #0]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	6053      	str	r3, [r2, #4]
 800a98a:	4421      	add	r1, r4
 800a98c:	6011      	str	r1, [r2, #0]
 800a98e:	e7da      	b.n	800a946 <_free_r+0x26>
 800a990:	d902      	bls.n	800a998 <_free_r+0x78>
 800a992:	230c      	movs	r3, #12
 800a994:	6003      	str	r3, [r0, #0]
 800a996:	e7d6      	b.n	800a946 <_free_r+0x26>
 800a998:	6825      	ldr	r5, [r4, #0]
 800a99a:	1961      	adds	r1, r4, r5
 800a99c:	428b      	cmp	r3, r1
 800a99e:	bf04      	itt	eq
 800a9a0:	6819      	ldreq	r1, [r3, #0]
 800a9a2:	685b      	ldreq	r3, [r3, #4]
 800a9a4:	6063      	str	r3, [r4, #4]
 800a9a6:	bf04      	itt	eq
 800a9a8:	1949      	addeq	r1, r1, r5
 800a9aa:	6021      	streq	r1, [r4, #0]
 800a9ac:	6054      	str	r4, [r2, #4]
 800a9ae:	e7ca      	b.n	800a946 <_free_r+0x26>
 800a9b0:	b003      	add	sp, #12
 800a9b2:	bd30      	pop	{r4, r5, pc}
 800a9b4:	20001584 	.word	0x20001584

0800a9b8 <sbrk_aligned>:
 800a9b8:	b570      	push	{r4, r5, r6, lr}
 800a9ba:	4e0e      	ldr	r6, [pc, #56]	; (800a9f4 <sbrk_aligned+0x3c>)
 800a9bc:	460c      	mov	r4, r1
 800a9be:	6831      	ldr	r1, [r6, #0]
 800a9c0:	4605      	mov	r5, r0
 800a9c2:	b911      	cbnz	r1, 800a9ca <sbrk_aligned+0x12>
 800a9c4:	f000 f9e6 	bl	800ad94 <_sbrk_r>
 800a9c8:	6030      	str	r0, [r6, #0]
 800a9ca:	4621      	mov	r1, r4
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	f000 f9e1 	bl	800ad94 <_sbrk_r>
 800a9d2:	1c43      	adds	r3, r0, #1
 800a9d4:	d00a      	beq.n	800a9ec <sbrk_aligned+0x34>
 800a9d6:	1cc4      	adds	r4, r0, #3
 800a9d8:	f024 0403 	bic.w	r4, r4, #3
 800a9dc:	42a0      	cmp	r0, r4
 800a9de:	d007      	beq.n	800a9f0 <sbrk_aligned+0x38>
 800a9e0:	1a21      	subs	r1, r4, r0
 800a9e2:	4628      	mov	r0, r5
 800a9e4:	f000 f9d6 	bl	800ad94 <_sbrk_r>
 800a9e8:	3001      	adds	r0, #1
 800a9ea:	d101      	bne.n	800a9f0 <sbrk_aligned+0x38>
 800a9ec:	f04f 34ff 	mov.w	r4, #4294967295
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	bd70      	pop	{r4, r5, r6, pc}
 800a9f4:	20001588 	.word	0x20001588

0800a9f8 <_malloc_r>:
 800a9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9fc:	1ccd      	adds	r5, r1, #3
 800a9fe:	f025 0503 	bic.w	r5, r5, #3
 800aa02:	3508      	adds	r5, #8
 800aa04:	2d0c      	cmp	r5, #12
 800aa06:	bf38      	it	cc
 800aa08:	250c      	movcc	r5, #12
 800aa0a:	2d00      	cmp	r5, #0
 800aa0c:	4607      	mov	r7, r0
 800aa0e:	db01      	blt.n	800aa14 <_malloc_r+0x1c>
 800aa10:	42a9      	cmp	r1, r5
 800aa12:	d905      	bls.n	800aa20 <_malloc_r+0x28>
 800aa14:	230c      	movs	r3, #12
 800aa16:	603b      	str	r3, [r7, #0]
 800aa18:	2600      	movs	r6, #0
 800aa1a:	4630      	mov	r0, r6
 800aa1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa20:	4e2e      	ldr	r6, [pc, #184]	; (800aadc <_malloc_r+0xe4>)
 800aa22:	f000 fc69 	bl	800b2f8 <__malloc_lock>
 800aa26:	6833      	ldr	r3, [r6, #0]
 800aa28:	461c      	mov	r4, r3
 800aa2a:	bb34      	cbnz	r4, 800aa7a <_malloc_r+0x82>
 800aa2c:	4629      	mov	r1, r5
 800aa2e:	4638      	mov	r0, r7
 800aa30:	f7ff ffc2 	bl	800a9b8 <sbrk_aligned>
 800aa34:	1c43      	adds	r3, r0, #1
 800aa36:	4604      	mov	r4, r0
 800aa38:	d14d      	bne.n	800aad6 <_malloc_r+0xde>
 800aa3a:	6834      	ldr	r4, [r6, #0]
 800aa3c:	4626      	mov	r6, r4
 800aa3e:	2e00      	cmp	r6, #0
 800aa40:	d140      	bne.n	800aac4 <_malloc_r+0xcc>
 800aa42:	6823      	ldr	r3, [r4, #0]
 800aa44:	4631      	mov	r1, r6
 800aa46:	4638      	mov	r0, r7
 800aa48:	eb04 0803 	add.w	r8, r4, r3
 800aa4c:	f000 f9a2 	bl	800ad94 <_sbrk_r>
 800aa50:	4580      	cmp	r8, r0
 800aa52:	d13a      	bne.n	800aaca <_malloc_r+0xd2>
 800aa54:	6821      	ldr	r1, [r4, #0]
 800aa56:	3503      	adds	r5, #3
 800aa58:	1a6d      	subs	r5, r5, r1
 800aa5a:	f025 0503 	bic.w	r5, r5, #3
 800aa5e:	3508      	adds	r5, #8
 800aa60:	2d0c      	cmp	r5, #12
 800aa62:	bf38      	it	cc
 800aa64:	250c      	movcc	r5, #12
 800aa66:	4629      	mov	r1, r5
 800aa68:	4638      	mov	r0, r7
 800aa6a:	f7ff ffa5 	bl	800a9b8 <sbrk_aligned>
 800aa6e:	3001      	adds	r0, #1
 800aa70:	d02b      	beq.n	800aaca <_malloc_r+0xd2>
 800aa72:	6823      	ldr	r3, [r4, #0]
 800aa74:	442b      	add	r3, r5
 800aa76:	6023      	str	r3, [r4, #0]
 800aa78:	e00e      	b.n	800aa98 <_malloc_r+0xa0>
 800aa7a:	6822      	ldr	r2, [r4, #0]
 800aa7c:	1b52      	subs	r2, r2, r5
 800aa7e:	d41e      	bmi.n	800aabe <_malloc_r+0xc6>
 800aa80:	2a0b      	cmp	r2, #11
 800aa82:	d916      	bls.n	800aab2 <_malloc_r+0xba>
 800aa84:	1961      	adds	r1, r4, r5
 800aa86:	42a3      	cmp	r3, r4
 800aa88:	6025      	str	r5, [r4, #0]
 800aa8a:	bf18      	it	ne
 800aa8c:	6059      	strne	r1, [r3, #4]
 800aa8e:	6863      	ldr	r3, [r4, #4]
 800aa90:	bf08      	it	eq
 800aa92:	6031      	streq	r1, [r6, #0]
 800aa94:	5162      	str	r2, [r4, r5]
 800aa96:	604b      	str	r3, [r1, #4]
 800aa98:	4638      	mov	r0, r7
 800aa9a:	f104 060b 	add.w	r6, r4, #11
 800aa9e:	f000 fc31 	bl	800b304 <__malloc_unlock>
 800aaa2:	f026 0607 	bic.w	r6, r6, #7
 800aaa6:	1d23      	adds	r3, r4, #4
 800aaa8:	1af2      	subs	r2, r6, r3
 800aaaa:	d0b6      	beq.n	800aa1a <_malloc_r+0x22>
 800aaac:	1b9b      	subs	r3, r3, r6
 800aaae:	50a3      	str	r3, [r4, r2]
 800aab0:	e7b3      	b.n	800aa1a <_malloc_r+0x22>
 800aab2:	6862      	ldr	r2, [r4, #4]
 800aab4:	42a3      	cmp	r3, r4
 800aab6:	bf0c      	ite	eq
 800aab8:	6032      	streq	r2, [r6, #0]
 800aaba:	605a      	strne	r2, [r3, #4]
 800aabc:	e7ec      	b.n	800aa98 <_malloc_r+0xa0>
 800aabe:	4623      	mov	r3, r4
 800aac0:	6864      	ldr	r4, [r4, #4]
 800aac2:	e7b2      	b.n	800aa2a <_malloc_r+0x32>
 800aac4:	4634      	mov	r4, r6
 800aac6:	6876      	ldr	r6, [r6, #4]
 800aac8:	e7b9      	b.n	800aa3e <_malloc_r+0x46>
 800aaca:	230c      	movs	r3, #12
 800aacc:	603b      	str	r3, [r7, #0]
 800aace:	4638      	mov	r0, r7
 800aad0:	f000 fc18 	bl	800b304 <__malloc_unlock>
 800aad4:	e7a1      	b.n	800aa1a <_malloc_r+0x22>
 800aad6:	6025      	str	r5, [r4, #0]
 800aad8:	e7de      	b.n	800aa98 <_malloc_r+0xa0>
 800aada:	bf00      	nop
 800aadc:	20001584 	.word	0x20001584

0800aae0 <__sfputc_r>:
 800aae0:	6893      	ldr	r3, [r2, #8]
 800aae2:	3b01      	subs	r3, #1
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	b410      	push	{r4}
 800aae8:	6093      	str	r3, [r2, #8]
 800aaea:	da08      	bge.n	800aafe <__sfputc_r+0x1e>
 800aaec:	6994      	ldr	r4, [r2, #24]
 800aaee:	42a3      	cmp	r3, r4
 800aaf0:	db01      	blt.n	800aaf6 <__sfputc_r+0x16>
 800aaf2:	290a      	cmp	r1, #10
 800aaf4:	d103      	bne.n	800aafe <__sfputc_r+0x1e>
 800aaf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aafa:	f000 b99f 	b.w	800ae3c <__swbuf_r>
 800aafe:	6813      	ldr	r3, [r2, #0]
 800ab00:	1c58      	adds	r0, r3, #1
 800ab02:	6010      	str	r0, [r2, #0]
 800ab04:	7019      	strb	r1, [r3, #0]
 800ab06:	4608      	mov	r0, r1
 800ab08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab0c:	4770      	bx	lr

0800ab0e <__sfputs_r>:
 800ab0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab10:	4606      	mov	r6, r0
 800ab12:	460f      	mov	r7, r1
 800ab14:	4614      	mov	r4, r2
 800ab16:	18d5      	adds	r5, r2, r3
 800ab18:	42ac      	cmp	r4, r5
 800ab1a:	d101      	bne.n	800ab20 <__sfputs_r+0x12>
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	e007      	b.n	800ab30 <__sfputs_r+0x22>
 800ab20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab24:	463a      	mov	r2, r7
 800ab26:	4630      	mov	r0, r6
 800ab28:	f7ff ffda 	bl	800aae0 <__sfputc_r>
 800ab2c:	1c43      	adds	r3, r0, #1
 800ab2e:	d1f3      	bne.n	800ab18 <__sfputs_r+0xa>
 800ab30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab34 <_vfiprintf_r>:
 800ab34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab38:	460d      	mov	r5, r1
 800ab3a:	b09d      	sub	sp, #116	; 0x74
 800ab3c:	4614      	mov	r4, r2
 800ab3e:	4698      	mov	r8, r3
 800ab40:	4606      	mov	r6, r0
 800ab42:	b118      	cbz	r0, 800ab4c <_vfiprintf_r+0x18>
 800ab44:	6983      	ldr	r3, [r0, #24]
 800ab46:	b90b      	cbnz	r3, 800ab4c <_vfiprintf_r+0x18>
 800ab48:	f7ff fa94 	bl	800a074 <__sinit>
 800ab4c:	4b89      	ldr	r3, [pc, #548]	; (800ad74 <_vfiprintf_r+0x240>)
 800ab4e:	429d      	cmp	r5, r3
 800ab50:	d11b      	bne.n	800ab8a <_vfiprintf_r+0x56>
 800ab52:	6875      	ldr	r5, [r6, #4]
 800ab54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab56:	07d9      	lsls	r1, r3, #31
 800ab58:	d405      	bmi.n	800ab66 <_vfiprintf_r+0x32>
 800ab5a:	89ab      	ldrh	r3, [r5, #12]
 800ab5c:	059a      	lsls	r2, r3, #22
 800ab5e:	d402      	bmi.n	800ab66 <_vfiprintf_r+0x32>
 800ab60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab62:	f7ff fb2a 	bl	800a1ba <__retarget_lock_acquire_recursive>
 800ab66:	89ab      	ldrh	r3, [r5, #12]
 800ab68:	071b      	lsls	r3, r3, #28
 800ab6a:	d501      	bpl.n	800ab70 <_vfiprintf_r+0x3c>
 800ab6c:	692b      	ldr	r3, [r5, #16]
 800ab6e:	b9eb      	cbnz	r3, 800abac <_vfiprintf_r+0x78>
 800ab70:	4629      	mov	r1, r5
 800ab72:	4630      	mov	r0, r6
 800ab74:	f000 f9c6 	bl	800af04 <__swsetup_r>
 800ab78:	b1c0      	cbz	r0, 800abac <_vfiprintf_r+0x78>
 800ab7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab7c:	07dc      	lsls	r4, r3, #31
 800ab7e:	d50e      	bpl.n	800ab9e <_vfiprintf_r+0x6a>
 800ab80:	f04f 30ff 	mov.w	r0, #4294967295
 800ab84:	b01d      	add	sp, #116	; 0x74
 800ab86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab8a:	4b7b      	ldr	r3, [pc, #492]	; (800ad78 <_vfiprintf_r+0x244>)
 800ab8c:	429d      	cmp	r5, r3
 800ab8e:	d101      	bne.n	800ab94 <_vfiprintf_r+0x60>
 800ab90:	68b5      	ldr	r5, [r6, #8]
 800ab92:	e7df      	b.n	800ab54 <_vfiprintf_r+0x20>
 800ab94:	4b79      	ldr	r3, [pc, #484]	; (800ad7c <_vfiprintf_r+0x248>)
 800ab96:	429d      	cmp	r5, r3
 800ab98:	bf08      	it	eq
 800ab9a:	68f5      	ldreq	r5, [r6, #12]
 800ab9c:	e7da      	b.n	800ab54 <_vfiprintf_r+0x20>
 800ab9e:	89ab      	ldrh	r3, [r5, #12]
 800aba0:	0598      	lsls	r0, r3, #22
 800aba2:	d4ed      	bmi.n	800ab80 <_vfiprintf_r+0x4c>
 800aba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aba6:	f7ff fb09 	bl	800a1bc <__retarget_lock_release_recursive>
 800abaa:	e7e9      	b.n	800ab80 <_vfiprintf_r+0x4c>
 800abac:	2300      	movs	r3, #0
 800abae:	9309      	str	r3, [sp, #36]	; 0x24
 800abb0:	2320      	movs	r3, #32
 800abb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800abb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800abba:	2330      	movs	r3, #48	; 0x30
 800abbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ad80 <_vfiprintf_r+0x24c>
 800abc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abc4:	f04f 0901 	mov.w	r9, #1
 800abc8:	4623      	mov	r3, r4
 800abca:	469a      	mov	sl, r3
 800abcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abd0:	b10a      	cbz	r2, 800abd6 <_vfiprintf_r+0xa2>
 800abd2:	2a25      	cmp	r2, #37	; 0x25
 800abd4:	d1f9      	bne.n	800abca <_vfiprintf_r+0x96>
 800abd6:	ebba 0b04 	subs.w	fp, sl, r4
 800abda:	d00b      	beq.n	800abf4 <_vfiprintf_r+0xc0>
 800abdc:	465b      	mov	r3, fp
 800abde:	4622      	mov	r2, r4
 800abe0:	4629      	mov	r1, r5
 800abe2:	4630      	mov	r0, r6
 800abe4:	f7ff ff93 	bl	800ab0e <__sfputs_r>
 800abe8:	3001      	adds	r0, #1
 800abea:	f000 80aa 	beq.w	800ad42 <_vfiprintf_r+0x20e>
 800abee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abf0:	445a      	add	r2, fp
 800abf2:	9209      	str	r2, [sp, #36]	; 0x24
 800abf4:	f89a 3000 	ldrb.w	r3, [sl]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	f000 80a2 	beq.w	800ad42 <_vfiprintf_r+0x20e>
 800abfe:	2300      	movs	r3, #0
 800ac00:	f04f 32ff 	mov.w	r2, #4294967295
 800ac04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac08:	f10a 0a01 	add.w	sl, sl, #1
 800ac0c:	9304      	str	r3, [sp, #16]
 800ac0e:	9307      	str	r3, [sp, #28]
 800ac10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac14:	931a      	str	r3, [sp, #104]	; 0x68
 800ac16:	4654      	mov	r4, sl
 800ac18:	2205      	movs	r2, #5
 800ac1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac1e:	4858      	ldr	r0, [pc, #352]	; (800ad80 <_vfiprintf_r+0x24c>)
 800ac20:	f7f5 fafe 	bl	8000220 <memchr>
 800ac24:	9a04      	ldr	r2, [sp, #16]
 800ac26:	b9d8      	cbnz	r0, 800ac60 <_vfiprintf_r+0x12c>
 800ac28:	06d1      	lsls	r1, r2, #27
 800ac2a:	bf44      	itt	mi
 800ac2c:	2320      	movmi	r3, #32
 800ac2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac32:	0713      	lsls	r3, r2, #28
 800ac34:	bf44      	itt	mi
 800ac36:	232b      	movmi	r3, #43	; 0x2b
 800ac38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac40:	2b2a      	cmp	r3, #42	; 0x2a
 800ac42:	d015      	beq.n	800ac70 <_vfiprintf_r+0x13c>
 800ac44:	9a07      	ldr	r2, [sp, #28]
 800ac46:	4654      	mov	r4, sl
 800ac48:	2000      	movs	r0, #0
 800ac4a:	f04f 0c0a 	mov.w	ip, #10
 800ac4e:	4621      	mov	r1, r4
 800ac50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac54:	3b30      	subs	r3, #48	; 0x30
 800ac56:	2b09      	cmp	r3, #9
 800ac58:	d94e      	bls.n	800acf8 <_vfiprintf_r+0x1c4>
 800ac5a:	b1b0      	cbz	r0, 800ac8a <_vfiprintf_r+0x156>
 800ac5c:	9207      	str	r2, [sp, #28]
 800ac5e:	e014      	b.n	800ac8a <_vfiprintf_r+0x156>
 800ac60:	eba0 0308 	sub.w	r3, r0, r8
 800ac64:	fa09 f303 	lsl.w	r3, r9, r3
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	9304      	str	r3, [sp, #16]
 800ac6c:	46a2      	mov	sl, r4
 800ac6e:	e7d2      	b.n	800ac16 <_vfiprintf_r+0xe2>
 800ac70:	9b03      	ldr	r3, [sp, #12]
 800ac72:	1d19      	adds	r1, r3, #4
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	9103      	str	r1, [sp, #12]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	bfbb      	ittet	lt
 800ac7c:	425b      	neglt	r3, r3
 800ac7e:	f042 0202 	orrlt.w	r2, r2, #2
 800ac82:	9307      	strge	r3, [sp, #28]
 800ac84:	9307      	strlt	r3, [sp, #28]
 800ac86:	bfb8      	it	lt
 800ac88:	9204      	strlt	r2, [sp, #16]
 800ac8a:	7823      	ldrb	r3, [r4, #0]
 800ac8c:	2b2e      	cmp	r3, #46	; 0x2e
 800ac8e:	d10c      	bne.n	800acaa <_vfiprintf_r+0x176>
 800ac90:	7863      	ldrb	r3, [r4, #1]
 800ac92:	2b2a      	cmp	r3, #42	; 0x2a
 800ac94:	d135      	bne.n	800ad02 <_vfiprintf_r+0x1ce>
 800ac96:	9b03      	ldr	r3, [sp, #12]
 800ac98:	1d1a      	adds	r2, r3, #4
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	9203      	str	r2, [sp, #12]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	bfb8      	it	lt
 800aca2:	f04f 33ff 	movlt.w	r3, #4294967295
 800aca6:	3402      	adds	r4, #2
 800aca8:	9305      	str	r3, [sp, #20]
 800acaa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ad90 <_vfiprintf_r+0x25c>
 800acae:	7821      	ldrb	r1, [r4, #0]
 800acb0:	2203      	movs	r2, #3
 800acb2:	4650      	mov	r0, sl
 800acb4:	f7f5 fab4 	bl	8000220 <memchr>
 800acb8:	b140      	cbz	r0, 800accc <_vfiprintf_r+0x198>
 800acba:	2340      	movs	r3, #64	; 0x40
 800acbc:	eba0 000a 	sub.w	r0, r0, sl
 800acc0:	fa03 f000 	lsl.w	r0, r3, r0
 800acc4:	9b04      	ldr	r3, [sp, #16]
 800acc6:	4303      	orrs	r3, r0
 800acc8:	3401      	adds	r4, #1
 800acca:	9304      	str	r3, [sp, #16]
 800accc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acd0:	482c      	ldr	r0, [pc, #176]	; (800ad84 <_vfiprintf_r+0x250>)
 800acd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acd6:	2206      	movs	r2, #6
 800acd8:	f7f5 faa2 	bl	8000220 <memchr>
 800acdc:	2800      	cmp	r0, #0
 800acde:	d03f      	beq.n	800ad60 <_vfiprintf_r+0x22c>
 800ace0:	4b29      	ldr	r3, [pc, #164]	; (800ad88 <_vfiprintf_r+0x254>)
 800ace2:	bb1b      	cbnz	r3, 800ad2c <_vfiprintf_r+0x1f8>
 800ace4:	9b03      	ldr	r3, [sp, #12]
 800ace6:	3307      	adds	r3, #7
 800ace8:	f023 0307 	bic.w	r3, r3, #7
 800acec:	3308      	adds	r3, #8
 800acee:	9303      	str	r3, [sp, #12]
 800acf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acf2:	443b      	add	r3, r7
 800acf4:	9309      	str	r3, [sp, #36]	; 0x24
 800acf6:	e767      	b.n	800abc8 <_vfiprintf_r+0x94>
 800acf8:	fb0c 3202 	mla	r2, ip, r2, r3
 800acfc:	460c      	mov	r4, r1
 800acfe:	2001      	movs	r0, #1
 800ad00:	e7a5      	b.n	800ac4e <_vfiprintf_r+0x11a>
 800ad02:	2300      	movs	r3, #0
 800ad04:	3401      	adds	r4, #1
 800ad06:	9305      	str	r3, [sp, #20]
 800ad08:	4619      	mov	r1, r3
 800ad0a:	f04f 0c0a 	mov.w	ip, #10
 800ad0e:	4620      	mov	r0, r4
 800ad10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad14:	3a30      	subs	r2, #48	; 0x30
 800ad16:	2a09      	cmp	r2, #9
 800ad18:	d903      	bls.n	800ad22 <_vfiprintf_r+0x1ee>
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d0c5      	beq.n	800acaa <_vfiprintf_r+0x176>
 800ad1e:	9105      	str	r1, [sp, #20]
 800ad20:	e7c3      	b.n	800acaa <_vfiprintf_r+0x176>
 800ad22:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad26:	4604      	mov	r4, r0
 800ad28:	2301      	movs	r3, #1
 800ad2a:	e7f0      	b.n	800ad0e <_vfiprintf_r+0x1da>
 800ad2c:	ab03      	add	r3, sp, #12
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	462a      	mov	r2, r5
 800ad32:	4b16      	ldr	r3, [pc, #88]	; (800ad8c <_vfiprintf_r+0x258>)
 800ad34:	a904      	add	r1, sp, #16
 800ad36:	4630      	mov	r0, r6
 800ad38:	f7fd fee8 	bl	8008b0c <_printf_float>
 800ad3c:	4607      	mov	r7, r0
 800ad3e:	1c78      	adds	r0, r7, #1
 800ad40:	d1d6      	bne.n	800acf0 <_vfiprintf_r+0x1bc>
 800ad42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad44:	07d9      	lsls	r1, r3, #31
 800ad46:	d405      	bmi.n	800ad54 <_vfiprintf_r+0x220>
 800ad48:	89ab      	ldrh	r3, [r5, #12]
 800ad4a:	059a      	lsls	r2, r3, #22
 800ad4c:	d402      	bmi.n	800ad54 <_vfiprintf_r+0x220>
 800ad4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad50:	f7ff fa34 	bl	800a1bc <__retarget_lock_release_recursive>
 800ad54:	89ab      	ldrh	r3, [r5, #12]
 800ad56:	065b      	lsls	r3, r3, #25
 800ad58:	f53f af12 	bmi.w	800ab80 <_vfiprintf_r+0x4c>
 800ad5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad5e:	e711      	b.n	800ab84 <_vfiprintf_r+0x50>
 800ad60:	ab03      	add	r3, sp, #12
 800ad62:	9300      	str	r3, [sp, #0]
 800ad64:	462a      	mov	r2, r5
 800ad66:	4b09      	ldr	r3, [pc, #36]	; (800ad8c <_vfiprintf_r+0x258>)
 800ad68:	a904      	add	r1, sp, #16
 800ad6a:	4630      	mov	r0, r6
 800ad6c:	f7fe f972 	bl	8009054 <_printf_i>
 800ad70:	e7e4      	b.n	800ad3c <_vfiprintf_r+0x208>
 800ad72:	bf00      	nop
 800ad74:	0800b59c 	.word	0x0800b59c
 800ad78:	0800b5bc 	.word	0x0800b5bc
 800ad7c:	0800b57c 	.word	0x0800b57c
 800ad80:	0800b734 	.word	0x0800b734
 800ad84:	0800b73e 	.word	0x0800b73e
 800ad88:	08008b0d 	.word	0x08008b0d
 800ad8c:	0800ab0f 	.word	0x0800ab0f
 800ad90:	0800b73a 	.word	0x0800b73a

0800ad94 <_sbrk_r>:
 800ad94:	b538      	push	{r3, r4, r5, lr}
 800ad96:	4d06      	ldr	r5, [pc, #24]	; (800adb0 <_sbrk_r+0x1c>)
 800ad98:	2300      	movs	r3, #0
 800ad9a:	4604      	mov	r4, r0
 800ad9c:	4608      	mov	r0, r1
 800ad9e:	602b      	str	r3, [r5, #0]
 800ada0:	f7f6 fb06 	bl	80013b0 <_sbrk>
 800ada4:	1c43      	adds	r3, r0, #1
 800ada6:	d102      	bne.n	800adae <_sbrk_r+0x1a>
 800ada8:	682b      	ldr	r3, [r5, #0]
 800adaa:	b103      	cbz	r3, 800adae <_sbrk_r+0x1a>
 800adac:	6023      	str	r3, [r4, #0]
 800adae:	bd38      	pop	{r3, r4, r5, pc}
 800adb0:	2000158c 	.word	0x2000158c

0800adb4 <__sread>:
 800adb4:	b510      	push	{r4, lr}
 800adb6:	460c      	mov	r4, r1
 800adb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adbc:	f000 faa8 	bl	800b310 <_read_r>
 800adc0:	2800      	cmp	r0, #0
 800adc2:	bfab      	itete	ge
 800adc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800adc6:	89a3      	ldrhlt	r3, [r4, #12]
 800adc8:	181b      	addge	r3, r3, r0
 800adca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800adce:	bfac      	ite	ge
 800add0:	6563      	strge	r3, [r4, #84]	; 0x54
 800add2:	81a3      	strhlt	r3, [r4, #12]
 800add4:	bd10      	pop	{r4, pc}

0800add6 <__swrite>:
 800add6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adda:	461f      	mov	r7, r3
 800addc:	898b      	ldrh	r3, [r1, #12]
 800adde:	05db      	lsls	r3, r3, #23
 800ade0:	4605      	mov	r5, r0
 800ade2:	460c      	mov	r4, r1
 800ade4:	4616      	mov	r6, r2
 800ade6:	d505      	bpl.n	800adf4 <__swrite+0x1e>
 800ade8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adec:	2302      	movs	r3, #2
 800adee:	2200      	movs	r2, #0
 800adf0:	f000 f9f8 	bl	800b1e4 <_lseek_r>
 800adf4:	89a3      	ldrh	r3, [r4, #12]
 800adf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adfe:	81a3      	strh	r3, [r4, #12]
 800ae00:	4632      	mov	r2, r6
 800ae02:	463b      	mov	r3, r7
 800ae04:	4628      	mov	r0, r5
 800ae06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae0a:	f000 b869 	b.w	800aee0 <_write_r>

0800ae0e <__sseek>:
 800ae0e:	b510      	push	{r4, lr}
 800ae10:	460c      	mov	r4, r1
 800ae12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae16:	f000 f9e5 	bl	800b1e4 <_lseek_r>
 800ae1a:	1c43      	adds	r3, r0, #1
 800ae1c:	89a3      	ldrh	r3, [r4, #12]
 800ae1e:	bf15      	itete	ne
 800ae20:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae2a:	81a3      	strheq	r3, [r4, #12]
 800ae2c:	bf18      	it	ne
 800ae2e:	81a3      	strhne	r3, [r4, #12]
 800ae30:	bd10      	pop	{r4, pc}

0800ae32 <__sclose>:
 800ae32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae36:	f000 b8f1 	b.w	800b01c <_close_r>
	...

0800ae3c <__swbuf_r>:
 800ae3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3e:	460e      	mov	r6, r1
 800ae40:	4614      	mov	r4, r2
 800ae42:	4605      	mov	r5, r0
 800ae44:	b118      	cbz	r0, 800ae4e <__swbuf_r+0x12>
 800ae46:	6983      	ldr	r3, [r0, #24]
 800ae48:	b90b      	cbnz	r3, 800ae4e <__swbuf_r+0x12>
 800ae4a:	f7ff f913 	bl	800a074 <__sinit>
 800ae4e:	4b21      	ldr	r3, [pc, #132]	; (800aed4 <__swbuf_r+0x98>)
 800ae50:	429c      	cmp	r4, r3
 800ae52:	d12b      	bne.n	800aeac <__swbuf_r+0x70>
 800ae54:	686c      	ldr	r4, [r5, #4]
 800ae56:	69a3      	ldr	r3, [r4, #24]
 800ae58:	60a3      	str	r3, [r4, #8]
 800ae5a:	89a3      	ldrh	r3, [r4, #12]
 800ae5c:	071a      	lsls	r2, r3, #28
 800ae5e:	d52f      	bpl.n	800aec0 <__swbuf_r+0x84>
 800ae60:	6923      	ldr	r3, [r4, #16]
 800ae62:	b36b      	cbz	r3, 800aec0 <__swbuf_r+0x84>
 800ae64:	6923      	ldr	r3, [r4, #16]
 800ae66:	6820      	ldr	r0, [r4, #0]
 800ae68:	1ac0      	subs	r0, r0, r3
 800ae6a:	6963      	ldr	r3, [r4, #20]
 800ae6c:	b2f6      	uxtb	r6, r6
 800ae6e:	4283      	cmp	r3, r0
 800ae70:	4637      	mov	r7, r6
 800ae72:	dc04      	bgt.n	800ae7e <__swbuf_r+0x42>
 800ae74:	4621      	mov	r1, r4
 800ae76:	4628      	mov	r0, r5
 800ae78:	f000 f966 	bl	800b148 <_fflush_r>
 800ae7c:	bb30      	cbnz	r0, 800aecc <__swbuf_r+0x90>
 800ae7e:	68a3      	ldr	r3, [r4, #8]
 800ae80:	3b01      	subs	r3, #1
 800ae82:	60a3      	str	r3, [r4, #8]
 800ae84:	6823      	ldr	r3, [r4, #0]
 800ae86:	1c5a      	adds	r2, r3, #1
 800ae88:	6022      	str	r2, [r4, #0]
 800ae8a:	701e      	strb	r6, [r3, #0]
 800ae8c:	6963      	ldr	r3, [r4, #20]
 800ae8e:	3001      	adds	r0, #1
 800ae90:	4283      	cmp	r3, r0
 800ae92:	d004      	beq.n	800ae9e <__swbuf_r+0x62>
 800ae94:	89a3      	ldrh	r3, [r4, #12]
 800ae96:	07db      	lsls	r3, r3, #31
 800ae98:	d506      	bpl.n	800aea8 <__swbuf_r+0x6c>
 800ae9a:	2e0a      	cmp	r6, #10
 800ae9c:	d104      	bne.n	800aea8 <__swbuf_r+0x6c>
 800ae9e:	4621      	mov	r1, r4
 800aea0:	4628      	mov	r0, r5
 800aea2:	f000 f951 	bl	800b148 <_fflush_r>
 800aea6:	b988      	cbnz	r0, 800aecc <__swbuf_r+0x90>
 800aea8:	4638      	mov	r0, r7
 800aeaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aeac:	4b0a      	ldr	r3, [pc, #40]	; (800aed8 <__swbuf_r+0x9c>)
 800aeae:	429c      	cmp	r4, r3
 800aeb0:	d101      	bne.n	800aeb6 <__swbuf_r+0x7a>
 800aeb2:	68ac      	ldr	r4, [r5, #8]
 800aeb4:	e7cf      	b.n	800ae56 <__swbuf_r+0x1a>
 800aeb6:	4b09      	ldr	r3, [pc, #36]	; (800aedc <__swbuf_r+0xa0>)
 800aeb8:	429c      	cmp	r4, r3
 800aeba:	bf08      	it	eq
 800aebc:	68ec      	ldreq	r4, [r5, #12]
 800aebe:	e7ca      	b.n	800ae56 <__swbuf_r+0x1a>
 800aec0:	4621      	mov	r1, r4
 800aec2:	4628      	mov	r0, r5
 800aec4:	f000 f81e 	bl	800af04 <__swsetup_r>
 800aec8:	2800      	cmp	r0, #0
 800aeca:	d0cb      	beq.n	800ae64 <__swbuf_r+0x28>
 800aecc:	f04f 37ff 	mov.w	r7, #4294967295
 800aed0:	e7ea      	b.n	800aea8 <__swbuf_r+0x6c>
 800aed2:	bf00      	nop
 800aed4:	0800b59c 	.word	0x0800b59c
 800aed8:	0800b5bc 	.word	0x0800b5bc
 800aedc:	0800b57c 	.word	0x0800b57c

0800aee0 <_write_r>:
 800aee0:	b538      	push	{r3, r4, r5, lr}
 800aee2:	4d07      	ldr	r5, [pc, #28]	; (800af00 <_write_r+0x20>)
 800aee4:	4604      	mov	r4, r0
 800aee6:	4608      	mov	r0, r1
 800aee8:	4611      	mov	r1, r2
 800aeea:	2200      	movs	r2, #0
 800aeec:	602a      	str	r2, [r5, #0]
 800aeee:	461a      	mov	r2, r3
 800aef0:	f7f5 fffc 	bl	8000eec <_write>
 800aef4:	1c43      	adds	r3, r0, #1
 800aef6:	d102      	bne.n	800aefe <_write_r+0x1e>
 800aef8:	682b      	ldr	r3, [r5, #0]
 800aefa:	b103      	cbz	r3, 800aefe <_write_r+0x1e>
 800aefc:	6023      	str	r3, [r4, #0]
 800aefe:	bd38      	pop	{r3, r4, r5, pc}
 800af00:	2000158c 	.word	0x2000158c

0800af04 <__swsetup_r>:
 800af04:	4b32      	ldr	r3, [pc, #200]	; (800afd0 <__swsetup_r+0xcc>)
 800af06:	b570      	push	{r4, r5, r6, lr}
 800af08:	681d      	ldr	r5, [r3, #0]
 800af0a:	4606      	mov	r6, r0
 800af0c:	460c      	mov	r4, r1
 800af0e:	b125      	cbz	r5, 800af1a <__swsetup_r+0x16>
 800af10:	69ab      	ldr	r3, [r5, #24]
 800af12:	b913      	cbnz	r3, 800af1a <__swsetup_r+0x16>
 800af14:	4628      	mov	r0, r5
 800af16:	f7ff f8ad 	bl	800a074 <__sinit>
 800af1a:	4b2e      	ldr	r3, [pc, #184]	; (800afd4 <__swsetup_r+0xd0>)
 800af1c:	429c      	cmp	r4, r3
 800af1e:	d10f      	bne.n	800af40 <__swsetup_r+0x3c>
 800af20:	686c      	ldr	r4, [r5, #4]
 800af22:	89a3      	ldrh	r3, [r4, #12]
 800af24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af28:	0719      	lsls	r1, r3, #28
 800af2a:	d42c      	bmi.n	800af86 <__swsetup_r+0x82>
 800af2c:	06dd      	lsls	r5, r3, #27
 800af2e:	d411      	bmi.n	800af54 <__swsetup_r+0x50>
 800af30:	2309      	movs	r3, #9
 800af32:	6033      	str	r3, [r6, #0]
 800af34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af38:	81a3      	strh	r3, [r4, #12]
 800af3a:	f04f 30ff 	mov.w	r0, #4294967295
 800af3e:	e03e      	b.n	800afbe <__swsetup_r+0xba>
 800af40:	4b25      	ldr	r3, [pc, #148]	; (800afd8 <__swsetup_r+0xd4>)
 800af42:	429c      	cmp	r4, r3
 800af44:	d101      	bne.n	800af4a <__swsetup_r+0x46>
 800af46:	68ac      	ldr	r4, [r5, #8]
 800af48:	e7eb      	b.n	800af22 <__swsetup_r+0x1e>
 800af4a:	4b24      	ldr	r3, [pc, #144]	; (800afdc <__swsetup_r+0xd8>)
 800af4c:	429c      	cmp	r4, r3
 800af4e:	bf08      	it	eq
 800af50:	68ec      	ldreq	r4, [r5, #12]
 800af52:	e7e6      	b.n	800af22 <__swsetup_r+0x1e>
 800af54:	0758      	lsls	r0, r3, #29
 800af56:	d512      	bpl.n	800af7e <__swsetup_r+0x7a>
 800af58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af5a:	b141      	cbz	r1, 800af6e <__swsetup_r+0x6a>
 800af5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af60:	4299      	cmp	r1, r3
 800af62:	d002      	beq.n	800af6a <__swsetup_r+0x66>
 800af64:	4630      	mov	r0, r6
 800af66:	f7ff fcdb 	bl	800a920 <_free_r>
 800af6a:	2300      	movs	r3, #0
 800af6c:	6363      	str	r3, [r4, #52]	; 0x34
 800af6e:	89a3      	ldrh	r3, [r4, #12]
 800af70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af74:	81a3      	strh	r3, [r4, #12]
 800af76:	2300      	movs	r3, #0
 800af78:	6063      	str	r3, [r4, #4]
 800af7a:	6923      	ldr	r3, [r4, #16]
 800af7c:	6023      	str	r3, [r4, #0]
 800af7e:	89a3      	ldrh	r3, [r4, #12]
 800af80:	f043 0308 	orr.w	r3, r3, #8
 800af84:	81a3      	strh	r3, [r4, #12]
 800af86:	6923      	ldr	r3, [r4, #16]
 800af88:	b94b      	cbnz	r3, 800af9e <__swsetup_r+0x9a>
 800af8a:	89a3      	ldrh	r3, [r4, #12]
 800af8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af94:	d003      	beq.n	800af9e <__swsetup_r+0x9a>
 800af96:	4621      	mov	r1, r4
 800af98:	4630      	mov	r0, r6
 800af9a:	f000 f95b 	bl	800b254 <__smakebuf_r>
 800af9e:	89a0      	ldrh	r0, [r4, #12]
 800afa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afa4:	f010 0301 	ands.w	r3, r0, #1
 800afa8:	d00a      	beq.n	800afc0 <__swsetup_r+0xbc>
 800afaa:	2300      	movs	r3, #0
 800afac:	60a3      	str	r3, [r4, #8]
 800afae:	6963      	ldr	r3, [r4, #20]
 800afb0:	425b      	negs	r3, r3
 800afb2:	61a3      	str	r3, [r4, #24]
 800afb4:	6923      	ldr	r3, [r4, #16]
 800afb6:	b943      	cbnz	r3, 800afca <__swsetup_r+0xc6>
 800afb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800afbc:	d1ba      	bne.n	800af34 <__swsetup_r+0x30>
 800afbe:	bd70      	pop	{r4, r5, r6, pc}
 800afc0:	0781      	lsls	r1, r0, #30
 800afc2:	bf58      	it	pl
 800afc4:	6963      	ldrpl	r3, [r4, #20]
 800afc6:	60a3      	str	r3, [r4, #8]
 800afc8:	e7f4      	b.n	800afb4 <__swsetup_r+0xb0>
 800afca:	2000      	movs	r0, #0
 800afcc:	e7f7      	b.n	800afbe <__swsetup_r+0xba>
 800afce:	bf00      	nop
 800afd0:	20000160 	.word	0x20000160
 800afd4:	0800b59c 	.word	0x0800b59c
 800afd8:	0800b5bc 	.word	0x0800b5bc
 800afdc:	0800b57c 	.word	0x0800b57c

0800afe0 <__assert_func>:
 800afe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afe2:	4614      	mov	r4, r2
 800afe4:	461a      	mov	r2, r3
 800afe6:	4b09      	ldr	r3, [pc, #36]	; (800b00c <__assert_func+0x2c>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4605      	mov	r5, r0
 800afec:	68d8      	ldr	r0, [r3, #12]
 800afee:	b14c      	cbz	r4, 800b004 <__assert_func+0x24>
 800aff0:	4b07      	ldr	r3, [pc, #28]	; (800b010 <__assert_func+0x30>)
 800aff2:	9100      	str	r1, [sp, #0]
 800aff4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aff8:	4906      	ldr	r1, [pc, #24]	; (800b014 <__assert_func+0x34>)
 800affa:	462b      	mov	r3, r5
 800affc:	f000 f8e0 	bl	800b1c0 <fiprintf>
 800b000:	f000 f9a5 	bl	800b34e <abort>
 800b004:	4b04      	ldr	r3, [pc, #16]	; (800b018 <__assert_func+0x38>)
 800b006:	461c      	mov	r4, r3
 800b008:	e7f3      	b.n	800aff2 <__assert_func+0x12>
 800b00a:	bf00      	nop
 800b00c:	20000160 	.word	0x20000160
 800b010:	0800b745 	.word	0x0800b745
 800b014:	0800b752 	.word	0x0800b752
 800b018:	0800b780 	.word	0x0800b780

0800b01c <_close_r>:
 800b01c:	b538      	push	{r3, r4, r5, lr}
 800b01e:	4d06      	ldr	r5, [pc, #24]	; (800b038 <_close_r+0x1c>)
 800b020:	2300      	movs	r3, #0
 800b022:	4604      	mov	r4, r0
 800b024:	4608      	mov	r0, r1
 800b026:	602b      	str	r3, [r5, #0]
 800b028:	f7f6 f98d 	bl	8001346 <_close>
 800b02c:	1c43      	adds	r3, r0, #1
 800b02e:	d102      	bne.n	800b036 <_close_r+0x1a>
 800b030:	682b      	ldr	r3, [r5, #0]
 800b032:	b103      	cbz	r3, 800b036 <_close_r+0x1a>
 800b034:	6023      	str	r3, [r4, #0]
 800b036:	bd38      	pop	{r3, r4, r5, pc}
 800b038:	2000158c 	.word	0x2000158c

0800b03c <__sflush_r>:
 800b03c:	898a      	ldrh	r2, [r1, #12]
 800b03e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b042:	4605      	mov	r5, r0
 800b044:	0710      	lsls	r0, r2, #28
 800b046:	460c      	mov	r4, r1
 800b048:	d458      	bmi.n	800b0fc <__sflush_r+0xc0>
 800b04a:	684b      	ldr	r3, [r1, #4]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	dc05      	bgt.n	800b05c <__sflush_r+0x20>
 800b050:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b052:	2b00      	cmp	r3, #0
 800b054:	dc02      	bgt.n	800b05c <__sflush_r+0x20>
 800b056:	2000      	movs	r0, #0
 800b058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b05c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b05e:	2e00      	cmp	r6, #0
 800b060:	d0f9      	beq.n	800b056 <__sflush_r+0x1a>
 800b062:	2300      	movs	r3, #0
 800b064:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b068:	682f      	ldr	r7, [r5, #0]
 800b06a:	602b      	str	r3, [r5, #0]
 800b06c:	d032      	beq.n	800b0d4 <__sflush_r+0x98>
 800b06e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b070:	89a3      	ldrh	r3, [r4, #12]
 800b072:	075a      	lsls	r2, r3, #29
 800b074:	d505      	bpl.n	800b082 <__sflush_r+0x46>
 800b076:	6863      	ldr	r3, [r4, #4]
 800b078:	1ac0      	subs	r0, r0, r3
 800b07a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b07c:	b10b      	cbz	r3, 800b082 <__sflush_r+0x46>
 800b07e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b080:	1ac0      	subs	r0, r0, r3
 800b082:	2300      	movs	r3, #0
 800b084:	4602      	mov	r2, r0
 800b086:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b088:	6a21      	ldr	r1, [r4, #32]
 800b08a:	4628      	mov	r0, r5
 800b08c:	47b0      	blx	r6
 800b08e:	1c43      	adds	r3, r0, #1
 800b090:	89a3      	ldrh	r3, [r4, #12]
 800b092:	d106      	bne.n	800b0a2 <__sflush_r+0x66>
 800b094:	6829      	ldr	r1, [r5, #0]
 800b096:	291d      	cmp	r1, #29
 800b098:	d82c      	bhi.n	800b0f4 <__sflush_r+0xb8>
 800b09a:	4a2a      	ldr	r2, [pc, #168]	; (800b144 <__sflush_r+0x108>)
 800b09c:	40ca      	lsrs	r2, r1
 800b09e:	07d6      	lsls	r6, r2, #31
 800b0a0:	d528      	bpl.n	800b0f4 <__sflush_r+0xb8>
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	6062      	str	r2, [r4, #4]
 800b0a6:	04d9      	lsls	r1, r3, #19
 800b0a8:	6922      	ldr	r2, [r4, #16]
 800b0aa:	6022      	str	r2, [r4, #0]
 800b0ac:	d504      	bpl.n	800b0b8 <__sflush_r+0x7c>
 800b0ae:	1c42      	adds	r2, r0, #1
 800b0b0:	d101      	bne.n	800b0b6 <__sflush_r+0x7a>
 800b0b2:	682b      	ldr	r3, [r5, #0]
 800b0b4:	b903      	cbnz	r3, 800b0b8 <__sflush_r+0x7c>
 800b0b6:	6560      	str	r0, [r4, #84]	; 0x54
 800b0b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0ba:	602f      	str	r7, [r5, #0]
 800b0bc:	2900      	cmp	r1, #0
 800b0be:	d0ca      	beq.n	800b056 <__sflush_r+0x1a>
 800b0c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0c4:	4299      	cmp	r1, r3
 800b0c6:	d002      	beq.n	800b0ce <__sflush_r+0x92>
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	f7ff fc29 	bl	800a920 <_free_r>
 800b0ce:	2000      	movs	r0, #0
 800b0d0:	6360      	str	r0, [r4, #52]	; 0x34
 800b0d2:	e7c1      	b.n	800b058 <__sflush_r+0x1c>
 800b0d4:	6a21      	ldr	r1, [r4, #32]
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	4628      	mov	r0, r5
 800b0da:	47b0      	blx	r6
 800b0dc:	1c41      	adds	r1, r0, #1
 800b0de:	d1c7      	bne.n	800b070 <__sflush_r+0x34>
 800b0e0:	682b      	ldr	r3, [r5, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d0c4      	beq.n	800b070 <__sflush_r+0x34>
 800b0e6:	2b1d      	cmp	r3, #29
 800b0e8:	d001      	beq.n	800b0ee <__sflush_r+0xb2>
 800b0ea:	2b16      	cmp	r3, #22
 800b0ec:	d101      	bne.n	800b0f2 <__sflush_r+0xb6>
 800b0ee:	602f      	str	r7, [r5, #0]
 800b0f0:	e7b1      	b.n	800b056 <__sflush_r+0x1a>
 800b0f2:	89a3      	ldrh	r3, [r4, #12]
 800b0f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0f8:	81a3      	strh	r3, [r4, #12]
 800b0fa:	e7ad      	b.n	800b058 <__sflush_r+0x1c>
 800b0fc:	690f      	ldr	r7, [r1, #16]
 800b0fe:	2f00      	cmp	r7, #0
 800b100:	d0a9      	beq.n	800b056 <__sflush_r+0x1a>
 800b102:	0793      	lsls	r3, r2, #30
 800b104:	680e      	ldr	r6, [r1, #0]
 800b106:	bf08      	it	eq
 800b108:	694b      	ldreq	r3, [r1, #20]
 800b10a:	600f      	str	r7, [r1, #0]
 800b10c:	bf18      	it	ne
 800b10e:	2300      	movne	r3, #0
 800b110:	eba6 0807 	sub.w	r8, r6, r7
 800b114:	608b      	str	r3, [r1, #8]
 800b116:	f1b8 0f00 	cmp.w	r8, #0
 800b11a:	dd9c      	ble.n	800b056 <__sflush_r+0x1a>
 800b11c:	6a21      	ldr	r1, [r4, #32]
 800b11e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b120:	4643      	mov	r3, r8
 800b122:	463a      	mov	r2, r7
 800b124:	4628      	mov	r0, r5
 800b126:	47b0      	blx	r6
 800b128:	2800      	cmp	r0, #0
 800b12a:	dc06      	bgt.n	800b13a <__sflush_r+0xfe>
 800b12c:	89a3      	ldrh	r3, [r4, #12]
 800b12e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b132:	81a3      	strh	r3, [r4, #12]
 800b134:	f04f 30ff 	mov.w	r0, #4294967295
 800b138:	e78e      	b.n	800b058 <__sflush_r+0x1c>
 800b13a:	4407      	add	r7, r0
 800b13c:	eba8 0800 	sub.w	r8, r8, r0
 800b140:	e7e9      	b.n	800b116 <__sflush_r+0xda>
 800b142:	bf00      	nop
 800b144:	20400001 	.word	0x20400001

0800b148 <_fflush_r>:
 800b148:	b538      	push	{r3, r4, r5, lr}
 800b14a:	690b      	ldr	r3, [r1, #16]
 800b14c:	4605      	mov	r5, r0
 800b14e:	460c      	mov	r4, r1
 800b150:	b913      	cbnz	r3, 800b158 <_fflush_r+0x10>
 800b152:	2500      	movs	r5, #0
 800b154:	4628      	mov	r0, r5
 800b156:	bd38      	pop	{r3, r4, r5, pc}
 800b158:	b118      	cbz	r0, 800b162 <_fflush_r+0x1a>
 800b15a:	6983      	ldr	r3, [r0, #24]
 800b15c:	b90b      	cbnz	r3, 800b162 <_fflush_r+0x1a>
 800b15e:	f7fe ff89 	bl	800a074 <__sinit>
 800b162:	4b14      	ldr	r3, [pc, #80]	; (800b1b4 <_fflush_r+0x6c>)
 800b164:	429c      	cmp	r4, r3
 800b166:	d11b      	bne.n	800b1a0 <_fflush_r+0x58>
 800b168:	686c      	ldr	r4, [r5, #4]
 800b16a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d0ef      	beq.n	800b152 <_fflush_r+0xa>
 800b172:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b174:	07d0      	lsls	r0, r2, #31
 800b176:	d404      	bmi.n	800b182 <_fflush_r+0x3a>
 800b178:	0599      	lsls	r1, r3, #22
 800b17a:	d402      	bmi.n	800b182 <_fflush_r+0x3a>
 800b17c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b17e:	f7ff f81c 	bl	800a1ba <__retarget_lock_acquire_recursive>
 800b182:	4628      	mov	r0, r5
 800b184:	4621      	mov	r1, r4
 800b186:	f7ff ff59 	bl	800b03c <__sflush_r>
 800b18a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b18c:	07da      	lsls	r2, r3, #31
 800b18e:	4605      	mov	r5, r0
 800b190:	d4e0      	bmi.n	800b154 <_fflush_r+0xc>
 800b192:	89a3      	ldrh	r3, [r4, #12]
 800b194:	059b      	lsls	r3, r3, #22
 800b196:	d4dd      	bmi.n	800b154 <_fflush_r+0xc>
 800b198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b19a:	f7ff f80f 	bl	800a1bc <__retarget_lock_release_recursive>
 800b19e:	e7d9      	b.n	800b154 <_fflush_r+0xc>
 800b1a0:	4b05      	ldr	r3, [pc, #20]	; (800b1b8 <_fflush_r+0x70>)
 800b1a2:	429c      	cmp	r4, r3
 800b1a4:	d101      	bne.n	800b1aa <_fflush_r+0x62>
 800b1a6:	68ac      	ldr	r4, [r5, #8]
 800b1a8:	e7df      	b.n	800b16a <_fflush_r+0x22>
 800b1aa:	4b04      	ldr	r3, [pc, #16]	; (800b1bc <_fflush_r+0x74>)
 800b1ac:	429c      	cmp	r4, r3
 800b1ae:	bf08      	it	eq
 800b1b0:	68ec      	ldreq	r4, [r5, #12]
 800b1b2:	e7da      	b.n	800b16a <_fflush_r+0x22>
 800b1b4:	0800b59c 	.word	0x0800b59c
 800b1b8:	0800b5bc 	.word	0x0800b5bc
 800b1bc:	0800b57c 	.word	0x0800b57c

0800b1c0 <fiprintf>:
 800b1c0:	b40e      	push	{r1, r2, r3}
 800b1c2:	b503      	push	{r0, r1, lr}
 800b1c4:	4601      	mov	r1, r0
 800b1c6:	ab03      	add	r3, sp, #12
 800b1c8:	4805      	ldr	r0, [pc, #20]	; (800b1e0 <fiprintf+0x20>)
 800b1ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1ce:	6800      	ldr	r0, [r0, #0]
 800b1d0:	9301      	str	r3, [sp, #4]
 800b1d2:	f7ff fcaf 	bl	800ab34 <_vfiprintf_r>
 800b1d6:	b002      	add	sp, #8
 800b1d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1dc:	b003      	add	sp, #12
 800b1de:	4770      	bx	lr
 800b1e0:	20000160 	.word	0x20000160

0800b1e4 <_lseek_r>:
 800b1e4:	b538      	push	{r3, r4, r5, lr}
 800b1e6:	4d07      	ldr	r5, [pc, #28]	; (800b204 <_lseek_r+0x20>)
 800b1e8:	4604      	mov	r4, r0
 800b1ea:	4608      	mov	r0, r1
 800b1ec:	4611      	mov	r1, r2
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	602a      	str	r2, [r5, #0]
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	f7f6 f8ce 	bl	8001394 <_lseek>
 800b1f8:	1c43      	adds	r3, r0, #1
 800b1fa:	d102      	bne.n	800b202 <_lseek_r+0x1e>
 800b1fc:	682b      	ldr	r3, [r5, #0]
 800b1fe:	b103      	cbz	r3, 800b202 <_lseek_r+0x1e>
 800b200:	6023      	str	r3, [r4, #0]
 800b202:	bd38      	pop	{r3, r4, r5, pc}
 800b204:	2000158c 	.word	0x2000158c

0800b208 <__swhatbuf_r>:
 800b208:	b570      	push	{r4, r5, r6, lr}
 800b20a:	460e      	mov	r6, r1
 800b20c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b210:	2900      	cmp	r1, #0
 800b212:	b096      	sub	sp, #88	; 0x58
 800b214:	4614      	mov	r4, r2
 800b216:	461d      	mov	r5, r3
 800b218:	da08      	bge.n	800b22c <__swhatbuf_r+0x24>
 800b21a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b21e:	2200      	movs	r2, #0
 800b220:	602a      	str	r2, [r5, #0]
 800b222:	061a      	lsls	r2, r3, #24
 800b224:	d410      	bmi.n	800b248 <__swhatbuf_r+0x40>
 800b226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b22a:	e00e      	b.n	800b24a <__swhatbuf_r+0x42>
 800b22c:	466a      	mov	r2, sp
 800b22e:	f000 f895 	bl	800b35c <_fstat_r>
 800b232:	2800      	cmp	r0, #0
 800b234:	dbf1      	blt.n	800b21a <__swhatbuf_r+0x12>
 800b236:	9a01      	ldr	r2, [sp, #4]
 800b238:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b23c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b240:	425a      	negs	r2, r3
 800b242:	415a      	adcs	r2, r3
 800b244:	602a      	str	r2, [r5, #0]
 800b246:	e7ee      	b.n	800b226 <__swhatbuf_r+0x1e>
 800b248:	2340      	movs	r3, #64	; 0x40
 800b24a:	2000      	movs	r0, #0
 800b24c:	6023      	str	r3, [r4, #0]
 800b24e:	b016      	add	sp, #88	; 0x58
 800b250:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b254 <__smakebuf_r>:
 800b254:	898b      	ldrh	r3, [r1, #12]
 800b256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b258:	079d      	lsls	r5, r3, #30
 800b25a:	4606      	mov	r6, r0
 800b25c:	460c      	mov	r4, r1
 800b25e:	d507      	bpl.n	800b270 <__smakebuf_r+0x1c>
 800b260:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b264:	6023      	str	r3, [r4, #0]
 800b266:	6123      	str	r3, [r4, #16]
 800b268:	2301      	movs	r3, #1
 800b26a:	6163      	str	r3, [r4, #20]
 800b26c:	b002      	add	sp, #8
 800b26e:	bd70      	pop	{r4, r5, r6, pc}
 800b270:	ab01      	add	r3, sp, #4
 800b272:	466a      	mov	r2, sp
 800b274:	f7ff ffc8 	bl	800b208 <__swhatbuf_r>
 800b278:	9900      	ldr	r1, [sp, #0]
 800b27a:	4605      	mov	r5, r0
 800b27c:	4630      	mov	r0, r6
 800b27e:	f7ff fbbb 	bl	800a9f8 <_malloc_r>
 800b282:	b948      	cbnz	r0, 800b298 <__smakebuf_r+0x44>
 800b284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b288:	059a      	lsls	r2, r3, #22
 800b28a:	d4ef      	bmi.n	800b26c <__smakebuf_r+0x18>
 800b28c:	f023 0303 	bic.w	r3, r3, #3
 800b290:	f043 0302 	orr.w	r3, r3, #2
 800b294:	81a3      	strh	r3, [r4, #12]
 800b296:	e7e3      	b.n	800b260 <__smakebuf_r+0xc>
 800b298:	4b0d      	ldr	r3, [pc, #52]	; (800b2d0 <__smakebuf_r+0x7c>)
 800b29a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b29c:	89a3      	ldrh	r3, [r4, #12]
 800b29e:	6020      	str	r0, [r4, #0]
 800b2a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2a4:	81a3      	strh	r3, [r4, #12]
 800b2a6:	9b00      	ldr	r3, [sp, #0]
 800b2a8:	6163      	str	r3, [r4, #20]
 800b2aa:	9b01      	ldr	r3, [sp, #4]
 800b2ac:	6120      	str	r0, [r4, #16]
 800b2ae:	b15b      	cbz	r3, 800b2c8 <__smakebuf_r+0x74>
 800b2b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2b4:	4630      	mov	r0, r6
 800b2b6:	f000 f863 	bl	800b380 <_isatty_r>
 800b2ba:	b128      	cbz	r0, 800b2c8 <__smakebuf_r+0x74>
 800b2bc:	89a3      	ldrh	r3, [r4, #12]
 800b2be:	f023 0303 	bic.w	r3, r3, #3
 800b2c2:	f043 0301 	orr.w	r3, r3, #1
 800b2c6:	81a3      	strh	r3, [r4, #12]
 800b2c8:	89a0      	ldrh	r0, [r4, #12]
 800b2ca:	4305      	orrs	r5, r0
 800b2cc:	81a5      	strh	r5, [r4, #12]
 800b2ce:	e7cd      	b.n	800b26c <__smakebuf_r+0x18>
 800b2d0:	0800a00d 	.word	0x0800a00d

0800b2d4 <__ascii_mbtowc>:
 800b2d4:	b082      	sub	sp, #8
 800b2d6:	b901      	cbnz	r1, 800b2da <__ascii_mbtowc+0x6>
 800b2d8:	a901      	add	r1, sp, #4
 800b2da:	b142      	cbz	r2, 800b2ee <__ascii_mbtowc+0x1a>
 800b2dc:	b14b      	cbz	r3, 800b2f2 <__ascii_mbtowc+0x1e>
 800b2de:	7813      	ldrb	r3, [r2, #0]
 800b2e0:	600b      	str	r3, [r1, #0]
 800b2e2:	7812      	ldrb	r2, [r2, #0]
 800b2e4:	1e10      	subs	r0, r2, #0
 800b2e6:	bf18      	it	ne
 800b2e8:	2001      	movne	r0, #1
 800b2ea:	b002      	add	sp, #8
 800b2ec:	4770      	bx	lr
 800b2ee:	4610      	mov	r0, r2
 800b2f0:	e7fb      	b.n	800b2ea <__ascii_mbtowc+0x16>
 800b2f2:	f06f 0001 	mvn.w	r0, #1
 800b2f6:	e7f8      	b.n	800b2ea <__ascii_mbtowc+0x16>

0800b2f8 <__malloc_lock>:
 800b2f8:	4801      	ldr	r0, [pc, #4]	; (800b300 <__malloc_lock+0x8>)
 800b2fa:	f7fe bf5e 	b.w	800a1ba <__retarget_lock_acquire_recursive>
 800b2fe:	bf00      	nop
 800b300:	20001580 	.word	0x20001580

0800b304 <__malloc_unlock>:
 800b304:	4801      	ldr	r0, [pc, #4]	; (800b30c <__malloc_unlock+0x8>)
 800b306:	f7fe bf59 	b.w	800a1bc <__retarget_lock_release_recursive>
 800b30a:	bf00      	nop
 800b30c:	20001580 	.word	0x20001580

0800b310 <_read_r>:
 800b310:	b538      	push	{r3, r4, r5, lr}
 800b312:	4d07      	ldr	r5, [pc, #28]	; (800b330 <_read_r+0x20>)
 800b314:	4604      	mov	r4, r0
 800b316:	4608      	mov	r0, r1
 800b318:	4611      	mov	r1, r2
 800b31a:	2200      	movs	r2, #0
 800b31c:	602a      	str	r2, [r5, #0]
 800b31e:	461a      	mov	r2, r3
 800b320:	f7f5 fff4 	bl	800130c <_read>
 800b324:	1c43      	adds	r3, r0, #1
 800b326:	d102      	bne.n	800b32e <_read_r+0x1e>
 800b328:	682b      	ldr	r3, [r5, #0]
 800b32a:	b103      	cbz	r3, 800b32e <_read_r+0x1e>
 800b32c:	6023      	str	r3, [r4, #0]
 800b32e:	bd38      	pop	{r3, r4, r5, pc}
 800b330:	2000158c 	.word	0x2000158c

0800b334 <__ascii_wctomb>:
 800b334:	b149      	cbz	r1, 800b34a <__ascii_wctomb+0x16>
 800b336:	2aff      	cmp	r2, #255	; 0xff
 800b338:	bf85      	ittet	hi
 800b33a:	238a      	movhi	r3, #138	; 0x8a
 800b33c:	6003      	strhi	r3, [r0, #0]
 800b33e:	700a      	strbls	r2, [r1, #0]
 800b340:	f04f 30ff 	movhi.w	r0, #4294967295
 800b344:	bf98      	it	ls
 800b346:	2001      	movls	r0, #1
 800b348:	4770      	bx	lr
 800b34a:	4608      	mov	r0, r1
 800b34c:	4770      	bx	lr

0800b34e <abort>:
 800b34e:	b508      	push	{r3, lr}
 800b350:	2006      	movs	r0, #6
 800b352:	f000 f84d 	bl	800b3f0 <raise>
 800b356:	2001      	movs	r0, #1
 800b358:	f7f5 ffce 	bl	80012f8 <_exit>

0800b35c <_fstat_r>:
 800b35c:	b538      	push	{r3, r4, r5, lr}
 800b35e:	4d07      	ldr	r5, [pc, #28]	; (800b37c <_fstat_r+0x20>)
 800b360:	2300      	movs	r3, #0
 800b362:	4604      	mov	r4, r0
 800b364:	4608      	mov	r0, r1
 800b366:	4611      	mov	r1, r2
 800b368:	602b      	str	r3, [r5, #0]
 800b36a:	f7f5 fff8 	bl	800135e <_fstat>
 800b36e:	1c43      	adds	r3, r0, #1
 800b370:	d102      	bne.n	800b378 <_fstat_r+0x1c>
 800b372:	682b      	ldr	r3, [r5, #0]
 800b374:	b103      	cbz	r3, 800b378 <_fstat_r+0x1c>
 800b376:	6023      	str	r3, [r4, #0]
 800b378:	bd38      	pop	{r3, r4, r5, pc}
 800b37a:	bf00      	nop
 800b37c:	2000158c 	.word	0x2000158c

0800b380 <_isatty_r>:
 800b380:	b538      	push	{r3, r4, r5, lr}
 800b382:	4d06      	ldr	r5, [pc, #24]	; (800b39c <_isatty_r+0x1c>)
 800b384:	2300      	movs	r3, #0
 800b386:	4604      	mov	r4, r0
 800b388:	4608      	mov	r0, r1
 800b38a:	602b      	str	r3, [r5, #0]
 800b38c:	f7f5 fff7 	bl	800137e <_isatty>
 800b390:	1c43      	adds	r3, r0, #1
 800b392:	d102      	bne.n	800b39a <_isatty_r+0x1a>
 800b394:	682b      	ldr	r3, [r5, #0]
 800b396:	b103      	cbz	r3, 800b39a <_isatty_r+0x1a>
 800b398:	6023      	str	r3, [r4, #0]
 800b39a:	bd38      	pop	{r3, r4, r5, pc}
 800b39c:	2000158c 	.word	0x2000158c

0800b3a0 <_raise_r>:
 800b3a0:	291f      	cmp	r1, #31
 800b3a2:	b538      	push	{r3, r4, r5, lr}
 800b3a4:	4604      	mov	r4, r0
 800b3a6:	460d      	mov	r5, r1
 800b3a8:	d904      	bls.n	800b3b4 <_raise_r+0x14>
 800b3aa:	2316      	movs	r3, #22
 800b3ac:	6003      	str	r3, [r0, #0]
 800b3ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b2:	bd38      	pop	{r3, r4, r5, pc}
 800b3b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b3b6:	b112      	cbz	r2, 800b3be <_raise_r+0x1e>
 800b3b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b3bc:	b94b      	cbnz	r3, 800b3d2 <_raise_r+0x32>
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f000 f830 	bl	800b424 <_getpid_r>
 800b3c4:	462a      	mov	r2, r5
 800b3c6:	4601      	mov	r1, r0
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3ce:	f000 b817 	b.w	800b400 <_kill_r>
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d00a      	beq.n	800b3ec <_raise_r+0x4c>
 800b3d6:	1c59      	adds	r1, r3, #1
 800b3d8:	d103      	bne.n	800b3e2 <_raise_r+0x42>
 800b3da:	2316      	movs	r3, #22
 800b3dc:	6003      	str	r3, [r0, #0]
 800b3de:	2001      	movs	r0, #1
 800b3e0:	e7e7      	b.n	800b3b2 <_raise_r+0x12>
 800b3e2:	2400      	movs	r4, #0
 800b3e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b3e8:	4628      	mov	r0, r5
 800b3ea:	4798      	blx	r3
 800b3ec:	2000      	movs	r0, #0
 800b3ee:	e7e0      	b.n	800b3b2 <_raise_r+0x12>

0800b3f0 <raise>:
 800b3f0:	4b02      	ldr	r3, [pc, #8]	; (800b3fc <raise+0xc>)
 800b3f2:	4601      	mov	r1, r0
 800b3f4:	6818      	ldr	r0, [r3, #0]
 800b3f6:	f7ff bfd3 	b.w	800b3a0 <_raise_r>
 800b3fa:	bf00      	nop
 800b3fc:	20000160 	.word	0x20000160

0800b400 <_kill_r>:
 800b400:	b538      	push	{r3, r4, r5, lr}
 800b402:	4d07      	ldr	r5, [pc, #28]	; (800b420 <_kill_r+0x20>)
 800b404:	2300      	movs	r3, #0
 800b406:	4604      	mov	r4, r0
 800b408:	4608      	mov	r0, r1
 800b40a:	4611      	mov	r1, r2
 800b40c:	602b      	str	r3, [r5, #0]
 800b40e:	f7f5 ff63 	bl	80012d8 <_kill>
 800b412:	1c43      	adds	r3, r0, #1
 800b414:	d102      	bne.n	800b41c <_kill_r+0x1c>
 800b416:	682b      	ldr	r3, [r5, #0]
 800b418:	b103      	cbz	r3, 800b41c <_kill_r+0x1c>
 800b41a:	6023      	str	r3, [r4, #0]
 800b41c:	bd38      	pop	{r3, r4, r5, pc}
 800b41e:	bf00      	nop
 800b420:	2000158c 	.word	0x2000158c

0800b424 <_getpid_r>:
 800b424:	f7f5 bf50 	b.w	80012c8 <_getpid>

0800b428 <_init>:
 800b428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b42a:	bf00      	nop
 800b42c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b42e:	bc08      	pop	{r3}
 800b430:	469e      	mov	lr, r3
 800b432:	4770      	bx	lr

0800b434 <_fini>:
 800b434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b436:	bf00      	nop
 800b438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b43a:	bc08      	pop	{r3}
 800b43c:	469e      	mov	lr, r3
 800b43e:	4770      	bx	lr
