
nucleo-f446re-keyboard-firmware-experiment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b20  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007ce4  08007ce4  00017ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d44  08007d44  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08007d44  08007d44  00017d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d4c  08007d4c  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d4c  08007d4c  00017d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d50  08007d50  00017d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08007d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001254  20000160  08007eb4  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013b4  08007eb4  000213b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122b6  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c55  00000000  00000000  00032446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  000350a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  00035e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023c4d  00000000  00000000  00036b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122bf  00000000  00000000  0005a755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc294  00000000  00000000  0006ca14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138ca8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003820  00000000  00000000  00138cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000160 	.word	0x20000160
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007ccc 	.word	0x08007ccc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000164 	.word	0x20000164
 8000200:	08007ccc 	.word	0x08007ccc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fa18 	bl	8000940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f822 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f8b6 	bl	8000684 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000518:	f000 f88a 	bl	8000630 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 800051c:	f006 fd8c 	bl	8007038 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  keyboardhid.KEYCODE1 = 0x04; // Send an A
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <main+0x48>)
 8000522:	2204      	movs	r2, #4
 8000524:	709a      	strb	r2, [r3, #2]
	  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 8000526:	2208      	movs	r2, #8
 8000528:	4909      	ldr	r1, [pc, #36]	; (8000550 <main+0x48>)
 800052a:	480a      	ldr	r0, [pc, #40]	; (8000554 <main+0x4c>)
 800052c:	f005 f9e0 	bl	80058f0 <USBD_HID_SendReport>
	  HAL_Delay(50);
 8000530:	2032      	movs	r0, #50	; 0x32
 8000532:	f000 fa77 	bl	8000a24 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00; // Send an A
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <main+0x48>)
 8000538:	2200      	movs	r2, #0
 800053a:	709a      	strb	r2, [r3, #2]
	  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 800053c:	2208      	movs	r2, #8
 800053e:	4904      	ldr	r1, [pc, #16]	; (8000550 <main+0x48>)
 8000540:	4804      	ldr	r0, [pc, #16]	; (8000554 <main+0x4c>)
 8000542:	f005 f9d5 	bl	80058f0 <USBD_HID_SendReport>
	  HAL_Delay(1000);
 8000546:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800054a:	f000 fa6b 	bl	8000a24 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x04; // Send an A
 800054e:	e7e7      	b.n	8000520 <main+0x18>
 8000550:	200001c0 	.word	0x200001c0
 8000554:	200004ac 	.word	0x200004ac

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 031c 	add.w	r3, r7, #28
 8000562:	2234      	movs	r2, #52	; 0x34
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f007 fba8 	bl	8007cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 0308 	add.w	r3, r7, #8
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b29      	ldr	r3, [pc, #164]	; (8000628 <SystemClock_Config+0xd0>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a28      	ldr	r2, [pc, #160]	; (8000628 <SystemClock_Config+0xd0>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b26      	ldr	r3, [pc, #152]	; (8000628 <SystemClock_Config+0xd0>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000598:	2300      	movs	r3, #0
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	4b23      	ldr	r3, [pc, #140]	; (800062c <SystemClock_Config+0xd4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a4:	4a21      	ldr	r2, [pc, #132]	; (800062c <SystemClock_Config+0xd4>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <SystemClock_Config+0xd4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005cc:	2304      	movs	r3, #4
 80005ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005d0:	2348      	movs	r3, #72	; 0x48
 80005d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005d8:	2303      	movs	r3, #3
 80005da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005dc:	2302      	movs	r3, #2
 80005de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 031c 	add.w	r3, r7, #28
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 fe25 	bl	8003234 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005f0:	f000 f8b6 	bl	8000760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f8:	2302      	movs	r3, #2
 80005fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000604:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f001 ff9b 	bl	800254c <HAL_RCC_ClockConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800061c:	f000 f8a0 	bl	8000760 <Error_Handler>
  }
}
 8000620:	bf00      	nop
 8000622:	3750      	adds	r7, #80	; 0x50
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_USART2_UART_Init+0x4c>)
 8000636:	4a12      	ldr	r2, [pc, #72]	; (8000680 <MX_USART2_UART_Init+0x50>)
 8000638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <MX_USART2_UART_Init+0x4c>)
 800063c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_USART2_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_USART2_UART_Init+0x4c>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <MX_USART2_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_USART2_UART_Init+0x4c>)
 8000656:	220c      	movs	r2, #12
 8000658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <MX_USART2_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_USART2_UART_Init+0x4c>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_USART2_UART_Init+0x4c>)
 8000668:	f003 f882 	bl	8003770 <HAL_UART_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000672:	f000 f875 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	2000017c 	.word	0x2000017c
 8000680:	40004400 	.word	0x40004400

08000684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
 800069e:	4b2d      	ldr	r3, [pc, #180]	; (8000754 <MX_GPIO_Init+0xd0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a2c      	ldr	r2, [pc, #176]	; (8000754 <MX_GPIO_Init+0xd0>)
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b2a      	ldr	r3, [pc, #168]	; (8000754 <MX_GPIO_Init+0xd0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	4b26      	ldr	r3, [pc, #152]	; (8000754 <MX_GPIO_Init+0xd0>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a25      	ldr	r2, [pc, #148]	; (8000754 <MX_GPIO_Init+0xd0>)
 80006c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b23      	ldr	r3, [pc, #140]	; (8000754 <MX_GPIO_Init+0xd0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <MX_GPIO_Init+0xd0>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a1e      	ldr	r2, [pc, #120]	; (8000754 <MX_GPIO_Init+0xd0>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <MX_GPIO_Init+0xd0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4b18      	ldr	r3, [pc, #96]	; (8000754 <MX_GPIO_Init+0xd0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a17      	ldr	r2, [pc, #92]	; (8000754 <MX_GPIO_Init+0xd0>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_GPIO_Init+0xd0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	2120      	movs	r1, #32
 800070e:	4812      	ldr	r0, [pc, #72]	; (8000758 <MX_GPIO_Init+0xd4>)
 8000710:	f000 fc52 	bl	8000fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800071a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800071e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	4619      	mov	r1, r3
 800072a:	480c      	ldr	r0, [pc, #48]	; (800075c <MX_GPIO_Init+0xd8>)
 800072c:	f000 fab0 	bl	8000c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000730:	2320      	movs	r3, #32
 8000732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000734:	2301      	movs	r3, #1
 8000736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	2300      	movs	r3, #0
 800073e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	4804      	ldr	r0, [pc, #16]	; (8000758 <MX_GPIO_Init+0xd4>)
 8000748:	f000 faa2 	bl	8000c90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800074c:	bf00      	nop
 800074e:	3728      	adds	r7, #40	; 0x28
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000
 800075c:	40020800 	.word	0x40020800

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	e7fe      	b.n	8000768 <Error_Handler+0x8>
	...

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <HAL_MspInit+0x4c>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	4a0f      	ldr	r2, [pc, #60]	; (80007b8 <HAL_MspInit+0x4c>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000780:	6453      	str	r3, [r2, #68]	; 0x44
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <HAL_MspInit+0x4c>)
 8000784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_MspInit+0x4c>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <HAL_MspInit+0x4c>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079c:	6413      	str	r3, [r2, #64]	; 0x40
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_MspInit+0x4c>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007aa:	2007      	movs	r0, #7
 80007ac:	f000 fa2e 	bl	8000c0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40023800 	.word	0x40023800

080007bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a19      	ldr	r2, [pc, #100]	; (8000840 <HAL_UART_MspInit+0x84>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d12b      	bne.n	8000836 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <HAL_UART_MspInit+0x88>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	4a17      	ldr	r2, [pc, #92]	; (8000844 <HAL_UART_MspInit+0x88>)
 80007e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ec:	6413      	str	r3, [r2, #64]	; 0x40
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <HAL_UART_MspInit+0x88>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <HAL_UART_MspInit+0x88>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a10      	ldr	r2, [pc, #64]	; (8000844 <HAL_UART_MspInit+0x88>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <HAL_UART_MspInit+0x88>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000816:	230c      	movs	r3, #12
 8000818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081a:	2302      	movs	r3, #2
 800081c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000822:	2303      	movs	r3, #3
 8000824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000826:	2307      	movs	r3, #7
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <HAL_UART_MspInit+0x8c>)
 8000832:	f000 fa2d 	bl	8000c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000836:	bf00      	nop
 8000838:	3728      	adds	r7, #40	; 0x28
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40004400 	.word	0x40004400
 8000844:	40023800 	.word	0x40023800
 8000848:	40020000 	.word	0x40020000

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <NMI_Handler+0x4>

08000852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <HardFault_Handler+0x4>

08000858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800085c:	e7fe      	b.n	800085c <MemManage_Handler+0x4>

0800085e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <BusFault_Handler+0x4>

08000864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <UsageFault_Handler+0x4>

0800086a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000898:	f000 f8a4 	bl	80009e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}

080008a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008a4:	4802      	ldr	r0, [pc, #8]	; (80008b0 <OTG_FS_IRQHandler+0x10>)
 80008a6:	f000 fcf7 	bl	8001298 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000988 	.word	0x20000988

080008b4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80008b8:	4802      	ldr	r0, [pc, #8]	; (80008c4 <OTG_HS_IRQHandler+0x10>)
 80008ba:	f000 fced 	bl	8001298 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000e94 	.word	0x20000e94

080008c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <SystemInit+0x20>)
 80008ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008d2:	4a05      	ldr	r2, [pc, #20]	; (80008e8 <SystemInit+0x20>)
 80008d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000924 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008f0:	480d      	ldr	r0, [pc, #52]	; (8000928 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008f2:	490e      	ldr	r1, [pc, #56]	; (800092c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008f4:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f8:	e002      	b.n	8000900 <LoopCopyDataInit>

080008fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fe:	3304      	adds	r3, #4

08000900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000904:	d3f9      	bcc.n	80008fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000906:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000908:	4c0b      	ldr	r4, [pc, #44]	; (8000938 <LoopFillZerobss+0x26>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800090c:	e001      	b.n	8000912 <LoopFillZerobss>

0800090e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000910:	3204      	adds	r2, #4

08000912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000914:	d3fb      	bcc.n	800090e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000916:	f7ff ffd7 	bl	80008c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800091a:	f007 f9ab 	bl	8007c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800091e:	f7ff fdf3 	bl	8000508 <main>
  bx  lr    
 8000922:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000924:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800092c:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000930:	08007d54 	.word	0x08007d54
  ldr r2, =_sbss
 8000934:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000938:	200013b4 	.word	0x200013b4

0800093c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800093c:	e7fe      	b.n	800093c <ADC_IRQHandler>
	...

08000940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <HAL_Init+0x40>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a0d      	ldr	r2, [pc, #52]	; (8000980 <HAL_Init+0x40>)
 800094a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800094e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000950:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <HAL_Init+0x40>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <HAL_Init+0x40>)
 8000956:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800095a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <HAL_Init+0x40>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a07      	ldr	r2, [pc, #28]	; (8000980 <HAL_Init+0x40>)
 8000962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000966:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000968:	2003      	movs	r0, #3
 800096a:	f000 f94f 	bl	8000c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800096e:	2000      	movs	r0, #0
 8000970:	f000 f808 	bl	8000984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000974:	f7ff fefa 	bl	800076c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023c00 	.word	0x40023c00

08000984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <HAL_InitTick+0x54>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <HAL_InitTick+0x58>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	4619      	mov	r1, r3
 8000996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099a:	fbb3 f3f1 	udiv	r3, r3, r1
 800099e:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 f967 	bl	8000c76 <HAL_SYSTICK_Config>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	e00e      	b.n	80009d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2b0f      	cmp	r3, #15
 80009b6:	d80a      	bhi.n	80009ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b8:	2200      	movs	r2, #0
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	f04f 30ff 	mov.w	r0, #4294967295
 80009c0:	f000 f92f 	bl	8000c22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009c4:	4a06      	ldr	r2, [pc, #24]	; (80009e0 <HAL_InitTick+0x5c>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ca:	2300      	movs	r3, #0
 80009cc:	e000      	b.n	80009d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000000 	.word	0x20000000
 80009dc:	20000008 	.word	0x20000008
 80009e0:	20000004 	.word	0x20000004

080009e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_IncTick+0x20>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_IncTick+0x24>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4413      	add	r3, r2
 80009f4:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <HAL_IncTick+0x24>)
 80009f6:	6013      	str	r3, [r2, #0]
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20000008 	.word	0x20000008
 8000a08:	200001c8 	.word	0x200001c8

08000a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a10:	4b03      	ldr	r3, [pc, #12]	; (8000a20 <HAL_GetTick+0x14>)
 8000a12:	681b      	ldr	r3, [r3, #0]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	200001c8 	.word	0x200001c8

08000a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a2c:	f7ff ffee 	bl	8000a0c <HAL_GetTick>
 8000a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a3c:	d005      	beq.n	8000a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <HAL_Delay+0x44>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	4413      	add	r3, r2
 8000a48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a4a:	bf00      	nop
 8000a4c:	f7ff ffde 	bl	8000a0c <HAL_GetTick>
 8000a50:	4602      	mov	r2, r0
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d8f7      	bhi.n	8000a4c <HAL_Delay+0x28>
  {
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	bf00      	nop
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000008 	.word	0x20000008

08000a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a9e:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	60d3      	str	r3, [r2, #12]
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <__NVIC_GetPriorityGrouping+0x18>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	0a1b      	lsrs	r3, r3, #8
 8000abe:	f003 0307 	and.w	r3, r3, #7
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	db0b      	blt.n	8000afa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	f003 021f 	and.w	r2, r3, #31
 8000ae8:	4907      	ldr	r1, [pc, #28]	; (8000b08 <__NVIC_EnableIRQ+0x38>)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	095b      	lsrs	r3, r3, #5
 8000af0:	2001      	movs	r0, #1
 8000af2:	fa00 f202 	lsl.w	r2, r0, r2
 8000af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000e100 	.word	0xe000e100

08000b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	6039      	str	r1, [r7, #0]
 8000b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	db0a      	blt.n	8000b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	490c      	ldr	r1, [pc, #48]	; (8000b58 <__NVIC_SetPriority+0x4c>)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	0112      	lsls	r2, r2, #4
 8000b2c:	b2d2      	uxtb	r2, r2
 8000b2e:	440b      	add	r3, r1
 8000b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b34:	e00a      	b.n	8000b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4908      	ldr	r1, [pc, #32]	; (8000b5c <__NVIC_SetPriority+0x50>)
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	f003 030f 	and.w	r3, r3, #15
 8000b42:	3b04      	subs	r3, #4
 8000b44:	0112      	lsls	r2, r2, #4
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	440b      	add	r3, r1
 8000b4a:	761a      	strb	r2, [r3, #24]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000e100 	.word	0xe000e100
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b089      	sub	sp, #36	; 0x24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	f1c3 0307 	rsb	r3, r3, #7
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	bf28      	it	cs
 8000b7e:	2304      	movcs	r3, #4
 8000b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3304      	adds	r3, #4
 8000b86:	2b06      	cmp	r3, #6
 8000b88:	d902      	bls.n	8000b90 <NVIC_EncodePriority+0x30>
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3b03      	subs	r3, #3
 8000b8e:	e000      	b.n	8000b92 <NVIC_EncodePriority+0x32>
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	f04f 32ff 	mov.w	r2, #4294967295
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43da      	mvns	r2, r3
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb2:	43d9      	mvns	r1, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb8:	4313      	orrs	r3, r2
         );
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3724      	adds	r7, #36	; 0x24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bd8:	d301      	bcc.n	8000bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e00f      	b.n	8000bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <SysTick_Config+0x40>)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000be6:	210f      	movs	r1, #15
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bec:	f7ff ff8e 	bl	8000b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <SysTick_Config+0x40>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bf6:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <SysTick_Config+0x40>)
 8000bf8:	2207      	movs	r2, #7
 8000bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	e000e010 	.word	0xe000e010

08000c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f7ff ff29 	bl	8000a6c <__NVIC_SetPriorityGrouping>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b086      	sub	sp, #24
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	4603      	mov	r3, r0
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
 8000c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c34:	f7ff ff3e 	bl	8000ab4 <__NVIC_GetPriorityGrouping>
 8000c38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	68b9      	ldr	r1, [r7, #8]
 8000c3e:	6978      	ldr	r0, [r7, #20]
 8000c40:	f7ff ff8e 	bl	8000b60 <NVIC_EncodePriority>
 8000c44:	4602      	mov	r2, r0
 8000c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff5d 	bl	8000b0c <__NVIC_SetPriority>
}
 8000c52:	bf00      	nop
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	4603      	mov	r3, r0
 8000c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff31 	bl	8000ad0 <__NVIC_EnableIRQ>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff ffa2 	bl	8000bc8 <SysTick_Config>
 8000c84:	4603      	mov	r3, r0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b089      	sub	sp, #36	; 0x24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
 8000caa:	e165      	b.n	8000f78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cac:	2201      	movs	r2, #1
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	f040 8154 	bne.w	8000f72 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f003 0303 	and.w	r3, r3, #3
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d005      	beq.n	8000ce2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d130      	bne.n	8000d44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	2203      	movs	r2, #3
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	68da      	ldr	r2, [r3, #12]
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d18:	2201      	movs	r2, #1
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4013      	ands	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	091b      	lsrs	r3, r3, #4
 8000d2e:	f003 0201 	and.w	r2, r3, #1
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	d017      	beq.n	8000d80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	689a      	ldr	r2, [r3, #8]
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d123      	bne.n	8000dd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	08da      	lsrs	r2, r3, #3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3208      	adds	r2, #8
 8000d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	f003 0307 	and.w	r3, r3, #7
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	220f      	movs	r2, #15
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	691a      	ldr	r2, [r3, #16]
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	08da      	lsrs	r2, r3, #3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	3208      	adds	r2, #8
 8000dce:	69b9      	ldr	r1, [r7, #24]
 8000dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	2203      	movs	r2, #3
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4013      	ands	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0203 	and.w	r2, r3, #3
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f000 80ae 	beq.w	8000f72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	4b5d      	ldr	r3, [pc, #372]	; (8000f90 <HAL_GPIO_Init+0x300>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	4a5c      	ldr	r2, [pc, #368]	; (8000f90 <HAL_GPIO_Init+0x300>)
 8000e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e24:	6453      	str	r3, [r2, #68]	; 0x44
 8000e26:	4b5a      	ldr	r3, [pc, #360]	; (8000f90 <HAL_GPIO_Init+0x300>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e32:	4a58      	ldr	r2, [pc, #352]	; (8000f94 <HAL_GPIO_Init+0x304>)
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	089b      	lsrs	r3, r3, #2
 8000e38:	3302      	adds	r3, #2
 8000e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	220f      	movs	r2, #15
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4f      	ldr	r2, [pc, #316]	; (8000f98 <HAL_GPIO_Init+0x308>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d025      	beq.n	8000eaa <HAL_GPIO_Init+0x21a>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4e      	ldr	r2, [pc, #312]	; (8000f9c <HAL_GPIO_Init+0x30c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d01f      	beq.n	8000ea6 <HAL_GPIO_Init+0x216>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4d      	ldr	r2, [pc, #308]	; (8000fa0 <HAL_GPIO_Init+0x310>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d019      	beq.n	8000ea2 <HAL_GPIO_Init+0x212>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a4c      	ldr	r2, [pc, #304]	; (8000fa4 <HAL_GPIO_Init+0x314>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d013      	beq.n	8000e9e <HAL_GPIO_Init+0x20e>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4b      	ldr	r2, [pc, #300]	; (8000fa8 <HAL_GPIO_Init+0x318>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d00d      	beq.n	8000e9a <HAL_GPIO_Init+0x20a>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4a      	ldr	r2, [pc, #296]	; (8000fac <HAL_GPIO_Init+0x31c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d007      	beq.n	8000e96 <HAL_GPIO_Init+0x206>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a49      	ldr	r2, [pc, #292]	; (8000fb0 <HAL_GPIO_Init+0x320>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d101      	bne.n	8000e92 <HAL_GPIO_Init+0x202>
 8000e8e:	2306      	movs	r3, #6
 8000e90:	e00c      	b.n	8000eac <HAL_GPIO_Init+0x21c>
 8000e92:	2307      	movs	r3, #7
 8000e94:	e00a      	b.n	8000eac <HAL_GPIO_Init+0x21c>
 8000e96:	2305      	movs	r3, #5
 8000e98:	e008      	b.n	8000eac <HAL_GPIO_Init+0x21c>
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	e006      	b.n	8000eac <HAL_GPIO_Init+0x21c>
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e004      	b.n	8000eac <HAL_GPIO_Init+0x21c>
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	e002      	b.n	8000eac <HAL_GPIO_Init+0x21c>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e000      	b.n	8000eac <HAL_GPIO_Init+0x21c>
 8000eaa:	2300      	movs	r3, #0
 8000eac:	69fa      	ldr	r2, [r7, #28]
 8000eae:	f002 0203 	and.w	r2, r2, #3
 8000eb2:	0092      	lsls	r2, r2, #2
 8000eb4:	4093      	lsls	r3, r2
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ebc:	4935      	ldr	r1, [pc, #212]	; (8000f94 <HAL_GPIO_Init+0x304>)
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	089b      	lsrs	r3, r3, #2
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eca:	4b3a      	ldr	r3, [pc, #232]	; (8000fb4 <HAL_GPIO_Init+0x324>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eee:	4a31      	ldr	r2, [pc, #196]	; (8000fb4 <HAL_GPIO_Init+0x324>)
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ef4:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <HAL_GPIO_Init+0x324>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f18:	4a26      	ldr	r2, [pc, #152]	; (8000fb4 <HAL_GPIO_Init+0x324>)
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f1e:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <HAL_GPIO_Init+0x324>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f42:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <HAL_GPIO_Init+0x324>)
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f48:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <HAL_GPIO_Init+0x324>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f6c:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <HAL_GPIO_Init+0x324>)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3301      	adds	r3, #1
 8000f76:	61fb      	str	r3, [r7, #28]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	2b0f      	cmp	r3, #15
 8000f7c:	f67f ae96 	bls.w	8000cac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40013800 	.word	0x40013800
 8000f98:	40020000 	.word	0x40020000
 8000f9c:	40020400 	.word	0x40020400
 8000fa0:	40020800 	.word	0x40020800
 8000fa4:	40020c00 	.word	0x40020c00
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40021400 	.word	0x40021400
 8000fb0:	40021800 	.word	0x40021800
 8000fb4:	40013c00 	.word	0x40013c00

08000fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fc8:	787b      	ldrb	r3, [r7, #1]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fce:	887a      	ldrh	r2, [r7, #2]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fd4:	e003      	b.n	8000fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fd6:	887b      	ldrh	r3, [r7, #2]
 8000fd8:	041a      	lsls	r2, r3, #16
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	619a      	str	r2, [r3, #24]
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fec:	b08f      	sub	sp, #60	; 0x3c
 8000fee:	af0a      	add	r7, sp, #40	; 0x28
 8000ff0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d101      	bne.n	8000ffc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e116      	b.n	800122a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d106      	bne.n	800101c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f006 fa2a 	bl	8007470 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2203      	movs	r2, #3
 8001020:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f002 ff6f 	bl	8003f1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	687e      	ldr	r6, [r7, #4]
 8001048:	466d      	mov	r5, sp
 800104a:	f106 0410 	add.w	r4, r6, #16
 800104e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001050:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001056:	e894 0003 	ldmia.w	r4, {r0, r1}
 800105a:	e885 0003 	stmia.w	r5, {r0, r1}
 800105e:	1d33      	adds	r3, r6, #4
 8001060:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001062:	6838      	ldr	r0, [r7, #0]
 8001064:	f002 fe46 	bl	8003cf4 <USB_CoreInit>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d005      	beq.n	800107a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2202      	movs	r2, #2
 8001072:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e0d7      	b.n	800122a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f002 ff5d 	bl	8003f40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001086:	2300      	movs	r3, #0
 8001088:	73fb      	strb	r3, [r7, #15]
 800108a:	e04a      	b.n	8001122 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800108c:	7bfa      	ldrb	r2, [r7, #15]
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	4413      	add	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	440b      	add	r3, r1
 800109a:	333d      	adds	r3, #61	; 0x3d
 800109c:	2201      	movs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	4413      	add	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	440b      	add	r3, r1
 80010ae:	333c      	adds	r3, #60	; 0x3c
 80010b0:	7bfa      	ldrb	r2, [r7, #15]
 80010b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010b4:	7bfa      	ldrb	r2, [r7, #15]
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	b298      	uxth	r0, r3
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	4413      	add	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	3344      	adds	r3, #68	; 0x44
 80010c8:	4602      	mov	r2, r0
 80010ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	4413      	add	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	440b      	add	r3, r1
 80010da:	3340      	adds	r3, #64	; 0x40
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	4413      	add	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	440b      	add	r3, r1
 80010ee:	3348      	adds	r3, #72	; 0x48
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010f4:	7bfa      	ldrb	r2, [r7, #15]
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	4613      	mov	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	4413      	add	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	440b      	add	r3, r1
 8001102:	334c      	adds	r3, #76	; 0x4c
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001108:	7bfa      	ldrb	r2, [r7, #15]
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	4413      	add	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	3354      	adds	r3, #84	; 0x54
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	3301      	adds	r3, #1
 8001120:	73fb      	strb	r3, [r7, #15]
 8001122:	7bfa      	ldrb	r2, [r7, #15]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	d3af      	bcc.n	800108c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]
 8001130:	e044      	b.n	80011bc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001132:	7bfa      	ldrb	r2, [r7, #15]
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	4613      	mov	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	4413      	add	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	440b      	add	r3, r1
 8001140:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001148:	7bfa      	ldrb	r2, [r7, #15]
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	4613      	mov	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	4413      	add	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	440b      	add	r3, r1
 8001156:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800115a:	7bfa      	ldrb	r2, [r7, #15]
 800115c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800115e:	7bfa      	ldrb	r2, [r7, #15]
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	4413      	add	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	440b      	add	r3, r1
 800116c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001174:	7bfa      	ldrb	r2, [r7, #15]
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	4613      	mov	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	4413      	add	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	440b      	add	r3, r1
 8001182:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800118a:	7bfa      	ldrb	r2, [r7, #15]
 800118c:	6879      	ldr	r1, [r7, #4]
 800118e:	4613      	mov	r3, r2
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	4413      	add	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	440b      	add	r3, r1
 8001198:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011a0:	7bfa      	ldrb	r2, [r7, #15]
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	4413      	add	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	3301      	adds	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d3b5      	bcc.n	8001132 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	687e      	ldr	r6, [r7, #4]
 80011ce:	466d      	mov	r5, sp
 80011d0:	f106 0410 	add.w	r4, r6, #16
 80011d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80011e4:	1d33      	adds	r3, r6, #4
 80011e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011e8:	6838      	ldr	r0, [r7, #0]
 80011ea:	f002 fef5 	bl	8003fd8 <USB_DevInit>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2202      	movs	r2, #2
 80011f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e014      	b.n	800122a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2201      	movs	r2, #1
 800120c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	2b01      	cmp	r3, #1
 8001216:	d102      	bne.n	800121e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f001 f973 	bl	8002504 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f004 f837 	bl	8005296 <USB_DevDisconnect>

  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001232 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b084      	sub	sp, #16
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001246:	2b01      	cmp	r3, #1
 8001248:	d101      	bne.n	800124e <HAL_PCD_Start+0x1c>
 800124a:	2302      	movs	r3, #2
 800124c:	e020      	b.n	8001290 <HAL_PCD_Start+0x5e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125a:	2b01      	cmp	r3, #1
 800125c:	d109      	bne.n	8001272 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001262:	2b01      	cmp	r3, #1
 8001264:	d005      	beq.n	8001272 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800126a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f002 fe40 	bl	8003efc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f003 ffe7 	bl	8005254 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b08d      	sub	sp, #52	; 0x34
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012a6:	6a3b      	ldr	r3, [r7, #32]
 80012a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f004 f8a5 	bl	80053fe <USB_GetMode>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f040 84b7 	bne.w	8001c2a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f004 f809 	bl	80052d8 <USB_ReadInterrupts>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 84ad 	beq.w	8001c28 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	0a1b      	lsrs	r3, r3, #8
 80012d8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f003 fff6 	bl	80052d8 <USB_ReadInterrupts>
 80012ec:	4603      	mov	r3, r0
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d107      	bne.n	8001306 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	695a      	ldr	r2, [r3, #20]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f002 0202 	and.w	r2, r2, #2
 8001304:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f003 ffe4 	bl	80052d8 <USB_ReadInterrupts>
 8001310:	4603      	mov	r3, r0
 8001312:	f003 0310 	and.w	r3, r3, #16
 8001316:	2b10      	cmp	r3, #16
 8001318:	d161      	bne.n	80013de <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	699a      	ldr	r2, [r3, #24]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 0210 	bic.w	r2, r2, #16
 8001328:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	f003 020f 	and.w	r2, r3, #15
 8001336:	4613      	mov	r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	3304      	adds	r3, #4
 8001348:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	0c5b      	lsrs	r3, r3, #17
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	2b02      	cmp	r3, #2
 8001354:	d124      	bne.n	80013a0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800135c:	4013      	ands	r3, r2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d035      	beq.n	80013ce <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	091b      	lsrs	r3, r3, #4
 800136a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800136c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001370:	b29b      	uxth	r3, r3
 8001372:	461a      	mov	r2, r3
 8001374:	6a38      	ldr	r0, [r7, #32]
 8001376:	f003 fe1b 	bl	8004fb0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	691a      	ldr	r2, [r3, #16]
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	091b      	lsrs	r3, r3, #4
 8001382:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001386:	441a      	add	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	6a1a      	ldr	r2, [r3, #32]
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001398:	441a      	add	r2, r3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	621a      	str	r2, [r3, #32]
 800139e:	e016      	b.n	80013ce <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	0c5b      	lsrs	r3, r3, #17
 80013a4:	f003 030f 	and.w	r3, r3, #15
 80013a8:	2b06      	cmp	r3, #6
 80013aa:	d110      	bne.n	80013ce <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80013b2:	2208      	movs	r2, #8
 80013b4:	4619      	mov	r1, r3
 80013b6:	6a38      	ldr	r0, [r7, #32]
 80013b8:	f003 fdfa 	bl	8004fb0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	6a1a      	ldr	r2, [r3, #32]
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	091b      	lsrs	r3, r3, #4
 80013c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013c8:	441a      	add	r2, r3
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	699a      	ldr	r2, [r3, #24]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f042 0210 	orr.w	r2, r2, #16
 80013dc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f003 ff78 	bl	80052d8 <USB_ReadInterrupts>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013f2:	f040 80a7 	bne.w	8001544 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f003 ff7d 	bl	80052fe <USB_ReadDevAllOutEpInterrupt>
 8001404:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001406:	e099      	b.n	800153c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 808e 	beq.w	8001530 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	4611      	mov	r1, r2
 800141e:	4618      	mov	r0, r3
 8001420:	f003 ffa1 	bl	8005366 <USB_ReadDevOutEPInterrupt>
 8001424:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00c      	beq.n	800144a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	015a      	lsls	r2, r3, #5
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	4413      	add	r3, r2
 8001438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800143c:	461a      	mov	r2, r3
 800143e:	2301      	movs	r3, #1
 8001440:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001442:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 fed7 	bl	80021f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00c      	beq.n	800146e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	015a      	lsls	r2, r3, #5
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	4413      	add	r3, r2
 800145c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001460:	461a      	mov	r2, r3
 8001462:	2308      	movs	r3, #8
 8001464:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001466:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 ffad 	bl	80023c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	f003 0310 	and.w	r3, r3, #16
 8001474:	2b00      	cmp	r3, #0
 8001476:	d008      	beq.n	800148a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	015a      	lsls	r2, r3, #5
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	4413      	add	r3, r2
 8001480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001484:	461a      	mov	r2, r3
 8001486:	2310      	movs	r3, #16
 8001488:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d030      	beq.n	80014f6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001494:	6a3b      	ldr	r3, [r7, #32]
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149c:	2b80      	cmp	r3, #128	; 0x80
 800149e:	d109      	bne.n	80014b4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	69fa      	ldr	r2, [r7, #28]
 80014aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014b2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80014b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b6:	4613      	mov	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4413      	add	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	3304      	adds	r3, #4
 80014c8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	78db      	ldrb	r3, [r3, #3]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d108      	bne.n	80014e4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	2200      	movs	r2, #0
 80014d6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	4619      	mov	r1, r3
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f006 f934 	bl	800774c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	015a      	lsls	r2, r3, #5
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	4413      	add	r3, r2
 80014ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014f0:	461a      	mov	r2, r3
 80014f2:	2302      	movs	r3, #2
 80014f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	f003 0320 	and.w	r3, r3, #32
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d008      	beq.n	8001512 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	015a      	lsls	r2, r3, #5
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	4413      	add	r3, r2
 8001508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800150c:	461a      	mov	r2, r3
 800150e:	2320      	movs	r3, #32
 8001510:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d009      	beq.n	8001530 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	015a      	lsls	r2, r3, #5
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	4413      	add	r3, r2
 8001524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001528:	461a      	mov	r2, r3
 800152a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800152e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	3301      	adds	r3, #1
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001538:	085b      	lsrs	r3, r3, #1
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800153c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153e:	2b00      	cmp	r3, #0
 8001540:	f47f af62 	bne.w	8001408 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f003 fec5 	bl	80052d8 <USB_ReadInterrupts>
 800154e:	4603      	mov	r3, r0
 8001550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001554:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001558:	f040 80db 	bne.w	8001712 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f003 fee6 	bl	8005332 <USB_ReadDevAllInEpInterrupt>
 8001566:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800156c:	e0cd      	b.n	800170a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800156e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 80c2 	beq.w	80016fe <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f003 ff0c 	bl	80053a2 <USB_ReadDevInEPInterrupt>
 800158a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d057      	beq.n	8001646 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	f003 030f 	and.w	r3, r3, #15
 800159c:	2201      	movs	r2, #1
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69f9      	ldr	r1, [r7, #28]
 80015b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80015b6:	4013      	ands	r3, r2
 80015b8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	015a      	lsls	r2, r3, #5
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	4413      	add	r3, r2
 80015c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015c6:	461a      	mov	r2, r3
 80015c8:	2301      	movs	r3, #1
 80015ca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d132      	bne.n	800163a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d8:	4613      	mov	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	4413      	add	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	334c      	adds	r3, #76	; 0x4c
 80015e4:	6819      	ldr	r1, [r3, #0]
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ea:	4613      	mov	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4403      	add	r3, r0
 80015f4:	3348      	adds	r3, #72	; 0x48
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4419      	add	r1, r3
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015fe:	4613      	mov	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4413      	add	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4403      	add	r3, r0
 8001608:	334c      	adds	r3, #76	; 0x4c
 800160a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	2b00      	cmp	r3, #0
 8001610:	d113      	bne.n	800163a <HAL_PCD_IRQHandler+0x3a2>
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001616:	4613      	mov	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4413      	add	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	440b      	add	r3, r1
 8001620:	3354      	adds	r3, #84	; 0x54
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d108      	bne.n	800163a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6818      	ldr	r0, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001632:	461a      	mov	r2, r3
 8001634:	2101      	movs	r1, #1
 8001636:	f003 ff13 	bl	8005460 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	b2db      	uxtb	r3, r3
 800163e:	4619      	mov	r1, r3
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f005 fffe 	bl	8007642 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	2b00      	cmp	r3, #0
 800164e:	d008      	beq.n	8001662 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	015a      	lsls	r2, r3, #5
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	4413      	add	r3, r2
 8001658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800165c:	461a      	mov	r2, r3
 800165e:	2308      	movs	r3, #8
 8001660:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	f003 0310 	and.w	r3, r3, #16
 8001668:	2b00      	cmp	r3, #0
 800166a:	d008      	beq.n	800167e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	015a      	lsls	r2, r3, #5
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	4413      	add	r3, r2
 8001674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001678:	461a      	mov	r2, r3
 800167a:	2310      	movs	r3, #16
 800167c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001684:	2b00      	cmp	r3, #0
 8001686:	d008      	beq.n	800169a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	015a      	lsls	r2, r3, #5
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	4413      	add	r3, r2
 8001690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001694:	461a      	mov	r2, r3
 8001696:	2340      	movs	r3, #64	; 0x40
 8001698:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d023      	beq.n	80016ec <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80016a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016a6:	6a38      	ldr	r0, [r7, #32]
 80016a8:	f002 fdf4 	bl	8004294 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80016ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ae:	4613      	mov	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4413      	add	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	3338      	adds	r3, #56	; 0x38
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	4413      	add	r3, r2
 80016bc:	3304      	adds	r3, #4
 80016be:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	78db      	ldrb	r3, [r3, #3]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d108      	bne.n	80016da <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	2200      	movs	r2, #0
 80016cc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	4619      	mov	r1, r3
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f006 f84b 	bl	8007770 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	015a      	lsls	r2, r3, #5
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	4413      	add	r3, r2
 80016e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016e6:	461a      	mov	r2, r3
 80016e8:	2302      	movs	r3, #2
 80016ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80016f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 fcf0 	bl	80020de <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	3301      	adds	r3, #1
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001706:	085b      	lsrs	r3, r3, #1
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800170a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170c:	2b00      	cmp	r3, #0
 800170e:	f47f af2e 	bne.w	800156e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f003 fdde 	bl	80052d8 <USB_ReadInterrupts>
 800171c:	4603      	mov	r3, r0
 800171e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001722:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001726:	d122      	bne.n	800176e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	69fa      	ldr	r2, [r7, #28]
 8001732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001736:	f023 0301 	bic.w	r3, r3, #1
 800173a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001742:	2b01      	cmp	r3, #1
 8001744:	d108      	bne.n	8001758 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800174e:	2100      	movs	r1, #0
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f006 f9fd 	bl	8007b50 <HAL_PCDEx_LPM_Callback>
 8001756:	e002      	b.n	800175e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f005 ffe9 	bl	8007730 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	695a      	ldr	r2, [r3, #20]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800176c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f003 fdb0 	bl	80052d8 <USB_ReadInterrupts>
 8001778:	4603      	mov	r3, r0
 800177a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800177e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001782:	d112      	bne.n	80017aa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b01      	cmp	r3, #1
 8001792:	d102      	bne.n	800179a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f005 ffa5 	bl	80076e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	695a      	ldr	r2, [r3, #20]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80017a8:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f003 fd92 	bl	80052d8 <USB_ReadInterrupts>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80017be:	d121      	bne.n	8001804 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	695a      	ldr	r2, [r3, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80017ce:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d111      	bne.n	80017fe <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e8:	089b      	lsrs	r3, r3, #2
 80017ea:	f003 020f 	and.w	r2, r3, #15
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80017f4:	2101      	movs	r1, #1
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f006 f9aa 	bl	8007b50 <HAL_PCDEx_LPM_Callback>
 80017fc:	e002      	b.n	8001804 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f005 ff70 	bl	80076e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f003 fd65 	bl	80052d8 <USB_ReadInterrupts>
 800180e:	4603      	mov	r3, r0
 8001810:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001818:	f040 80b7 	bne.w	800198a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	69fa      	ldr	r2, [r7, #28]
 8001826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800182a:	f023 0301 	bic.w	r3, r3, #1
 800182e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2110      	movs	r1, #16
 8001836:	4618      	mov	r0, r3
 8001838:	f002 fd2c 	bl	8004294 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800183c:	2300      	movs	r3, #0
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001840:	e046      	b.n	80018d0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001844:	015a      	lsls	r2, r3, #5
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	4413      	add	r3, r2
 800184a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800184e:	461a      	mov	r2, r3
 8001850:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001854:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001858:	015a      	lsls	r2, r3, #5
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	4413      	add	r3, r2
 800185e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001866:	0151      	lsls	r1, r2, #5
 8001868:	69fa      	ldr	r2, [r7, #28]
 800186a:	440a      	add	r2, r1
 800186c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001870:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001874:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001878:	015a      	lsls	r2, r3, #5
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	4413      	add	r3, r2
 800187e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001882:	461a      	mov	r2, r3
 8001884:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001888:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800188a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188c:	015a      	lsls	r2, r3, #5
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	4413      	add	r3, r2
 8001892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800189a:	0151      	lsls	r1, r2, #5
 800189c:	69fa      	ldr	r2, [r7, #28]
 800189e:	440a      	add	r2, r1
 80018a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ac:	015a      	lsls	r2, r3, #5
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	4413      	add	r3, r2
 80018b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ba:	0151      	lsls	r1, r2, #5
 80018bc:	69fa      	ldr	r2, [r7, #28]
 80018be:	440a      	add	r2, r1
 80018c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018c8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018cc:	3301      	adds	r3, #1
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d3b3      	bcc.n	8001842 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018e8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80018ec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d016      	beq.n	8001924 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001906:	f043 030b 	orr.w	r3, r3, #11
 800190a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	69fa      	ldr	r2, [r7, #28]
 8001918:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800191c:	f043 030b 	orr.w	r3, r3, #11
 8001920:	6453      	str	r3, [r2, #68]	; 0x44
 8001922:	e015      	b.n	8001950 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001932:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001936:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800193a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	69fa      	ldr	r2, [r7, #28]
 8001946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800194a:	f043 030b 	orr.w	r3, r3, #11
 800194e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	69fa      	ldr	r2, [r7, #28]
 800195a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800195e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001962:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6818      	ldr	r0, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001974:	461a      	mov	r2, r3
 8001976:	f003 fd73 	bl	8005460 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	695a      	ldr	r2, [r3, #20]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001988:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f003 fca2 	bl	80052d8 <USB_ReadInterrupts>
 8001994:	4603      	mov	r3, r0
 8001996:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800199a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800199e:	d124      	bne.n	80019ea <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f003 fd38 	bl	800541a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f002 fced 	bl	800438e <USB_GetDevSpeed>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461a      	mov	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681c      	ldr	r4, [r3, #0]
 80019c0:	f000 feaa 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 80019c4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	4620      	mov	r0, r4
 80019d0:	f002 f9f2 	bl	8003db8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f005 fe5c 	bl	8007692 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	695a      	ldr	r2, [r3, #20]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80019e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f003 fc72 	bl	80052d8 <USB_ReadInterrupts>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d10a      	bne.n	8001a14 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f005 fe39 	bl	8007676 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	695a      	ldr	r2, [r3, #20]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f002 0208 	and.w	r2, r2, #8
 8001a12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f003 fc5d 	bl	80052d8 <USB_ReadInterrupts>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a24:	2b80      	cmp	r3, #128	; 0x80
 8001a26:	d122      	bne.n	8001a6e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a30:	6a3b      	ldr	r3, [r7, #32]
 8001a32:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a34:	2301      	movs	r3, #1
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
 8001a38:	e014      	b.n	8001a64 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a3e:	4613      	mov	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	4413      	add	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d105      	bne.n	8001a5e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	4619      	mov	r1, r3
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 fb0f 	bl	800207c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	3301      	adds	r3, #1
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d3e5      	bcc.n	8001a3a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f003 fc30 	bl	80052d8 <USB_ReadInterrupts>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a82:	d13b      	bne.n	8001afc <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a84:	2301      	movs	r3, #1
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
 8001a88:	e02b      	b.n	8001ae2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	015a      	lsls	r2, r3, #5
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	4413      	add	r3, r2
 8001a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	3340      	adds	r3, #64	; 0x40
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d115      	bne.n	8001adc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001ab0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	da12      	bge.n	8001adc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aba:	4613      	mov	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	333f      	adds	r3, #63	; 0x3f
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 fad0 	bl	800207c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	3301      	adds	r3, #1
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d3ce      	bcc.n	8001a8a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695a      	ldr	r2, [r3, #20]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001afa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f003 fbe9 	bl	80052d8 <USB_ReadInterrupts>
 8001b06:	4603      	mov	r3, r0
 8001b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b10:	d155      	bne.n	8001bbe <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b12:	2301      	movs	r3, #1
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
 8001b16:	e045      	b.n	8001ba4 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	015a      	lsls	r2, r3, #5
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	4413      	add	r3, r2
 8001b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d12e      	bne.n	8001b9e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b40:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	da2b      	bge.n	8001b9e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001b52:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d121      	bne.n	8001b9e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b5e:	4613      	mov	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10a      	bne.n	8001b9e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	69fa      	ldr	r2, [r7, #28]
 8001b92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b9a:	6053      	str	r3, [r2, #4]
            break;
 8001b9c:	e007      	b.n	8001bae <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d3b4      	bcc.n	8001b18 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	695a      	ldr	r2, [r3, #20]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001bbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f003 fb88 	bl	80052d8 <USB_ReadInterrupts>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd2:	d10a      	bne.n	8001bea <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f005 fddd 	bl	8007794 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	695a      	ldr	r2, [r3, #20]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001be8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f003 fb72 	bl	80052d8 <USB_ReadInterrupts>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d115      	bne.n	8001c2a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f005 fdcd 	bl	80077b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6859      	ldr	r1, [r3, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	e000      	b.n	8001c2a <HAL_PCD_IRQHandler+0x992>
      return;
 8001c28:	bf00      	nop
    }
  }
}
 8001c2a:	3734      	adds	r7, #52	; 0x34
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd90      	pop	{r4, r7, pc}

08001c30 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_PCD_SetAddress+0x1a>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e013      	b.n	8001c72 <HAL_PCD_SetAddress+0x42>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	78fa      	ldrb	r2, [r7, #3]
 8001c56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	78fa      	ldrb	r2, [r7, #3]
 8001c60:	4611      	mov	r1, r2
 8001c62:	4618      	mov	r0, r3
 8001c64:	f003 fad0 	bl	8005208 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	4608      	mov	r0, r1
 8001c84:	4611      	mov	r1, r2
 8001c86:	461a      	mov	r2, r3
 8001c88:	4603      	mov	r3, r0
 8001c8a:	70fb      	strb	r3, [r7, #3]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	803b      	strh	r3, [r7, #0]
 8001c90:	4613      	mov	r3, r2
 8001c92:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	da0f      	bge.n	8001cc0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	f003 020f 	and.w	r2, r3, #15
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	3338      	adds	r3, #56	; 0x38
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	705a      	strb	r2, [r3, #1]
 8001cbe:	e00f      	b.n	8001ce0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cc0:	78fb      	ldrb	r3, [r7, #3]
 8001cc2:	f003 020f 	and.w	r2, r3, #15
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	4413      	add	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ce0:	78fb      	ldrb	r3, [r7, #3]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cec:	883a      	ldrh	r2, [r7, #0]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	78ba      	ldrb	r2, [r7, #2]
 8001cf6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	785b      	ldrb	r3, [r3, #1]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d004      	beq.n	8001d0a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d0a:	78bb      	ldrb	r3, [r7, #2]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d102      	bne.n	8001d16 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_PCD_EP_Open+0xaa>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e00e      	b.n	8001d42 <HAL_PCD_EP_Open+0xc8>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68f9      	ldr	r1, [r7, #12]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f002 fb50 	bl	80043d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001d40:	7afb      	ldrb	r3, [r7, #11]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b084      	sub	sp, #16
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	460b      	mov	r3, r1
 8001d54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	da0f      	bge.n	8001d7e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	f003 020f 	and.w	r2, r3, #15
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	3338      	adds	r3, #56	; 0x38
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	3304      	adds	r3, #4
 8001d74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	705a      	strb	r2, [r3, #1]
 8001d7c:	e00f      	b.n	8001d9e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d7e:	78fb      	ldrb	r3, [r7, #3]
 8001d80:	f003 020f 	and.w	r2, r3, #15
 8001d84:	4613      	mov	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	4413      	add	r3, r2
 8001d94:	3304      	adds	r3, #4
 8001d96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <HAL_PCD_EP_Close+0x6e>
 8001db4:	2302      	movs	r3, #2
 8001db6:	e00e      	b.n	8001dd6 <HAL_PCD_EP_Close+0x8c>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68f9      	ldr	r1, [r7, #12]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f002 fb8e 	bl	80044e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b086      	sub	sp, #24
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	603b      	str	r3, [r7, #0]
 8001dea:	460b      	mov	r3, r1
 8001dec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dee:	7afb      	ldrb	r3, [r7, #11]
 8001df0:	f003 020f 	and.w	r2, r3, #15
 8001df4:	4613      	mov	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4413      	add	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	3304      	adds	r3, #4
 8001e06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2200      	movs	r2, #0
 8001e18:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e20:	7afb      	ldrb	r3, [r7, #11]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d102      	bne.n	8001e3a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e3a:	7afb      	ldrb	r3, [r7, #11]
 8001e3c:	f003 030f 	and.w	r3, r3, #15
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d109      	bne.n	8001e58 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6818      	ldr	r0, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	6979      	ldr	r1, [r7, #20]
 8001e52:	f002 fe6d 	bl	8004b30 <USB_EP0StartXfer>
 8001e56:	e008      	b.n	8001e6a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	6979      	ldr	r1, [r7, #20]
 8001e66:	f002 fc1b 	bl	80046a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	607a      	str	r2, [r7, #4]
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	460b      	mov	r3, r1
 8001e82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e84:	7afb      	ldrb	r3, [r7, #11]
 8001e86:	f003 020f 	and.w	r2, r3, #15
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	3338      	adds	r3, #56	; 0x38
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	4413      	add	r3, r2
 8001e98:	3304      	adds	r3, #4
 8001e9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eb4:	7afb      	ldrb	r3, [r7, #11]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d102      	bne.n	8001ece <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ece:	7afb      	ldrb	r3, [r7, #11]
 8001ed0:	f003 030f 	and.w	r3, r3, #15
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d109      	bne.n	8001eec <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	6979      	ldr	r1, [r7, #20]
 8001ee6:	f002 fe23 	bl	8004b30 <USB_EP0StartXfer>
 8001eea:	e008      	b.n	8001efe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	6979      	ldr	r1, [r7, #20]
 8001efa:	f002 fbd1 	bl	80046a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	f003 020f 	and.w	r2, r3, #15
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d901      	bls.n	8001f26 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e050      	b.n	8001fc8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	da0f      	bge.n	8001f4e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f2e:	78fb      	ldrb	r3, [r7, #3]
 8001f30:	f003 020f 	and.w	r2, r3, #15
 8001f34:	4613      	mov	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	3338      	adds	r3, #56	; 0x38
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	3304      	adds	r3, #4
 8001f44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	705a      	strb	r2, [r3, #1]
 8001f4c:	e00d      	b.n	8001f6a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f4e:	78fa      	ldrb	r2, [r7, #3]
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	4413      	add	r3, r2
 8001f60:	3304      	adds	r3, #4
 8001f62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d101      	bne.n	8001f8a <HAL_PCD_EP_SetStall+0x82>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e01e      	b.n	8001fc8 <HAL_PCD_EP_SetStall+0xc0>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68f9      	ldr	r1, [r7, #12]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f003 f861 	bl	8005060 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f9e:	78fb      	ldrb	r3, [r7, #3]
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10a      	bne.n	8001fbe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	b2d9      	uxtb	r1, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001fb8:	461a      	mov	r2, r3
 8001fba:	f003 fa51 	bl	8005460 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	f003 020f 	and.w	r2, r3, #15
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d901      	bls.n	8001fee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e042      	b.n	8002074 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	da0f      	bge.n	8002016 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	f003 020f 	and.w	r2, r3, #15
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	3338      	adds	r3, #56	; 0x38
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	3304      	adds	r3, #4
 800200c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2201      	movs	r2, #1
 8002012:	705a      	strb	r2, [r3, #1]
 8002014:	e00f      	b.n	8002036 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	f003 020f 	and.w	r2, r3, #15
 800201c:	4613      	mov	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4413      	add	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	4413      	add	r3, r2
 800202c:	3304      	adds	r3, #4
 800202e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	b2da      	uxtb	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_PCD_EP_ClrStall+0x86>
 8002052:	2302      	movs	r3, #2
 8002054:	e00e      	b.n	8002074 <HAL_PCD_EP_ClrStall+0xa4>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68f9      	ldr	r1, [r7, #12]
 8002064:	4618      	mov	r0, r3
 8002066:	f003 f869 	bl	800513c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002088:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800208c:	2b00      	cmp	r3, #0
 800208e:	da0c      	bge.n	80020aa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	f003 020f 	and.w	r2, r3, #15
 8002096:	4613      	mov	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4413      	add	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	3338      	adds	r3, #56	; 0x38
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	4413      	add	r3, r2
 80020a4:	3304      	adds	r3, #4
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	e00c      	b.n	80020c4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020aa:	78fb      	ldrb	r3, [r7, #3]
 80020ac:	f003 020f 	and.w	r2, r3, #15
 80020b0:	4613      	mov	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4413      	add	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	4413      	add	r3, r2
 80020c0:	3304      	adds	r3, #4
 80020c2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68f9      	ldr	r1, [r7, #12]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f002 fe88 	bl	8004de0 <USB_EPStopXfer>
 80020d0:	4603      	mov	r3, r0
 80020d2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80020d4:	7afb      	ldrb	r3, [r7, #11]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b08a      	sub	sp, #40	; 0x28
 80020e2:	af02      	add	r7, sp, #8
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	4613      	mov	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4413      	add	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	3338      	adds	r3, #56	; 0x38
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	3304      	adds	r3, #4
 8002104:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6a1a      	ldr	r2, [r3, #32]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	429a      	cmp	r2, r3
 8002110:	d901      	bls.n	8002116 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e06c      	b.n	80021f0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	699a      	ldr	r2, [r3, #24]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	69fa      	ldr	r2, [r7, #28]
 8002128:	429a      	cmp	r2, r3
 800212a:	d902      	bls.n	8002132 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3303      	adds	r3, #3
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800213a:	e02b      	b.n	8002194 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	699a      	ldr	r2, [r3, #24]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	69fa      	ldr	r2, [r7, #28]
 800214e:	429a      	cmp	r2, r3
 8002150:	d902      	bls.n	8002158 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	3303      	adds	r3, #3
 800215c:	089b      	lsrs	r3, r3, #2
 800215e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6919      	ldr	r1, [r3, #16]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002170:	b2db      	uxtb	r3, r3
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	4603      	mov	r3, r0
 8002176:	6978      	ldr	r0, [r7, #20]
 8002178:	f002 fedc 	bl	8004f34 <USB_WritePacket>

    ep->xfer_buff  += len;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	691a      	ldr	r2, [r3, #16]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	441a      	add	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a1a      	ldr	r2, [r3, #32]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	441a      	add	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	015a      	lsls	r2, r3, #5
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4413      	add	r3, r2
 800219c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d809      	bhi.n	80021be <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6a1a      	ldr	r2, [r3, #32]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d203      	bcs.n	80021be <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1be      	bne.n	800213c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	699a      	ldr	r2, [r3, #24]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d811      	bhi.n	80021ee <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	2201      	movs	r2, #1
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	43db      	mvns	r3, r3
 80021e4:	6939      	ldr	r1, [r7, #16]
 80021e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021ea:	4013      	ands	r3, r2
 80021ec:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3720      	adds	r7, #32
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	333c      	adds	r3, #60	; 0x3c
 8002210:	3304      	adds	r3, #4
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	4413      	add	r3, r2
 800221e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d17b      	bne.n	8002326 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	d015      	beq.n	8002264 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	4a61      	ldr	r2, [pc, #388]	; (80023c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	f240 80b9 	bls.w	80023b4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 80b3 	beq.w	80023b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	015a      	lsls	r2, r3, #5
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	4413      	add	r3, r2
 8002256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800225a:	461a      	mov	r2, r3
 800225c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002260:	6093      	str	r3, [r2, #8]
 8002262:	e0a7      	b.n	80023b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	2b00      	cmp	r3, #0
 800226c:	d009      	beq.n	8002282 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	015a      	lsls	r2, r3, #5
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	4413      	add	r3, r2
 8002276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800227a:	461a      	mov	r2, r3
 800227c:	2320      	movs	r3, #32
 800227e:	6093      	str	r3, [r2, #8]
 8002280:	e098      	b.n	80023b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002288:	2b00      	cmp	r3, #0
 800228a:	f040 8093 	bne.w	80023b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	4a4b      	ldr	r2, [pc, #300]	; (80023c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d90f      	bls.n	80022b6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00a      	beq.n	80022b6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ac:	461a      	mov	r2, r3
 80022ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022b2:	6093      	str	r3, [r2, #8]
 80022b4:	e07e      	b.n	80023b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	4413      	add	r3, r2
 80022c8:	3304      	adds	r3, #4
 80022ca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	69da      	ldr	r2, [r3, #28]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	0159      	lsls	r1, r3, #5
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	440b      	add	r3, r1
 80022d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e2:	1ad2      	subs	r2, r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d114      	bne.n	8002318 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002300:	461a      	mov	r2, r3
 8002302:	2101      	movs	r1, #1
 8002304:	f003 f8ac 	bl	8005460 <USB_EP0_OutStart>
 8002308:	e006      	b.n	8002318 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	691a      	ldr	r2, [r3, #16]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	441a      	add	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	b2db      	uxtb	r3, r3
 800231c:	4619      	mov	r1, r3
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f005 f974 	bl	800760c <HAL_PCD_DataOutStageCallback>
 8002324:	e046      	b.n	80023b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	4a26      	ldr	r2, [pc, #152]	; (80023c4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d124      	bne.n	8002378 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	4413      	add	r3, r2
 8002340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002344:	461a      	mov	r2, r3
 8002346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800234a:	6093      	str	r3, [r2, #8]
 800234c:	e032      	b.n	80023b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	f003 0320 	and.w	r3, r3, #32
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	015a      	lsls	r2, r3, #5
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	4413      	add	r3, r2
 8002360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002364:	461a      	mov	r2, r3
 8002366:	2320      	movs	r3, #32
 8002368:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	4619      	mov	r1, r3
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f005 f94b 	bl	800760c <HAL_PCD_DataOutStageCallback>
 8002376:	e01d      	b.n	80023b4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d114      	bne.n	80023a8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	4613      	mov	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4413      	add	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d108      	bne.n	80023a8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6818      	ldr	r0, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023a0:	461a      	mov	r2, r3
 80023a2:	2100      	movs	r1, #0
 80023a4:	f003 f85c 	bl	8005460 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	4619      	mov	r1, r3
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f005 f92c 	bl	800760c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3720      	adds	r7, #32
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	4f54300a 	.word	0x4f54300a
 80023c4:	4f54310a 	.word	0x4f54310a

080023c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	333c      	adds	r3, #60	; 0x3c
 80023e0:	3304      	adds	r3, #4
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4a15      	ldr	r2, [pc, #84]	; (8002450 <PCD_EP_OutSetupPacket_int+0x88>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d90e      	bls.n	800241c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002404:	2b00      	cmp	r3, #0
 8002406:	d009      	beq.n	800241c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4413      	add	r3, r2
 8002410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002414:	461a      	mov	r2, r3
 8002416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800241a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f005 f8e3 	bl	80075e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <PCD_EP_OutSetupPacket_int+0x88>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d90c      	bls.n	8002444 <PCD_EP_OutSetupPacket_int+0x7c>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d108      	bne.n	8002444 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800243c:	461a      	mov	r2, r3
 800243e:	2101      	movs	r1, #1
 8002440:	f003 f80e 	bl	8005460 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	4f54300a 	.word	0x4f54300a

08002454 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	70fb      	strb	r3, [r7, #3]
 8002460:	4613      	mov	r3, r2
 8002462:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d107      	bne.n	8002482 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002472:	883b      	ldrh	r3, [r7, #0]
 8002474:	0419      	lsls	r1, r3, #16
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	430a      	orrs	r2, r1
 800247e:	629a      	str	r2, [r3, #40]	; 0x28
 8002480:	e028      	b.n	80024d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	0c1b      	lsrs	r3, r3, #16
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	4413      	add	r3, r2
 800248e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002490:	2300      	movs	r3, #0
 8002492:	73fb      	strb	r3, [r7, #15]
 8002494:	e00d      	b.n	80024b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	3340      	adds	r3, #64	; 0x40
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	0c1b      	lsrs	r3, r3, #16
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	4413      	add	r3, r2
 80024aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	3301      	adds	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
 80024b2:	7bfa      	ldrb	r2, [r7, #15]
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d3ec      	bcc.n	8002496 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80024bc:	883b      	ldrh	r3, [r7, #0]
 80024be:	0418      	lsls	r0, r3, #16
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6819      	ldr	r1, [r3, #0]
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	4302      	orrs	r2, r0
 80024cc:	3340      	adds	r3, #64	; 0x40
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	460b      	mov	r3, r1
 80024ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	887a      	ldrh	r2, [r7, #2]
 80024f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002536:	f043 0303 	orr.w	r3, r3, #3
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0cc      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002560:	4b68      	ldr	r3, [pc, #416]	; (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d90c      	bls.n	8002588 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b65      	ldr	r3, [pc, #404]	; (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002576:	4b63      	ldr	r3, [pc, #396]	; (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d001      	beq.n	8002588 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0b8      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d020      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025a0:	4b59      	ldr	r3, [pc, #356]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	4a58      	ldr	r2, [pc, #352]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025b8:	4b53      	ldr	r3, [pc, #332]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	4a52      	ldr	r2, [pc, #328]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c4:	4b50      	ldr	r3, [pc, #320]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	494d      	ldr	r1, [pc, #308]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d044      	beq.n	800266c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	4b47      	ldr	r3, [pc, #284]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d119      	bne.n	800262a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e07f      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d003      	beq.n	800260a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002606:	2b03      	cmp	r3, #3
 8002608:	d107      	bne.n	800261a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260a:	4b3f      	ldr	r3, [pc, #252]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d109      	bne.n	800262a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e06f      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261a:	4b3b      	ldr	r3, [pc, #236]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e067      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800262a:	4b37      	ldr	r3, [pc, #220]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f023 0203 	bic.w	r2, r3, #3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4934      	ldr	r1, [pc, #208]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	4313      	orrs	r3, r2
 800263a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800263c:	f7fe f9e6 	bl	8000a0c <HAL_GetTick>
 8002640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002642:	e00a      	b.n	800265a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002644:	f7fe f9e2 	bl	8000a0c <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e04f      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265a:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 020c 	and.w	r2, r3, #12
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	429a      	cmp	r2, r3
 800266a:	d1eb      	bne.n	8002644 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800266c:	4b25      	ldr	r3, [pc, #148]	; (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d20c      	bcs.n	8002694 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267a:	4b22      	ldr	r3, [pc, #136]	; (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002682:	4b20      	ldr	r3, [pc, #128]	; (8002704 <HAL_RCC_ClockConfig+0x1b8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d001      	beq.n	8002694 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e032      	b.n	80026fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a0:	4b19      	ldr	r3, [pc, #100]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4916      	ldr	r1, [pc, #88]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d009      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026be:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	490e      	ldr	r1, [pc, #56]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026d2:	f000 fb7f 	bl	8002dd4 <HAL_RCC_GetSysClockFreq>
 80026d6:	4602      	mov	r2, r0
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_RCC_ClockConfig+0x1bc>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	490a      	ldr	r1, [pc, #40]	; (800270c <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	5ccb      	ldrb	r3, [r1, r3]
 80026e6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ea:	4a09      	ldr	r2, [pc, #36]	; (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_RCC_ClockConfig+0x1c8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe f946 	bl	8000984 <HAL_InitTick>

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40023c00 	.word	0x40023c00
 8002708:	40023800 	.word	0x40023800
 800270c:	08007d2c 	.word	0x08007d2c
 8002710:	20000000 	.word	0x20000000
 8002714:	20000004 	.word	0x20000004

08002718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <HAL_RCC_GetHCLKFreq+0x14>)
 800271e:	681b      	ldr	r3, [r3, #0]
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000000 	.word	0x20000000

08002730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002734:	f7ff fff0 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002738:	4602      	mov	r2, r0
 800273a:	4b05      	ldr	r3, [pc, #20]	; (8002750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	0a9b      	lsrs	r3, r3, #10
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	4903      	ldr	r1, [pc, #12]	; (8002754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002746:	5ccb      	ldrb	r3, [r1, r3]
 8002748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800274c:	4618      	mov	r0, r3
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40023800 	.word	0x40023800
 8002754:	08007d3c 	.word	0x08007d3c

08002758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800275c:	f7ff ffdc 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	0b5b      	lsrs	r3, r3, #13
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	4903      	ldr	r1, [pc, #12]	; (800277c <HAL_RCC_GetPCLK2Freq+0x24>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40023800 	.word	0x40023800
 800277c:	08007d3c 	.word	0x08007d3c

08002780 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08c      	sub	sp, #48	; 0x30
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d010      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80027b8:	4b6f      	ldr	r3, [pc, #444]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027be:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c6:	496c      	ldr	r1, [pc, #432]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80027d6:	2301      	movs	r3, #1
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d010      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80027e6:	4b64      	ldr	r3, [pc, #400]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027ec:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f4:	4960      	ldr	r1, [pc, #384]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002804:	2301      	movs	r3, #1
 8002806:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d017      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002814:	4b58      	ldr	r3, [pc, #352]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002816:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800281a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	4955      	ldr	r1, [pc, #340]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002832:	d101      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002834:	2301      	movs	r3, #1
 8002836:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002840:	2301      	movs	r3, #1
 8002842:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d017      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002850:	4b49      	ldr	r3, [pc, #292]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002856:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285e:	4946      	ldr	r1, [pc, #280]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800286e:	d101      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002870:	2301      	movs	r3, #1
 8002872:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800287c:	2301      	movs	r3, #1
 800287e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0320 	and.w	r3, r3, #32
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 808a 	beq.w	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	4b39      	ldr	r3, [pc, #228]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	4a38      	ldr	r2, [pc, #224]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800289c:	6413      	str	r3, [r2, #64]	; 0x40
 800289e:	4b36      	ldr	r3, [pc, #216]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80028aa:	4b34      	ldr	r3, [pc, #208]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a33      	ldr	r2, [pc, #204]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80028b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028b6:	f7fe f8a9 	bl	8000a0c <HAL_GetTick>
 80028ba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80028be:	f7fe f8a5 	bl	8000a0c <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e278      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80028d0:	4b2a      	ldr	r3, [pc, #168]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028dc:	4b26      	ldr	r3, [pc, #152]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028e4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d02f      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f4:	6a3a      	ldr	r2, [r7, #32]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d028      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028fa:	4b1f      	ldr	r3, [pc, #124]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002902:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002904:	4b1e      	ldr	r3, [pc, #120]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002906:	2201      	movs	r2, #1
 8002908:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800290a:	4b1d      	ldr	r3, [pc, #116]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002910:	4a19      	ldr	r2, [pc, #100]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002916:	4b18      	ldr	r3, [pc, #96]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b01      	cmp	r3, #1
 8002920:	d114      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002922:	f7fe f873 	bl	8000a0c <HAL_GetTick>
 8002926:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002928:	e00a      	b.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800292a:	f7fe f86f 	bl	8000a0c <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f241 3288 	movw	r2, #5000	; 0x1388
 8002938:	4293      	cmp	r3, r2
 800293a:	d901      	bls.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e240      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002940:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0ee      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002958:	d114      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800295a:	4b07      	ldr	r3, [pc, #28]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800296a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800296e:	4902      	ldr	r1, [pc, #8]	; (8002978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002970:	4313      	orrs	r3, r2
 8002972:	608b      	str	r3, [r1, #8]
 8002974:	e00c      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002976:	bf00      	nop
 8002978:	40023800 	.word	0x40023800
 800297c:	40007000 	.word	0x40007000
 8002980:	42470e40 	.word	0x42470e40
 8002984:	4b4a      	ldr	r3, [pc, #296]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4a49      	ldr	r2, [pc, #292]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800298a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800298e:	6093      	str	r3, [r2, #8]
 8002990:	4b47      	ldr	r3, [pc, #284]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002992:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800299c:	4944      	ldr	r1, [pc, #272]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d004      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80029b4:	4b3f      	ldr	r3, [pc, #252]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80029b6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80029c4:	4b3a      	ldr	r3, [pc, #232]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d2:	4937      	ldr	r1, [pc, #220]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029e6:	4b32      	ldr	r3, [pc, #200]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ec:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f4:	492e      	ldr	r1, [pc, #184]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d011      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a08:	4b29      	ldr	r3, [pc, #164]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a0e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a16:	4926      	ldr	r1, [pc, #152]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a26:	d101      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00a      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002a38:	4b1d      	ldr	r3, [pc, #116]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	491a      	ldr	r1, [pc, #104]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d011      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a60:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a68:	4911      	ldr	r1, [pc, #68]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a78:	d101      	bne.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d005      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a8c:	f040 80ff 	bne.w	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a90:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a96:	f7fd ffb9 	bl	8000a0c <HAL_GetTick>
 8002a9a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a9c:	e00e      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a9e:	f7fd ffb5 	bl	8000a0c <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d907      	bls.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e188      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	424711e0 	.word	0x424711e0
 8002ab8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002abc:	4b7e      	ldr	r3, [pc, #504]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1ea      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d009      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d028      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d124      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002af0:	4b71      	ldr	r3, [pc, #452]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002af6:	0c1b      	lsrs	r3, r3, #16
 8002af8:	f003 0303 	and.w	r3, r3, #3
 8002afc:	3301      	adds	r3, #1
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b02:	4b6d      	ldr	r3, [pc, #436]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b08:	0e1b      	lsrs	r3, r3, #24
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	019b      	lsls	r3, r3, #6
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	085b      	lsrs	r3, r3, #1
 8002b20:	3b01      	subs	r3, #1
 8002b22:	041b      	lsls	r3, r3, #16
 8002b24:	431a      	orrs	r2, r3
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	061b      	lsls	r3, r3, #24
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	071b      	lsls	r3, r3, #28
 8002b32:	4961      	ldr	r1, [pc, #388]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d004      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b4e:	d00a      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d035      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b64:	d130      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002b66:	4b54      	ldr	r3, [pc, #336]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b6c:	0c1b      	lsrs	r3, r3, #16
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	3301      	adds	r3, #1
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b78:	4b4f      	ldr	r3, [pc, #316]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b7e:	0f1b      	lsrs	r3, r3, #28
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	019b      	lsls	r3, r3, #6
 8002b90:	431a      	orrs	r2, r3
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	085b      	lsrs	r3, r3, #1
 8002b96:	3b01      	subs	r3, #1
 8002b98:	041b      	lsls	r3, r3, #16
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	061b      	lsls	r3, r3, #24
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	071b      	lsls	r3, r3, #28
 8002ba8:	4943      	ldr	r1, [pc, #268]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002bb0:	4b41      	ldr	r3, [pc, #260]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bb6:	f023 021f 	bic.w	r2, r3, #31
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	493d      	ldr	r1, [pc, #244]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d029      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bdc:	d124      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002bde:	4b36      	ldr	r3, [pc, #216]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002be4:	0c1b      	lsrs	r3, r3, #16
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	3301      	adds	r3, #1
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bf0:	4b31      	ldr	r3, [pc, #196]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bf6:	0f1b      	lsrs	r3, r3, #28
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	019b      	lsls	r3, r3, #6
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	085b      	lsrs	r3, r3, #1
 8002c10:	3b01      	subs	r3, #1
 8002c12:	041b      	lsls	r3, r3, #16
 8002c14:	431a      	orrs	r2, r3
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	061b      	lsls	r3, r3, #24
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	071b      	lsls	r3, r3, #28
 8002c20:	4925      	ldr	r1, [pc, #148]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d016      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	019b      	lsls	r3, r3, #6
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	085b      	lsrs	r3, r3, #1
 8002c46:	3b01      	subs	r3, #1
 8002c48:	041b      	lsls	r3, r3, #16
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	061b      	lsls	r3, r3, #24
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	071b      	lsls	r3, r3, #28
 8002c5a:	4917      	ldr	r1, [pc, #92]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c62:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002c64:	2201      	movs	r2, #1
 8002c66:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c68:	f7fd fed0 	bl	8000a0c <HAL_GetTick>
 8002c6c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c70:	f7fd fecc 	bl	8000a0c <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e09f      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c82:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	f040 8095 	bne.w	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002c96:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c9c:	f7fd feb6 	bl	8000a0c <HAL_GetTick>
 8002ca0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ca2:	e00f      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002ca4:	f7fd feb2 	bl	8000a0c <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d908      	bls.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e085      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002cb6:	bf00      	nop
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	42470068 	.word	0x42470068
 8002cc0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cc4:	4b41      	ldr	r3, [pc, #260]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd0:	d0e8      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d02b      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d127      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002cfa:	4b34      	ldr	r3, [pc, #208]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d00:	0c1b      	lsrs	r3, r3, #16
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	3301      	adds	r3, #1
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699a      	ldr	r2, [r3, #24]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	019b      	lsls	r3, r3, #6
 8002d16:	431a      	orrs	r2, r3
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	085b      	lsrs	r3, r3, #1
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	041b      	lsls	r3, r3, #16
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	061b      	lsls	r3, r3, #24
 8002d28:	4928      	ldr	r1, [pc, #160]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d30:	4b26      	ldr	r3, [pc, #152]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d36:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	021b      	lsls	r3, r3, #8
 8002d42:	4922      	ldr	r1, [pc, #136]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d01d      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d5e:	d118      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d60:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d66:	0e1b      	lsrs	r3, r3, #24
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	019b      	lsls	r3, r3, #6
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	085b      	lsrs	r3, r3, #1
 8002d80:	3b01      	subs	r3, #1
 8002d82:	041b      	lsls	r3, r3, #16
 8002d84:	431a      	orrs	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	061b      	lsls	r3, r3, #24
 8002d8a:	4910      	ldr	r1, [pc, #64]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d92:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d98:	f7fd fe38 	bl	8000a0c <HAL_GetTick>
 8002d9c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002da0:	f7fd fe34 	bl	8000a0c <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e007      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dbe:	d1ef      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3730      	adds	r7, #48	; 0x30
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	42470070 	.word	0x42470070

08002dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd8:	b0ae      	sub	sp, #184	; 0xb8
 8002dda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002dee:	2300      	movs	r3, #0
 8002df0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dfa:	4bcb      	ldr	r3, [pc, #812]	; (8003128 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	2b0c      	cmp	r3, #12
 8002e04:	f200 8206 	bhi.w	8003214 <HAL_RCC_GetSysClockFreq+0x440>
 8002e08:	a201      	add	r2, pc, #4	; (adr r2, 8002e10 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0e:	bf00      	nop
 8002e10:	08002e45 	.word	0x08002e45
 8002e14:	08003215 	.word	0x08003215
 8002e18:	08003215 	.word	0x08003215
 8002e1c:	08003215 	.word	0x08003215
 8002e20:	08002e4d 	.word	0x08002e4d
 8002e24:	08003215 	.word	0x08003215
 8002e28:	08003215 	.word	0x08003215
 8002e2c:	08003215 	.word	0x08003215
 8002e30:	08002e55 	.word	0x08002e55
 8002e34:	08003215 	.word	0x08003215
 8002e38:	08003215 	.word	0x08003215
 8002e3c:	08003215 	.word	0x08003215
 8002e40:	08003045 	.word	0x08003045
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e44:	4bb9      	ldr	r3, [pc, #740]	; (800312c <HAL_RCC_GetSysClockFreq+0x358>)
 8002e46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002e4a:	e1e7      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e4c:	4bb8      	ldr	r3, [pc, #736]	; (8003130 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002e4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e52:	e1e3      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e54:	4bb4      	ldr	r3, [pc, #720]	; (8003128 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e60:	4bb1      	ldr	r3, [pc, #708]	; (8003128 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d071      	beq.n	8002f50 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e6c:	4bae      	ldr	r3, [pc, #696]	; (8003128 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	099b      	lsrs	r3, r3, #6
 8002e72:	2200      	movs	r2, #0
 8002e74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e78:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002e7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e92:	4622      	mov	r2, r4
 8002e94:	462b      	mov	r3, r5
 8002e96:	f04f 0000 	mov.w	r0, #0
 8002e9a:	f04f 0100 	mov.w	r1, #0
 8002e9e:	0159      	lsls	r1, r3, #5
 8002ea0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ea4:	0150      	lsls	r0, r2, #5
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4621      	mov	r1, r4
 8002eac:	1a51      	subs	r1, r2, r1
 8002eae:	6439      	str	r1, [r7, #64]	; 0x40
 8002eb0:	4629      	mov	r1, r5
 8002eb2:	eb63 0301 	sbc.w	r3, r3, r1
 8002eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002ec4:	4649      	mov	r1, r9
 8002ec6:	018b      	lsls	r3, r1, #6
 8002ec8:	4641      	mov	r1, r8
 8002eca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ece:	4641      	mov	r1, r8
 8002ed0:	018a      	lsls	r2, r1, #6
 8002ed2:	4641      	mov	r1, r8
 8002ed4:	1a51      	subs	r1, r2, r1
 8002ed6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ed8:	4649      	mov	r1, r9
 8002eda:	eb63 0301 	sbc.w	r3, r3, r1
 8002ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002eec:	4649      	mov	r1, r9
 8002eee:	00cb      	lsls	r3, r1, #3
 8002ef0:	4641      	mov	r1, r8
 8002ef2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ef6:	4641      	mov	r1, r8
 8002ef8:	00ca      	lsls	r2, r1, #3
 8002efa:	4610      	mov	r0, r2
 8002efc:	4619      	mov	r1, r3
 8002efe:	4603      	mov	r3, r0
 8002f00:	4622      	mov	r2, r4
 8002f02:	189b      	adds	r3, r3, r2
 8002f04:	633b      	str	r3, [r7, #48]	; 0x30
 8002f06:	462b      	mov	r3, r5
 8002f08:	460a      	mov	r2, r1
 8002f0a:	eb42 0303 	adc.w	r3, r2, r3
 8002f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f10:	f04f 0200 	mov.w	r2, #0
 8002f14:	f04f 0300 	mov.w	r3, #0
 8002f18:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f1c:	4629      	mov	r1, r5
 8002f1e:	024b      	lsls	r3, r1, #9
 8002f20:	4621      	mov	r1, r4
 8002f22:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f26:	4621      	mov	r1, r4
 8002f28:	024a      	lsls	r2, r1, #9
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f32:	2200      	movs	r2, #0
 8002f34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f3c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002f40:	f7fd f960 	bl	8000204 <__aeabi_uldivmod>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4613      	mov	r3, r2
 8002f4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f4e:	e067      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f50:	4b75      	ldr	r3, [pc, #468]	; (8003128 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	099b      	lsrs	r3, r3, #6
 8002f56:	2200      	movs	r2, #0
 8002f58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f5c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002f60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f68:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f6e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002f72:	4622      	mov	r2, r4
 8002f74:	462b      	mov	r3, r5
 8002f76:	f04f 0000 	mov.w	r0, #0
 8002f7a:	f04f 0100 	mov.w	r1, #0
 8002f7e:	0159      	lsls	r1, r3, #5
 8002f80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f84:	0150      	lsls	r0, r2, #5
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4621      	mov	r1, r4
 8002f8c:	1a51      	subs	r1, r2, r1
 8002f8e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f90:	4629      	mov	r1, r5
 8002f92:	eb63 0301 	sbc.w	r3, r3, r1
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002fa4:	4649      	mov	r1, r9
 8002fa6:	018b      	lsls	r3, r1, #6
 8002fa8:	4641      	mov	r1, r8
 8002faa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fae:	4641      	mov	r1, r8
 8002fb0:	018a      	lsls	r2, r1, #6
 8002fb2:	4641      	mov	r1, r8
 8002fb4:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fb8:	4649      	mov	r1, r9
 8002fba:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	f04f 0300 	mov.w	r3, #0
 8002fc6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fd2:	4692      	mov	sl, r2
 8002fd4:	469b      	mov	fp, r3
 8002fd6:	4623      	mov	r3, r4
 8002fd8:	eb1a 0303 	adds.w	r3, sl, r3
 8002fdc:	623b      	str	r3, [r7, #32]
 8002fde:	462b      	mov	r3, r5
 8002fe0:	eb4b 0303 	adc.w	r3, fp, r3
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe6:	f04f 0200 	mov.w	r2, #0
 8002fea:	f04f 0300 	mov.w	r3, #0
 8002fee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002ff2:	4629      	mov	r1, r5
 8002ff4:	028b      	lsls	r3, r1, #10
 8002ff6:	4621      	mov	r1, r4
 8002ff8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	028a      	lsls	r2, r1, #10
 8003000:	4610      	mov	r0, r2
 8003002:	4619      	mov	r1, r3
 8003004:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003008:	2200      	movs	r2, #0
 800300a:	673b      	str	r3, [r7, #112]	; 0x70
 800300c:	677a      	str	r2, [r7, #116]	; 0x74
 800300e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003012:	f7fd f8f7 	bl	8000204 <__aeabi_uldivmod>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4613      	mov	r3, r2
 800301c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003020:	4b41      	ldr	r3, [pc, #260]	; (8003128 <HAL_RCC_GetSysClockFreq+0x354>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	0c1b      	lsrs	r3, r3, #16
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	3301      	adds	r3, #1
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003032:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003036:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800303a:	fbb2 f3f3 	udiv	r3, r2, r3
 800303e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003042:	e0eb      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003044:	4b38      	ldr	r3, [pc, #224]	; (8003128 <HAL_RCC_GetSysClockFreq+0x354>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800304c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003050:	4b35      	ldr	r3, [pc, #212]	; (8003128 <HAL_RCC_GetSysClockFreq+0x354>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d06b      	beq.n	8003134 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800305c:	4b32      	ldr	r3, [pc, #200]	; (8003128 <HAL_RCC_GetSysClockFreq+0x354>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	099b      	lsrs	r3, r3, #6
 8003062:	2200      	movs	r2, #0
 8003064:	66bb      	str	r3, [r7, #104]	; 0x68
 8003066:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003068:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800306a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800306e:	663b      	str	r3, [r7, #96]	; 0x60
 8003070:	2300      	movs	r3, #0
 8003072:	667b      	str	r3, [r7, #100]	; 0x64
 8003074:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003078:	4622      	mov	r2, r4
 800307a:	462b      	mov	r3, r5
 800307c:	f04f 0000 	mov.w	r0, #0
 8003080:	f04f 0100 	mov.w	r1, #0
 8003084:	0159      	lsls	r1, r3, #5
 8003086:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800308a:	0150      	lsls	r0, r2, #5
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4621      	mov	r1, r4
 8003092:	1a51      	subs	r1, r2, r1
 8003094:	61b9      	str	r1, [r7, #24]
 8003096:	4629      	mov	r1, r5
 8003098:	eb63 0301 	sbc.w	r3, r3, r1
 800309c:	61fb      	str	r3, [r7, #28]
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	f04f 0300 	mov.w	r3, #0
 80030a6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80030aa:	4659      	mov	r1, fp
 80030ac:	018b      	lsls	r3, r1, #6
 80030ae:	4651      	mov	r1, sl
 80030b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030b4:	4651      	mov	r1, sl
 80030b6:	018a      	lsls	r2, r1, #6
 80030b8:	4651      	mov	r1, sl
 80030ba:	ebb2 0801 	subs.w	r8, r2, r1
 80030be:	4659      	mov	r1, fp
 80030c0:	eb63 0901 	sbc.w	r9, r3, r1
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030d8:	4690      	mov	r8, r2
 80030da:	4699      	mov	r9, r3
 80030dc:	4623      	mov	r3, r4
 80030de:	eb18 0303 	adds.w	r3, r8, r3
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	462b      	mov	r3, r5
 80030e6:	eb49 0303 	adc.w	r3, r9, r3
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80030f8:	4629      	mov	r1, r5
 80030fa:	024b      	lsls	r3, r1, #9
 80030fc:	4621      	mov	r1, r4
 80030fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003102:	4621      	mov	r1, r4
 8003104:	024a      	lsls	r2, r1, #9
 8003106:	4610      	mov	r0, r2
 8003108:	4619      	mov	r1, r3
 800310a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800310e:	2200      	movs	r2, #0
 8003110:	65bb      	str	r3, [r7, #88]	; 0x58
 8003112:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003114:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003118:	f7fd f874 	bl	8000204 <__aeabi_uldivmod>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4613      	mov	r3, r2
 8003122:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003126:	e065      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x420>
 8003128:	40023800 	.word	0x40023800
 800312c:	00f42400 	.word	0x00f42400
 8003130:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003134:	4b3d      	ldr	r3, [pc, #244]	; (800322c <HAL_RCC_GetSysClockFreq+0x458>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	099b      	lsrs	r3, r3, #6
 800313a:	2200      	movs	r2, #0
 800313c:	4618      	mov	r0, r3
 800313e:	4611      	mov	r1, r2
 8003140:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003144:	653b      	str	r3, [r7, #80]	; 0x50
 8003146:	2300      	movs	r3, #0
 8003148:	657b      	str	r3, [r7, #84]	; 0x54
 800314a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800314e:	4642      	mov	r2, r8
 8003150:	464b      	mov	r3, r9
 8003152:	f04f 0000 	mov.w	r0, #0
 8003156:	f04f 0100 	mov.w	r1, #0
 800315a:	0159      	lsls	r1, r3, #5
 800315c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003160:	0150      	lsls	r0, r2, #5
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4641      	mov	r1, r8
 8003168:	1a51      	subs	r1, r2, r1
 800316a:	60b9      	str	r1, [r7, #8]
 800316c:	4649      	mov	r1, r9
 800316e:	eb63 0301 	sbc.w	r3, r3, r1
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003180:	4659      	mov	r1, fp
 8003182:	018b      	lsls	r3, r1, #6
 8003184:	4651      	mov	r1, sl
 8003186:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800318a:	4651      	mov	r1, sl
 800318c:	018a      	lsls	r2, r1, #6
 800318e:	4651      	mov	r1, sl
 8003190:	1a54      	subs	r4, r2, r1
 8003192:	4659      	mov	r1, fp
 8003194:	eb63 0501 	sbc.w	r5, r3, r1
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	f04f 0300 	mov.w	r3, #0
 80031a0:	00eb      	lsls	r3, r5, #3
 80031a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031a6:	00e2      	lsls	r2, r4, #3
 80031a8:	4614      	mov	r4, r2
 80031aa:	461d      	mov	r5, r3
 80031ac:	4643      	mov	r3, r8
 80031ae:	18e3      	adds	r3, r4, r3
 80031b0:	603b      	str	r3, [r7, #0]
 80031b2:	464b      	mov	r3, r9
 80031b4:	eb45 0303 	adc.w	r3, r5, r3
 80031b8:	607b      	str	r3, [r7, #4]
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031c6:	4629      	mov	r1, r5
 80031c8:	028b      	lsls	r3, r1, #10
 80031ca:	4621      	mov	r1, r4
 80031cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031d0:	4621      	mov	r1, r4
 80031d2:	028a      	lsls	r2, r1, #10
 80031d4:	4610      	mov	r0, r2
 80031d6:	4619      	mov	r1, r3
 80031d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031dc:	2200      	movs	r2, #0
 80031de:	64bb      	str	r3, [r7, #72]	; 0x48
 80031e0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80031e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80031e6:	f7fd f80d 	bl	8000204 <__aeabi_uldivmod>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4613      	mov	r3, r2
 80031f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80031f4:	4b0d      	ldr	r3, [pc, #52]	; (800322c <HAL_RCC_GetSysClockFreq+0x458>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	0f1b      	lsrs	r3, r3, #28
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003202:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003206:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800320a:	fbb2 f3f3 	udiv	r3, r2, r3
 800320e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003212:	e003      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003214:	4b06      	ldr	r3, [pc, #24]	; (8003230 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003216:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800321a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800321c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003220:	4618      	mov	r0, r3
 8003222:	37b8      	adds	r7, #184	; 0xb8
 8003224:	46bd      	mov	sp, r7
 8003226:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800322a:	bf00      	nop
 800322c:	40023800 	.word	0x40023800
 8003230:	00f42400 	.word	0x00f42400

08003234 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e28d      	b.n	8003762 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 8083 	beq.w	800335a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003254:	4b94      	ldr	r3, [pc, #592]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 030c 	and.w	r3, r3, #12
 800325c:	2b04      	cmp	r3, #4
 800325e:	d019      	beq.n	8003294 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003260:	4b91      	ldr	r3, [pc, #580]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003268:	2b08      	cmp	r3, #8
 800326a:	d106      	bne.n	800327a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800326c:	4b8e      	ldr	r3, [pc, #568]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003274:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003278:	d00c      	beq.n	8003294 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800327a:	4b8b      	ldr	r3, [pc, #556]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003282:	2b0c      	cmp	r3, #12
 8003284:	d112      	bne.n	80032ac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003286:	4b88      	ldr	r3, [pc, #544]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003292:	d10b      	bne.n	80032ac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003294:	4b84      	ldr	r3, [pc, #528]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d05b      	beq.n	8003358 <HAL_RCC_OscConfig+0x124>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d157      	bne.n	8003358 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e25a      	b.n	8003762 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b4:	d106      	bne.n	80032c4 <HAL_RCC_OscConfig+0x90>
 80032b6:	4b7c      	ldr	r3, [pc, #496]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a7b      	ldr	r2, [pc, #492]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 80032bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	e01d      	b.n	8003300 <HAL_RCC_OscConfig+0xcc>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032cc:	d10c      	bne.n	80032e8 <HAL_RCC_OscConfig+0xb4>
 80032ce:	4b76      	ldr	r3, [pc, #472]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a75      	ldr	r2, [pc, #468]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 80032d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	4b73      	ldr	r3, [pc, #460]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a72      	ldr	r2, [pc, #456]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 80032e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	e00b      	b.n	8003300 <HAL_RCC_OscConfig+0xcc>
 80032e8:	4b6f      	ldr	r3, [pc, #444]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a6e      	ldr	r2, [pc, #440]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 80032ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f2:	6013      	str	r3, [r2, #0]
 80032f4:	4b6c      	ldr	r3, [pc, #432]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a6b      	ldr	r2, [pc, #428]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 80032fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d013      	beq.n	8003330 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003308:	f7fd fb80 	bl	8000a0c <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003310:	f7fd fb7c 	bl	8000a0c <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b64      	cmp	r3, #100	; 0x64
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e21f      	b.n	8003762 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003322:	4b61      	ldr	r3, [pc, #388]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0f0      	beq.n	8003310 <HAL_RCC_OscConfig+0xdc>
 800332e:	e014      	b.n	800335a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003330:	f7fd fb6c 	bl	8000a0c <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003338:	f7fd fb68 	bl	8000a0c <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b64      	cmp	r3, #100	; 0x64
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e20b      	b.n	8003762 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800334a:	4b57      	ldr	r3, [pc, #348]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f0      	bne.n	8003338 <HAL_RCC_OscConfig+0x104>
 8003356:	e000      	b.n	800335a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d06f      	beq.n	8003446 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003366:	4b50      	ldr	r3, [pc, #320]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b00      	cmp	r3, #0
 8003370:	d017      	beq.n	80033a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003372:	4b4d      	ldr	r3, [pc, #308]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800337a:	2b08      	cmp	r3, #8
 800337c:	d105      	bne.n	800338a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800337e:	4b4a      	ldr	r3, [pc, #296]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00b      	beq.n	80033a2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800338a:	4b47      	ldr	r3, [pc, #284]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003392:	2b0c      	cmp	r3, #12
 8003394:	d11c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003396:	4b44      	ldr	r3, [pc, #272]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d116      	bne.n	80033d0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033a2:	4b41      	ldr	r3, [pc, #260]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d005      	beq.n	80033ba <HAL_RCC_OscConfig+0x186>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d001      	beq.n	80033ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e1d3      	b.n	8003762 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ba:	4b3b      	ldr	r3, [pc, #236]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4937      	ldr	r1, [pc, #220]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ce:	e03a      	b.n	8003446 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d020      	beq.n	800341a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033d8:	4b34      	ldr	r3, [pc, #208]	; (80034ac <HAL_RCC_OscConfig+0x278>)
 80033da:	2201      	movs	r2, #1
 80033dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033de:	f7fd fb15 	bl	8000a0c <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033e6:	f7fd fb11 	bl	8000a0c <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e1b4      	b.n	8003762 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f8:	4b2b      	ldr	r3, [pc, #172]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0f0      	beq.n	80033e6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003404:	4b28      	ldr	r3, [pc, #160]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	4925      	ldr	r1, [pc, #148]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 8003414:	4313      	orrs	r3, r2
 8003416:	600b      	str	r3, [r1, #0]
 8003418:	e015      	b.n	8003446 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800341a:	4b24      	ldr	r3, [pc, #144]	; (80034ac <HAL_RCC_OscConfig+0x278>)
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7fd faf4 	bl	8000a0c <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003428:	f7fd faf0 	bl	8000a0c <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e193      	b.n	8003762 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800343a:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b00      	cmp	r3, #0
 8003450:	d036      	beq.n	80034c0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d016      	beq.n	8003488 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800345a:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <HAL_RCC_OscConfig+0x27c>)
 800345c:	2201      	movs	r2, #1
 800345e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003460:	f7fd fad4 	bl	8000a0c <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003468:	f7fd fad0 	bl	8000a0c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e173      	b.n	8003762 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800347a:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 800347c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0x234>
 8003486:	e01b      	b.n	80034c0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003488:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <HAL_RCC_OscConfig+0x27c>)
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348e:	f7fd fabd 	bl	8000a0c <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003494:	e00e      	b.n	80034b4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003496:	f7fd fab9 	bl	8000a0c <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d907      	bls.n	80034b4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e15c      	b.n	8003762 <HAL_RCC_OscConfig+0x52e>
 80034a8:	40023800 	.word	0x40023800
 80034ac:	42470000 	.word	0x42470000
 80034b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b4:	4b8a      	ldr	r3, [pc, #552]	; (80036e0 <HAL_RCC_OscConfig+0x4ac>)
 80034b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1ea      	bne.n	8003496 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 8097 	beq.w	80035fc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ce:	2300      	movs	r3, #0
 80034d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034d2:	4b83      	ldr	r3, [pc, #524]	; (80036e0 <HAL_RCC_OscConfig+0x4ac>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10f      	bne.n	80034fe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	4b7f      	ldr	r3, [pc, #508]	; (80036e0 <HAL_RCC_OscConfig+0x4ac>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	4a7e      	ldr	r2, [pc, #504]	; (80036e0 <HAL_RCC_OscConfig+0x4ac>)
 80034e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ec:	6413      	str	r3, [r2, #64]	; 0x40
 80034ee:	4b7c      	ldr	r3, [pc, #496]	; (80036e0 <HAL_RCC_OscConfig+0x4ac>)
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034fa:	2301      	movs	r3, #1
 80034fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fe:	4b79      	ldr	r3, [pc, #484]	; (80036e4 <HAL_RCC_OscConfig+0x4b0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003506:	2b00      	cmp	r3, #0
 8003508:	d118      	bne.n	800353c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800350a:	4b76      	ldr	r3, [pc, #472]	; (80036e4 <HAL_RCC_OscConfig+0x4b0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a75      	ldr	r2, [pc, #468]	; (80036e4 <HAL_RCC_OscConfig+0x4b0>)
 8003510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003516:	f7fd fa79 	bl	8000a0c <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800351e:	f7fd fa75 	bl	8000a0c <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e118      	b.n	8003762 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003530:	4b6c      	ldr	r3, [pc, #432]	; (80036e4 <HAL_RCC_OscConfig+0x4b0>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0f0      	beq.n	800351e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d106      	bne.n	8003552 <HAL_RCC_OscConfig+0x31e>
 8003544:	4b66      	ldr	r3, [pc, #408]	; (80036e0 <HAL_RCC_OscConfig+0x4ac>)
 8003546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003548:	4a65      	ldr	r2, [pc, #404]	; (80036e0 <HAL_RCC_OscConfig+0x4ac>)
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	6713      	str	r3, [r2, #112]	; 0x70
 8003550:	e01c      	b.n	800358c <HAL_RCC_OscConfig+0x358>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	2b05      	cmp	r3, #5
 8003558:	d10c      	bne.n	8003574 <HAL_RCC_OscConfig+0x340>
 800355a:	4b61      	ldr	r3, [pc, #388]	; (80036e0 <HAL_RCC_OscConfig+0x4ac>)
 800355c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355e:	4a60      	ldr	r2, [pc, #384]	; (80036e0 <HAL_RCC_OscConfig+0x4ac>)
 8003560:	f043 0304 	orr.w	r3, r3, #4
 8003564:	6713      	str	r3, [r2, #112]	; 0x70
 8003566:	4b5e      	ldr	r3, [pc, #376]	; (80036e0 <HAL_RCC_OscConfig+0x4ac>)
 8003568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356a:	4a5d      	ldr	r2, [pc, #372]	; (80036e0 <HAL_RCC_OscConfig+0x4ac>)
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	6713      	str	r3, [r2, #112]	; 0x70
 8003572:	e00b      	b.n	800358c <HAL_RCC_OscConfig+0x358>
 8003574:	4b5a      	ldr	r3, [pc, #360]	; (80036e0 <HAL_RCC_OscConfig+0x4ac>)
 8003576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003578:	4a59      	ldr	r2, [pc, #356]	; (80036e0 <HAL_RCC_OscConfig+0x4ac>)
 800357a:	f023 0301 	bic.w	r3, r3, #1
 800357e:	6713      	str	r3, [r2, #112]	; 0x70
 8003580:	4b57      	ldr	r3, [pc, #348]	; (80036e0 <HAL_RCC_OscConfig+0x4ac>)
 8003582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003584:	4a56      	ldr	r2, [pc, #344]	; (80036e0 <HAL_RCC_OscConfig+0x4ac>)
 8003586:	f023 0304 	bic.w	r3, r3, #4
 800358a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d015      	beq.n	80035c0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003594:	f7fd fa3a 	bl	8000a0c <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359a:	e00a      	b.n	80035b2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800359c:	f7fd fa36 	bl	8000a0c <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e0d7      	b.n	8003762 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b2:	4b4b      	ldr	r3, [pc, #300]	; (80036e0 <HAL_RCC_OscConfig+0x4ac>)
 80035b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0ee      	beq.n	800359c <HAL_RCC_OscConfig+0x368>
 80035be:	e014      	b.n	80035ea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c0:	f7fd fa24 	bl	8000a0c <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c6:	e00a      	b.n	80035de <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c8:	f7fd fa20 	bl	8000a0c <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e0c1      	b.n	8003762 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035de:	4b40      	ldr	r3, [pc, #256]	; (80036e0 <HAL_RCC_OscConfig+0x4ac>)
 80035e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1ee      	bne.n	80035c8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ea:	7dfb      	ldrb	r3, [r7, #23]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d105      	bne.n	80035fc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f0:	4b3b      	ldr	r3, [pc, #236]	; (80036e0 <HAL_RCC_OscConfig+0x4ac>)
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	4a3a      	ldr	r2, [pc, #232]	; (80036e0 <HAL_RCC_OscConfig+0x4ac>)
 80035f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 80ad 	beq.w	8003760 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003606:	4b36      	ldr	r3, [pc, #216]	; (80036e0 <HAL_RCC_OscConfig+0x4ac>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	2b08      	cmp	r3, #8
 8003610:	d060      	beq.n	80036d4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d145      	bne.n	80036a6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361a:	4b33      	ldr	r3, [pc, #204]	; (80036e8 <HAL_RCC_OscConfig+0x4b4>)
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fd f9f4 	bl	8000a0c <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003628:	f7fd f9f0 	bl	8000a0c <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e093      	b.n	8003762 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800363a:	4b29      	ldr	r3, [pc, #164]	; (80036e0 <HAL_RCC_OscConfig+0x4ac>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f0      	bne.n	8003628 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69da      	ldr	r2, [r3, #28]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	019b      	lsls	r3, r3, #6
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	085b      	lsrs	r3, r3, #1
 800365e:	3b01      	subs	r3, #1
 8003660:	041b      	lsls	r3, r3, #16
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	061b      	lsls	r3, r3, #24
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	071b      	lsls	r3, r3, #28
 8003672:	491b      	ldr	r1, [pc, #108]	; (80036e0 <HAL_RCC_OscConfig+0x4ac>)
 8003674:	4313      	orrs	r3, r2
 8003676:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003678:	4b1b      	ldr	r3, [pc, #108]	; (80036e8 <HAL_RCC_OscConfig+0x4b4>)
 800367a:	2201      	movs	r2, #1
 800367c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367e:	f7fd f9c5 	bl	8000a0c <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003686:	f7fd f9c1 	bl	8000a0c <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e064      	b.n	8003762 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003698:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <HAL_RCC_OscConfig+0x4ac>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x452>
 80036a4:	e05c      	b.n	8003760 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a6:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <HAL_RCC_OscConfig+0x4b4>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7fd f9ae 	bl	8000a0c <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b4:	f7fd f9aa 	bl	8000a0c <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e04d      	b.n	8003762 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c6:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <HAL_RCC_OscConfig+0x4ac>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x480>
 80036d2:	e045      	b.n	8003760 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d107      	bne.n	80036ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e040      	b.n	8003762 <HAL_RCC_OscConfig+0x52e>
 80036e0:	40023800 	.word	0x40023800
 80036e4:	40007000 	.word	0x40007000
 80036e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036ec:	4b1f      	ldr	r3, [pc, #124]	; (800376c <HAL_RCC_OscConfig+0x538>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d030      	beq.n	800375c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003704:	429a      	cmp	r2, r3
 8003706:	d129      	bne.n	800375c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003712:	429a      	cmp	r2, r3
 8003714:	d122      	bne.n	800375c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800371c:	4013      	ands	r3, r2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003722:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003724:	4293      	cmp	r3, r2
 8003726:	d119      	bne.n	800375c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003732:	085b      	lsrs	r3, r3, #1
 8003734:	3b01      	subs	r3, #1
 8003736:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003738:	429a      	cmp	r2, r3
 800373a:	d10f      	bne.n	800375c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003748:	429a      	cmp	r2, r3
 800374a:	d107      	bne.n	800375c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e000      	b.n	8003762 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40023800 	.word	0x40023800

08003770 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e03f      	b.n	8003802 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fd f810 	bl	80007bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2224      	movs	r2, #36	; 0x24
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f829 	bl	800380c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695a      	ldr	r2, [r3, #20]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800380c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003810:	b0c0      	sub	sp, #256	; 0x100
 8003812:	af00      	add	r7, sp, #0
 8003814:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003828:	68d9      	ldr	r1, [r3, #12]
 800382a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	ea40 0301 	orr.w	r3, r0, r1
 8003834:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	431a      	orrs	r2, r3
 8003844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	431a      	orrs	r2, r3
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003864:	f021 010c 	bic.w	r1, r1, #12
 8003868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003872:	430b      	orrs	r3, r1
 8003874:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003886:	6999      	ldr	r1, [r3, #24]
 8003888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	ea40 0301 	orr.w	r3, r0, r1
 8003892:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	4b8f      	ldr	r3, [pc, #572]	; (8003ad8 <UART_SetConfig+0x2cc>)
 800389c:	429a      	cmp	r2, r3
 800389e:	d005      	beq.n	80038ac <UART_SetConfig+0xa0>
 80038a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	4b8d      	ldr	r3, [pc, #564]	; (8003adc <UART_SetConfig+0x2d0>)
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d104      	bne.n	80038b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038ac:	f7fe ff54 	bl	8002758 <HAL_RCC_GetPCLK2Freq>
 80038b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80038b4:	e003      	b.n	80038be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038b6:	f7fe ff3b 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 80038ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038c8:	f040 810c 	bne.w	8003ae4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038d0:	2200      	movs	r2, #0
 80038d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80038da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80038de:	4622      	mov	r2, r4
 80038e0:	462b      	mov	r3, r5
 80038e2:	1891      	adds	r1, r2, r2
 80038e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80038e6:	415b      	adcs	r3, r3
 80038e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80038ee:	4621      	mov	r1, r4
 80038f0:	eb12 0801 	adds.w	r8, r2, r1
 80038f4:	4629      	mov	r1, r5
 80038f6:	eb43 0901 	adc.w	r9, r3, r1
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003906:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800390a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800390e:	4690      	mov	r8, r2
 8003910:	4699      	mov	r9, r3
 8003912:	4623      	mov	r3, r4
 8003914:	eb18 0303 	adds.w	r3, r8, r3
 8003918:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800391c:	462b      	mov	r3, r5
 800391e:	eb49 0303 	adc.w	r3, r9, r3
 8003922:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003932:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003936:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800393a:	460b      	mov	r3, r1
 800393c:	18db      	adds	r3, r3, r3
 800393e:	653b      	str	r3, [r7, #80]	; 0x50
 8003940:	4613      	mov	r3, r2
 8003942:	eb42 0303 	adc.w	r3, r2, r3
 8003946:	657b      	str	r3, [r7, #84]	; 0x54
 8003948:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800394c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003950:	f7fc fc58 	bl	8000204 <__aeabi_uldivmod>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4b61      	ldr	r3, [pc, #388]	; (8003ae0 <UART_SetConfig+0x2d4>)
 800395a:	fba3 2302 	umull	r2, r3, r3, r2
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	011c      	lsls	r4, r3, #4
 8003962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003966:	2200      	movs	r2, #0
 8003968:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800396c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003970:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003974:	4642      	mov	r2, r8
 8003976:	464b      	mov	r3, r9
 8003978:	1891      	adds	r1, r2, r2
 800397a:	64b9      	str	r1, [r7, #72]	; 0x48
 800397c:	415b      	adcs	r3, r3
 800397e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003980:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003984:	4641      	mov	r1, r8
 8003986:	eb12 0a01 	adds.w	sl, r2, r1
 800398a:	4649      	mov	r1, r9
 800398c:	eb43 0b01 	adc.w	fp, r3, r1
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800399c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039a4:	4692      	mov	sl, r2
 80039a6:	469b      	mov	fp, r3
 80039a8:	4643      	mov	r3, r8
 80039aa:	eb1a 0303 	adds.w	r3, sl, r3
 80039ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039b2:	464b      	mov	r3, r9
 80039b4:	eb4b 0303 	adc.w	r3, fp, r3
 80039b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80039bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80039cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80039d0:	460b      	mov	r3, r1
 80039d2:	18db      	adds	r3, r3, r3
 80039d4:	643b      	str	r3, [r7, #64]	; 0x40
 80039d6:	4613      	mov	r3, r2
 80039d8:	eb42 0303 	adc.w	r3, r2, r3
 80039dc:	647b      	str	r3, [r7, #68]	; 0x44
 80039de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80039e6:	f7fc fc0d 	bl	8000204 <__aeabi_uldivmod>
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	4611      	mov	r1, r2
 80039f0:	4b3b      	ldr	r3, [pc, #236]	; (8003ae0 <UART_SetConfig+0x2d4>)
 80039f2:	fba3 2301 	umull	r2, r3, r3, r1
 80039f6:	095b      	lsrs	r3, r3, #5
 80039f8:	2264      	movs	r2, #100	; 0x64
 80039fa:	fb02 f303 	mul.w	r3, r2, r3
 80039fe:	1acb      	subs	r3, r1, r3
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a06:	4b36      	ldr	r3, [pc, #216]	; (8003ae0 <UART_SetConfig+0x2d4>)
 8003a08:	fba3 2302 	umull	r2, r3, r3, r2
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a14:	441c      	add	r4, r3
 8003a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a28:	4642      	mov	r2, r8
 8003a2a:	464b      	mov	r3, r9
 8003a2c:	1891      	adds	r1, r2, r2
 8003a2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a30:	415b      	adcs	r3, r3
 8003a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a38:	4641      	mov	r1, r8
 8003a3a:	1851      	adds	r1, r2, r1
 8003a3c:	6339      	str	r1, [r7, #48]	; 0x30
 8003a3e:	4649      	mov	r1, r9
 8003a40:	414b      	adcs	r3, r1
 8003a42:	637b      	str	r3, [r7, #52]	; 0x34
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a50:	4659      	mov	r1, fp
 8003a52:	00cb      	lsls	r3, r1, #3
 8003a54:	4651      	mov	r1, sl
 8003a56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a5a:	4651      	mov	r1, sl
 8003a5c:	00ca      	lsls	r2, r1, #3
 8003a5e:	4610      	mov	r0, r2
 8003a60:	4619      	mov	r1, r3
 8003a62:	4603      	mov	r3, r0
 8003a64:	4642      	mov	r2, r8
 8003a66:	189b      	adds	r3, r3, r2
 8003a68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a6c:	464b      	mov	r3, r9
 8003a6e:	460a      	mov	r2, r1
 8003a70:	eb42 0303 	adc.w	r3, r2, r3
 8003a74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	18db      	adds	r3, r3, r3
 8003a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a92:	4613      	mov	r3, r2
 8003a94:	eb42 0303 	adc.w	r3, r2, r3
 8003a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003aa2:	f7fc fbaf 	bl	8000204 <__aeabi_uldivmod>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4b0d      	ldr	r3, [pc, #52]	; (8003ae0 <UART_SetConfig+0x2d4>)
 8003aac:	fba3 1302 	umull	r1, r3, r3, r2
 8003ab0:	095b      	lsrs	r3, r3, #5
 8003ab2:	2164      	movs	r1, #100	; 0x64
 8003ab4:	fb01 f303 	mul.w	r3, r1, r3
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	3332      	adds	r3, #50	; 0x32
 8003abe:	4a08      	ldr	r2, [pc, #32]	; (8003ae0 <UART_SetConfig+0x2d4>)
 8003ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac4:	095b      	lsrs	r3, r3, #5
 8003ac6:	f003 0207 	and.w	r2, r3, #7
 8003aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4422      	add	r2, r4
 8003ad2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ad4:	e105      	b.n	8003ce2 <UART_SetConfig+0x4d6>
 8003ad6:	bf00      	nop
 8003ad8:	40011000 	.word	0x40011000
 8003adc:	40011400 	.word	0x40011400
 8003ae0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ae4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003aee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003af2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003af6:	4642      	mov	r2, r8
 8003af8:	464b      	mov	r3, r9
 8003afa:	1891      	adds	r1, r2, r2
 8003afc:	6239      	str	r1, [r7, #32]
 8003afe:	415b      	adcs	r3, r3
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
 8003b02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b06:	4641      	mov	r1, r8
 8003b08:	1854      	adds	r4, r2, r1
 8003b0a:	4649      	mov	r1, r9
 8003b0c:	eb43 0501 	adc.w	r5, r3, r1
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	00eb      	lsls	r3, r5, #3
 8003b1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b1e:	00e2      	lsls	r2, r4, #3
 8003b20:	4614      	mov	r4, r2
 8003b22:	461d      	mov	r5, r3
 8003b24:	4643      	mov	r3, r8
 8003b26:	18e3      	adds	r3, r4, r3
 8003b28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b2c:	464b      	mov	r3, r9
 8003b2e:	eb45 0303 	adc.w	r3, r5, r3
 8003b32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b52:	4629      	mov	r1, r5
 8003b54:	008b      	lsls	r3, r1, #2
 8003b56:	4621      	mov	r1, r4
 8003b58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b5c:	4621      	mov	r1, r4
 8003b5e:	008a      	lsls	r2, r1, #2
 8003b60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b64:	f7fc fb4e 	bl	8000204 <__aeabi_uldivmod>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4b60      	ldr	r3, [pc, #384]	; (8003cf0 <UART_SetConfig+0x4e4>)
 8003b6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b72:	095b      	lsrs	r3, r3, #5
 8003b74:	011c      	lsls	r4, r3, #4
 8003b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b88:	4642      	mov	r2, r8
 8003b8a:	464b      	mov	r3, r9
 8003b8c:	1891      	adds	r1, r2, r2
 8003b8e:	61b9      	str	r1, [r7, #24]
 8003b90:	415b      	adcs	r3, r3
 8003b92:	61fb      	str	r3, [r7, #28]
 8003b94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b98:	4641      	mov	r1, r8
 8003b9a:	1851      	adds	r1, r2, r1
 8003b9c:	6139      	str	r1, [r7, #16]
 8003b9e:	4649      	mov	r1, r9
 8003ba0:	414b      	adcs	r3, r1
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bb0:	4659      	mov	r1, fp
 8003bb2:	00cb      	lsls	r3, r1, #3
 8003bb4:	4651      	mov	r1, sl
 8003bb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bba:	4651      	mov	r1, sl
 8003bbc:	00ca      	lsls	r2, r1, #3
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	4642      	mov	r2, r8
 8003bc6:	189b      	adds	r3, r3, r2
 8003bc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003bcc:	464b      	mov	r3, r9
 8003bce:	460a      	mov	r2, r1
 8003bd0:	eb42 0303 	adc.w	r3, r2, r3
 8003bd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003be2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003be4:	f04f 0200 	mov.w	r2, #0
 8003be8:	f04f 0300 	mov.w	r3, #0
 8003bec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003bf0:	4649      	mov	r1, r9
 8003bf2:	008b      	lsls	r3, r1, #2
 8003bf4:	4641      	mov	r1, r8
 8003bf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bfa:	4641      	mov	r1, r8
 8003bfc:	008a      	lsls	r2, r1, #2
 8003bfe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c02:	f7fc faff 	bl	8000204 <__aeabi_uldivmod>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4b39      	ldr	r3, [pc, #228]	; (8003cf0 <UART_SetConfig+0x4e4>)
 8003c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c10:	095b      	lsrs	r3, r3, #5
 8003c12:	2164      	movs	r1, #100	; 0x64
 8003c14:	fb01 f303 	mul.w	r3, r1, r3
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	3332      	adds	r3, #50	; 0x32
 8003c1e:	4a34      	ldr	r2, [pc, #208]	; (8003cf0 <UART_SetConfig+0x4e4>)
 8003c20:	fba2 2303 	umull	r2, r3, r2, r3
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c2a:	441c      	add	r4, r3
 8003c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c30:	2200      	movs	r2, #0
 8003c32:	673b      	str	r3, [r7, #112]	; 0x70
 8003c34:	677a      	str	r2, [r7, #116]	; 0x74
 8003c36:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c3a:	4642      	mov	r2, r8
 8003c3c:	464b      	mov	r3, r9
 8003c3e:	1891      	adds	r1, r2, r2
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	415b      	adcs	r3, r3
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c4a:	4641      	mov	r1, r8
 8003c4c:	1851      	adds	r1, r2, r1
 8003c4e:	6039      	str	r1, [r7, #0]
 8003c50:	4649      	mov	r1, r9
 8003c52:	414b      	adcs	r3, r1
 8003c54:	607b      	str	r3, [r7, #4]
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c62:	4659      	mov	r1, fp
 8003c64:	00cb      	lsls	r3, r1, #3
 8003c66:	4651      	mov	r1, sl
 8003c68:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c6c:	4651      	mov	r1, sl
 8003c6e:	00ca      	lsls	r2, r1, #3
 8003c70:	4610      	mov	r0, r2
 8003c72:	4619      	mov	r1, r3
 8003c74:	4603      	mov	r3, r0
 8003c76:	4642      	mov	r2, r8
 8003c78:	189b      	adds	r3, r3, r2
 8003c7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c7c:	464b      	mov	r3, r9
 8003c7e:	460a      	mov	r2, r1
 8003c80:	eb42 0303 	adc.w	r3, r2, r3
 8003c84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	663b      	str	r3, [r7, #96]	; 0x60
 8003c90:	667a      	str	r2, [r7, #100]	; 0x64
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c9e:	4649      	mov	r1, r9
 8003ca0:	008b      	lsls	r3, r1, #2
 8003ca2:	4641      	mov	r1, r8
 8003ca4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ca8:	4641      	mov	r1, r8
 8003caa:	008a      	lsls	r2, r1, #2
 8003cac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003cb0:	f7fc faa8 	bl	8000204 <__aeabi_uldivmod>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <UART_SetConfig+0x4e4>)
 8003cba:	fba3 1302 	umull	r1, r3, r3, r2
 8003cbe:	095b      	lsrs	r3, r3, #5
 8003cc0:	2164      	movs	r1, #100	; 0x64
 8003cc2:	fb01 f303 	mul.w	r3, r1, r3
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	3332      	adds	r3, #50	; 0x32
 8003ccc:	4a08      	ldr	r2, [pc, #32]	; (8003cf0 <UART_SetConfig+0x4e4>)
 8003cce:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	f003 020f 	and.w	r2, r3, #15
 8003cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4422      	add	r2, r4
 8003ce0:	609a      	str	r2, [r3, #8]
}
 8003ce2:	bf00      	nop
 8003ce4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cee:	bf00      	nop
 8003cf0:	51eb851f 	.word	0x51eb851f

08003cf4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b084      	sub	sp, #16
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	f107 001c 	add.w	r0, r7, #28
 8003d02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d122      	bne.n	8003d52 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d105      	bne.n	8003d46 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f001 fbe8 	bl	800551c <USB_CoreReset>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	73fb      	strb	r3, [r7, #15]
 8003d50:	e01a      	b.n	8003d88 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f001 fbdc 	bl	800551c <USB_CoreReset>
 8003d64:	4603      	mov	r3, r0
 8003d66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d106      	bne.n	8003d7c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	639a      	str	r2, [r3, #56]	; 0x38
 8003d7a:	e005      	b.n	8003d88 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d10b      	bne.n	8003da6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f043 0206 	orr.w	r2, r3, #6
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f043 0220 	orr.w	r2, r3, #32
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003db2:	b004      	add	sp, #16
 8003db4:	4770      	bx	lr
	...

08003db8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d165      	bne.n	8003e98 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4a41      	ldr	r2, [pc, #260]	; (8003ed4 <USB_SetTurnaroundTime+0x11c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d906      	bls.n	8003de2 <USB_SetTurnaroundTime+0x2a>
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4a40      	ldr	r2, [pc, #256]	; (8003ed8 <USB_SetTurnaroundTime+0x120>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d202      	bcs.n	8003de2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003ddc:	230f      	movs	r3, #15
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	e062      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	4a3c      	ldr	r2, [pc, #240]	; (8003ed8 <USB_SetTurnaroundTime+0x120>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d306      	bcc.n	8003df8 <USB_SetTurnaroundTime+0x40>
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	4a3b      	ldr	r2, [pc, #236]	; (8003edc <USB_SetTurnaroundTime+0x124>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d202      	bcs.n	8003df8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003df2:	230e      	movs	r3, #14
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	e057      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4a38      	ldr	r2, [pc, #224]	; (8003edc <USB_SetTurnaroundTime+0x124>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d306      	bcc.n	8003e0e <USB_SetTurnaroundTime+0x56>
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4a37      	ldr	r2, [pc, #220]	; (8003ee0 <USB_SetTurnaroundTime+0x128>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d202      	bcs.n	8003e0e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003e08:	230d      	movs	r3, #13
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	e04c      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	4a33      	ldr	r2, [pc, #204]	; (8003ee0 <USB_SetTurnaroundTime+0x128>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d306      	bcc.n	8003e24 <USB_SetTurnaroundTime+0x6c>
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	4a32      	ldr	r2, [pc, #200]	; (8003ee4 <USB_SetTurnaroundTime+0x12c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d802      	bhi.n	8003e24 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003e1e:	230c      	movs	r3, #12
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	e041      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4a2f      	ldr	r2, [pc, #188]	; (8003ee4 <USB_SetTurnaroundTime+0x12c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d906      	bls.n	8003e3a <USB_SetTurnaroundTime+0x82>
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4a2e      	ldr	r2, [pc, #184]	; (8003ee8 <USB_SetTurnaroundTime+0x130>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d802      	bhi.n	8003e3a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003e34:	230b      	movs	r3, #11
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	e036      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	4a2a      	ldr	r2, [pc, #168]	; (8003ee8 <USB_SetTurnaroundTime+0x130>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d906      	bls.n	8003e50 <USB_SetTurnaroundTime+0x98>
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4a29      	ldr	r2, [pc, #164]	; (8003eec <USB_SetTurnaroundTime+0x134>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d802      	bhi.n	8003e50 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003e4a:	230a      	movs	r3, #10
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	e02b      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4a26      	ldr	r2, [pc, #152]	; (8003eec <USB_SetTurnaroundTime+0x134>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d906      	bls.n	8003e66 <USB_SetTurnaroundTime+0xae>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	4a25      	ldr	r2, [pc, #148]	; (8003ef0 <USB_SetTurnaroundTime+0x138>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d202      	bcs.n	8003e66 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003e60:	2309      	movs	r3, #9
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	e020      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	4a21      	ldr	r2, [pc, #132]	; (8003ef0 <USB_SetTurnaroundTime+0x138>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d306      	bcc.n	8003e7c <USB_SetTurnaroundTime+0xc4>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	4a20      	ldr	r2, [pc, #128]	; (8003ef4 <USB_SetTurnaroundTime+0x13c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d802      	bhi.n	8003e7c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003e76:	2308      	movs	r3, #8
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	e015      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4a1d      	ldr	r2, [pc, #116]	; (8003ef4 <USB_SetTurnaroundTime+0x13c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d906      	bls.n	8003e92 <USB_SetTurnaroundTime+0xda>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4a1c      	ldr	r2, [pc, #112]	; (8003ef8 <USB_SetTurnaroundTime+0x140>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d202      	bcs.n	8003e92 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003e8c:	2307      	movs	r3, #7
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	e00a      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003e92:	2306      	movs	r3, #6
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	e007      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d102      	bne.n	8003ea4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003e9e:	2309      	movs	r3, #9
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	e001      	b.n	8003ea8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003ea4:	2309      	movs	r3, #9
 8003ea6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	029b      	lsls	r3, r3, #10
 8003ebc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	371c      	adds	r7, #28
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	00d8acbf 	.word	0x00d8acbf
 8003ed8:	00e4e1c0 	.word	0x00e4e1c0
 8003edc:	00f42400 	.word	0x00f42400
 8003ee0:	01067380 	.word	0x01067380
 8003ee4:	011a499f 	.word	0x011a499f
 8003ee8:	01312cff 	.word	0x01312cff
 8003eec:	014ca43f 	.word	0x014ca43f
 8003ef0:	016e3600 	.word	0x016e3600
 8003ef4:	01a6ab1f 	.word	0x01a6ab1f
 8003ef8:	01e84800 	.word	0x01e84800

08003efc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f043 0201 	orr.w	r2, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f023 0201 	bic.w	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f5c:	78fb      	ldrb	r3, [r7, #3]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d115      	bne.n	8003f8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f6e:	2001      	movs	r0, #1
 8003f70:	f7fc fd58 	bl	8000a24 <HAL_Delay>
      ms++;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	3301      	adds	r3, #1
 8003f78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f001 fa3f 	bl	80053fe <USB_GetMode>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d01e      	beq.n	8003fc4 <USB_SetCurrentMode+0x84>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b31      	cmp	r3, #49	; 0x31
 8003f8a:	d9f0      	bls.n	8003f6e <USB_SetCurrentMode+0x2e>
 8003f8c:	e01a      	b.n	8003fc4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f8e:	78fb      	ldrb	r3, [r7, #3]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d115      	bne.n	8003fc0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003fa0:	2001      	movs	r0, #1
 8003fa2:	f7fc fd3f 	bl	8000a24 <HAL_Delay>
      ms++;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f001 fa26 	bl	80053fe <USB_GetMode>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <USB_SetCurrentMode+0x84>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2b31      	cmp	r3, #49	; 0x31
 8003fbc:	d9f0      	bls.n	8003fa0 <USB_SetCurrentMode+0x60>
 8003fbe:	e001      	b.n	8003fc4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e005      	b.n	8003fd0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b32      	cmp	r3, #50	; 0x32
 8003fc8:	d101      	bne.n	8003fce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fd8:	b084      	sub	sp, #16
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b086      	sub	sp, #24
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003fe6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	613b      	str	r3, [r7, #16]
 8003ff6:	e009      	b.n	800400c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	3340      	adds	r3, #64	; 0x40
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	2200      	movs	r2, #0
 8004004:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	3301      	adds	r3, #1
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	2b0e      	cmp	r3, #14
 8004010:	d9f2      	bls.n	8003ff8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004014:	2b00      	cmp	r3, #0
 8004016:	d11c      	bne.n	8004052 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004026:	f043 0302 	orr.w	r3, r3, #2
 800402a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004030:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	e005      	b.n	800405e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004056:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004064:	461a      	mov	r2, r3
 8004066:	2300      	movs	r3, #0
 8004068:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004070:	4619      	mov	r1, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004078:	461a      	mov	r2, r3
 800407a:	680b      	ldr	r3, [r1, #0]
 800407c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800407e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004080:	2b01      	cmp	r3, #1
 8004082:	d10c      	bne.n	800409e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004086:	2b00      	cmp	r3, #0
 8004088:	d104      	bne.n	8004094 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800408a:	2100      	movs	r1, #0
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f965 	bl	800435c <USB_SetDevSpeed>
 8004092:	e008      	b.n	80040a6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004094:	2101      	movs	r1, #1
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f960 	bl	800435c <USB_SetDevSpeed>
 800409c:	e003      	b.n	80040a6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800409e:	2103      	movs	r1, #3
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f95b 	bl	800435c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80040a6:	2110      	movs	r1, #16
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f8f3 	bl	8004294 <USB_FlushTxFifo>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f91f 	bl	80042fc <USB_FlushRxFifo>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ce:	461a      	mov	r2, r3
 80040d0:	2300      	movs	r3, #0
 80040d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040da:	461a      	mov	r2, r3
 80040dc:	2300      	movs	r3, #0
 80040de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e6:	461a      	mov	r2, r3
 80040e8:	2300      	movs	r3, #0
 80040ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040ec:	2300      	movs	r3, #0
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	e043      	b.n	800417a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004108:	d118      	bne.n	800413c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10a      	bne.n	8004126 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411c:	461a      	mov	r2, r3
 800411e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	e013      	b.n	800414e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	4413      	add	r3, r2
 800412e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004132:	461a      	mov	r2, r3
 8004134:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e008      	b.n	800414e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004148:	461a      	mov	r2, r3
 800414a:	2300      	movs	r3, #0
 800414c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	015a      	lsls	r2, r3, #5
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	4413      	add	r3, r2
 8004156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800415a:	461a      	mov	r2, r3
 800415c:	2300      	movs	r3, #0
 800415e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416c:	461a      	mov	r2, r3
 800416e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004172:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	3301      	adds	r3, #1
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	429a      	cmp	r2, r3
 8004180:	d3b7      	bcc.n	80040f2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004182:	2300      	movs	r3, #0
 8004184:	613b      	str	r3, [r7, #16]
 8004186:	e043      	b.n	8004210 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	015a      	lsls	r2, r3, #5
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4413      	add	r3, r2
 8004190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800419a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800419e:	d118      	bne.n	80041d2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10a      	bne.n	80041bc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b2:	461a      	mov	r2, r3
 80041b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	e013      	b.n	80041e4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c8:	461a      	mov	r2, r3
 80041ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	e008      	b.n	80041e4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041de:	461a      	mov	r2, r3
 80041e0:	2300      	movs	r3, #0
 80041e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f0:	461a      	mov	r2, r3
 80041f2:	2300      	movs	r3, #0
 80041f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004202:	461a      	mov	r2, r3
 8004204:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004208:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	3301      	adds	r3, #1
 800420e:	613b      	str	r3, [r7, #16]
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	429a      	cmp	r2, r3
 8004216:	d3b7      	bcc.n	8004188 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004226:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800422a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004238:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800423a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423c:	2b00      	cmp	r3, #0
 800423e:	d105      	bne.n	800424c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	f043 0210 	orr.w	r2, r3, #16
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699a      	ldr	r2, [r3, #24]
 8004250:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <USB_DevInit+0x2b8>)
 8004252:	4313      	orrs	r3, r2
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	f043 0208 	orr.w	r2, r3, #8
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800426a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800426c:	2b01      	cmp	r3, #1
 800426e:	d107      	bne.n	8004280 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004278:	f043 0304 	orr.w	r3, r3, #4
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004280:	7dfb      	ldrb	r3, [r7, #23]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800428c:	b004      	add	sp, #16
 800428e:	4770      	bx	lr
 8004290:	803c3800 	.word	0x803c3800

08004294 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3301      	adds	r3, #1
 80042a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	4a13      	ldr	r2, [pc, #76]	; (80042f8 <USB_FlushTxFifo+0x64>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d901      	bls.n	80042b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e01b      	b.n	80042ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	daf2      	bge.n	80042a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	019b      	lsls	r3, r3, #6
 80042c4:	f043 0220 	orr.w	r2, r3, #32
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	3301      	adds	r3, #1
 80042d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4a08      	ldr	r2, [pc, #32]	; (80042f8 <USB_FlushTxFifo+0x64>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d901      	bls.n	80042de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e006      	b.n	80042ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	d0f0      	beq.n	80042cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	00030d40 	.word	0x00030d40

080042fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	3301      	adds	r3, #1
 800430c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4a11      	ldr	r2, [pc, #68]	; (8004358 <USB_FlushRxFifo+0x5c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d901      	bls.n	800431a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e018      	b.n	800434c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	2b00      	cmp	r3, #0
 8004320:	daf2      	bge.n	8004308 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2210      	movs	r2, #16
 800432a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3301      	adds	r3, #1
 8004330:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4a08      	ldr	r2, [pc, #32]	; (8004358 <USB_FlushRxFifo+0x5c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d901      	bls.n	800433e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e006      	b.n	800434c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f003 0310 	and.w	r3, r3, #16
 8004346:	2b10      	cmp	r3, #16
 8004348:	d0f0      	beq.n	800432c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	00030d40 	.word	0x00030d40

0800435c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	68f9      	ldr	r1, [r7, #12]
 8004378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800437c:	4313      	orrs	r3, r2
 800437e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800438e:	b480      	push	{r7}
 8004390:	b087      	sub	sp, #28
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 0306 	and.w	r3, r3, #6
 80043a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d102      	bne.n	80043b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80043ae:	2300      	movs	r3, #0
 80043b0:	75fb      	strb	r3, [r7, #23]
 80043b2:	e00a      	b.n	80043ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d002      	beq.n	80043c0 <USB_GetDevSpeed+0x32>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2b06      	cmp	r3, #6
 80043be:	d102      	bne.n	80043c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80043c0:	2302      	movs	r3, #2
 80043c2:	75fb      	strb	r3, [r7, #23]
 80043c4:	e001      	b.n	80043ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80043c6:	230f      	movs	r3, #15
 80043c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80043ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	371c      	adds	r7, #28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	785b      	ldrb	r3, [r3, #1]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d13a      	bne.n	800446a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fa:	69da      	ldr	r2, [r3, #28]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	f003 030f 	and.w	r3, r3, #15
 8004404:	2101      	movs	r1, #1
 8004406:	fa01 f303 	lsl.w	r3, r1, r3
 800440a:	b29b      	uxth	r3, r3
 800440c:	68f9      	ldr	r1, [r7, #12]
 800440e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004412:	4313      	orrs	r3, r2
 8004414:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d155      	bne.n	80044d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	791b      	ldrb	r3, [r3, #4]
 8004446:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004448:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	059b      	lsls	r3, r3, #22
 800444e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004450:	4313      	orrs	r3, r2
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	0151      	lsls	r1, r2, #5
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	440a      	add	r2, r1
 800445a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800445e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	e036      	b.n	80044d8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004470:	69da      	ldr	r2, [r3, #28]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	2101      	movs	r1, #1
 800447c:	fa01 f303 	lsl.w	r3, r1, r3
 8004480:	041b      	lsls	r3, r3, #16
 8004482:	68f9      	ldr	r1, [r7, #12]
 8004484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004488:	4313      	orrs	r3, r2
 800448a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d11a      	bne.n	80044d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	791b      	ldrb	r3, [r3, #4]
 80044bc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80044be:	430b      	orrs	r3, r1
 80044c0:	4313      	orrs	r3, r2
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	0151      	lsls	r1, r2, #5
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	440a      	add	r2, r1
 80044ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044d6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
	...

080044e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	785b      	ldrb	r3, [r3, #1]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d161      	bne.n	80045c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004516:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800451a:	d11f      	bne.n	800455c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	0151      	lsls	r1, r2, #5
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	440a      	add	r2, r1
 8004532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004536:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800453a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4413      	add	r3, r2
 8004544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	0151      	lsls	r1, r2, #5
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	440a      	add	r2, r1
 8004552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004556:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800455a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	f003 030f 	and.w	r3, r3, #15
 800456c:	2101      	movs	r1, #1
 800456e:	fa01 f303 	lsl.w	r3, r1, r3
 8004572:	b29b      	uxth	r3, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	68f9      	ldr	r1, [r7, #12]
 8004578:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800457c:	4013      	ands	r3, r2
 800457e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004586:	69da      	ldr	r2, [r3, #28]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	2101      	movs	r1, #1
 8004592:	fa01 f303 	lsl.w	r3, r1, r3
 8004596:	b29b      	uxth	r3, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	68f9      	ldr	r1, [r7, #12]
 800459c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045a0:	4013      	ands	r3, r2
 80045a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	0159      	lsls	r1, r3, #5
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	440b      	add	r3, r1
 80045ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045be:	4619      	mov	r1, r3
 80045c0:	4b35      	ldr	r3, [pc, #212]	; (8004698 <USB_DeactivateEndpoint+0x1b0>)
 80045c2:	4013      	ands	r3, r2
 80045c4:	600b      	str	r3, [r1, #0]
 80045c6:	e060      	b.n	800468a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045de:	d11f      	bne.n	8004620 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	0151      	lsls	r1, r2, #5
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	440a      	add	r2, r1
 80045f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	0151      	lsls	r1, r2, #5
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	440a      	add	r2, r1
 8004616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800461a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800461e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	f003 030f 	and.w	r3, r3, #15
 8004630:	2101      	movs	r1, #1
 8004632:	fa01 f303 	lsl.w	r3, r1, r3
 8004636:	041b      	lsls	r3, r3, #16
 8004638:	43db      	mvns	r3, r3
 800463a:	68f9      	ldr	r1, [r7, #12]
 800463c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004640:	4013      	ands	r3, r2
 8004642:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464a:	69da      	ldr	r2, [r3, #28]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	f003 030f 	and.w	r3, r3, #15
 8004654:	2101      	movs	r1, #1
 8004656:	fa01 f303 	lsl.w	r3, r1, r3
 800465a:	041b      	lsls	r3, r3, #16
 800465c:	43db      	mvns	r3, r3
 800465e:	68f9      	ldr	r1, [r7, #12]
 8004660:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004664:	4013      	ands	r3, r2
 8004666:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	0159      	lsls	r1, r3, #5
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	440b      	add	r3, r1
 800467e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004682:	4619      	mov	r1, r3
 8004684:	4b05      	ldr	r3, [pc, #20]	; (800469c <USB_DeactivateEndpoint+0x1b4>)
 8004686:	4013      	ands	r3, r2
 8004688:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	ec337800 	.word	0xec337800
 800469c:	eff37800 	.word	0xeff37800

080046a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08a      	sub	sp, #40	; 0x28
 80046a4:	af02      	add	r7, sp, #8
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	4613      	mov	r3, r2
 80046ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	785b      	ldrb	r3, [r3, #1]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	f040 815c 	bne.w	800497a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d132      	bne.n	8004730 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	015a      	lsls	r2, r3, #5
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	4413      	add	r3, r2
 80046d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	0151      	lsls	r1, r2, #5
 80046dc:	69fa      	ldr	r2, [r7, #28]
 80046de:	440a      	add	r2, r1
 80046e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	0151      	lsls	r1, r2, #5
 8004700:	69fa      	ldr	r2, [r7, #28]
 8004702:	440a      	add	r2, r1
 8004704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004708:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800470c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	0151      	lsls	r1, r2, #5
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	440a      	add	r2, r1
 8004724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004728:	0cdb      	lsrs	r3, r3, #19
 800472a:	04db      	lsls	r3, r3, #19
 800472c:	6113      	str	r3, [r2, #16]
 800472e:	e074      	b.n	800481a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	4413      	add	r3, r2
 8004738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	0151      	lsls	r1, r2, #5
 8004742:	69fa      	ldr	r2, [r7, #28]
 8004744:	440a      	add	r2, r1
 8004746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800474a:	0cdb      	lsrs	r3, r3, #19
 800474c:	04db      	lsls	r3, r3, #19
 800474e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	0151      	lsls	r1, r2, #5
 8004762:	69fa      	ldr	r2, [r7, #28]
 8004764:	440a      	add	r2, r1
 8004766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800476a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800476e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004772:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	4413      	add	r3, r2
 800477c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004780:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	6999      	ldr	r1, [r3, #24]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	440b      	add	r3, r1
 800478c:	1e59      	subs	r1, r3, #1
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	fbb1 f3f3 	udiv	r3, r1, r3
 8004796:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004798:	4b9d      	ldr	r3, [pc, #628]	; (8004a10 <USB_EPStartXfer+0x370>)
 800479a:	400b      	ands	r3, r1
 800479c:	69b9      	ldr	r1, [r7, #24]
 800479e:	0148      	lsls	r0, r1, #5
 80047a0:	69f9      	ldr	r1, [r7, #28]
 80047a2:	4401      	add	r1, r0
 80047a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80047a8:	4313      	orrs	r3, r2
 80047aa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b8:	691a      	ldr	r2, [r3, #16]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047c2:	69b9      	ldr	r1, [r7, #24]
 80047c4:	0148      	lsls	r0, r1, #5
 80047c6:	69f9      	ldr	r1, [r7, #28]
 80047c8:	4401      	add	r1, r0
 80047ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80047ce:	4313      	orrs	r3, r2
 80047d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	791b      	ldrb	r3, [r3, #4]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d11f      	bne.n	800481a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	0151      	lsls	r1, r2, #5
 80047ec:	69fa      	ldr	r2, [r7, #28]
 80047ee:	440a      	add	r2, r1
 80047f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80047f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	4413      	add	r3, r2
 8004802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	0151      	lsls	r1, r2, #5
 800480c:	69fa      	ldr	r2, [r7, #28]
 800480e:	440a      	add	r2, r1
 8004810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004814:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004818:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800481a:	79fb      	ldrb	r3, [r7, #7]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d14b      	bne.n	80048b8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d009      	beq.n	800483c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004834:	461a      	mov	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	791b      	ldrb	r3, [r3, #4]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d128      	bne.n	8004896 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004850:	2b00      	cmp	r3, #0
 8004852:	d110      	bne.n	8004876 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	4413      	add	r3, r2
 800485c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	0151      	lsls	r1, r2, #5
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	440a      	add	r2, r1
 800486a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800486e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	e00f      	b.n	8004896 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	0151      	lsls	r1, r2, #5
 8004888:	69fa      	ldr	r2, [r7, #28]
 800488a:	440a      	add	r2, r1
 800488c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004894:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	0151      	lsls	r1, r2, #5
 80048a8:	69fa      	ldr	r2, [r7, #28]
 80048aa:	440a      	add	r2, r1
 80048ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	e133      	b.n	8004b20 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	0151      	lsls	r1, r2, #5
 80048ca:	69fa      	ldr	r2, [r7, #28]
 80048cc:	440a      	add	r2, r1
 80048ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	791b      	ldrb	r3, [r3, #4]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d015      	beq.n	800490c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 811b 	beq.w	8004b20 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	2101      	movs	r1, #1
 80048fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004900:	69f9      	ldr	r1, [r7, #28]
 8004902:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004906:	4313      	orrs	r3, r2
 8004908:	634b      	str	r3, [r1, #52]	; 0x34
 800490a:	e109      	b.n	8004b20 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004918:	2b00      	cmp	r3, #0
 800491a:	d110      	bne.n	800493e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	0151      	lsls	r1, r2, #5
 800492e:	69fa      	ldr	r2, [r7, #28]
 8004930:	440a      	add	r2, r1
 8004932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004936:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	e00f      	b.n	800495e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	4413      	add	r3, r2
 8004946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	0151      	lsls	r1, r2, #5
 8004950:	69fa      	ldr	r2, [r7, #28]
 8004952:	440a      	add	r2, r1
 8004954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800495c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	6919      	ldr	r1, [r3, #16]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	781a      	ldrb	r2, [r3, #0]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	b298      	uxth	r0, r3
 800496c:	79fb      	ldrb	r3, [r7, #7]
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	4603      	mov	r3, r0
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 fade 	bl	8004f34 <USB_WritePacket>
 8004978:	e0d2      	b.n	8004b20 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	0151      	lsls	r1, r2, #5
 800498c:	69fa      	ldr	r2, [r7, #28]
 800498e:	440a      	add	r2, r1
 8004990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004994:	0cdb      	lsrs	r3, r3, #19
 8004996:	04db      	lsls	r3, r3, #19
 8004998:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	0151      	lsls	r1, r2, #5
 80049ac:	69fa      	ldr	r2, [r7, #28]
 80049ae:	440a      	add	r2, r1
 80049b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049bc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d126      	bne.n	8004a14 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	015a      	lsls	r2, r3, #5
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	4413      	add	r3, r2
 80049ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049dc:	69b9      	ldr	r1, [r7, #24]
 80049de:	0148      	lsls	r0, r1, #5
 80049e0:	69f9      	ldr	r1, [r7, #28]
 80049e2:	4401      	add	r1, r0
 80049e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049e8:	4313      	orrs	r3, r2
 80049ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	0151      	lsls	r1, r2, #5
 80049fe:	69fa      	ldr	r2, [r7, #28]
 8004a00:	440a      	add	r2, r1
 8004a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a0a:	6113      	str	r3, [r2, #16]
 8004a0c:	e03a      	b.n	8004a84 <USB_EPStartXfer+0x3e4>
 8004a0e:	bf00      	nop
 8004a10:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	699a      	ldr	r2, [r3, #24]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	1e5a      	subs	r2, r3, #1
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a28:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	8afa      	ldrh	r2, [r7, #22]
 8004a30:	fb03 f202 	mul.w	r2, r3, r2
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a44:	691a      	ldr	r2, [r3, #16]
 8004a46:	8afb      	ldrh	r3, [r7, #22]
 8004a48:	04d9      	lsls	r1, r3, #19
 8004a4a:	4b38      	ldr	r3, [pc, #224]	; (8004b2c <USB_EPStartXfer+0x48c>)
 8004a4c:	400b      	ands	r3, r1
 8004a4e:	69b9      	ldr	r1, [r7, #24]
 8004a50:	0148      	lsls	r0, r1, #5
 8004a52:	69f9      	ldr	r1, [r7, #28]
 8004a54:	4401      	add	r1, r0
 8004a56:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a74:	69b9      	ldr	r1, [r7, #24]
 8004a76:	0148      	lsls	r0, r1, #5
 8004a78:	69f9      	ldr	r1, [r7, #28]
 8004a7a:	4401      	add	r1, r0
 8004a7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a80:	4313      	orrs	r3, r2
 8004a82:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a84:	79fb      	ldrb	r3, [r7, #7]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d10d      	bne.n	8004aa6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d009      	beq.n	8004aa6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	6919      	ldr	r1, [r3, #16]
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa2:	460a      	mov	r2, r1
 8004aa4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	791b      	ldrb	r3, [r3, #4]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d128      	bne.n	8004b00 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d110      	bne.n	8004ae0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	015a      	lsls	r2, r3, #5
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	0151      	lsls	r1, r2, #5
 8004ad0:	69fa      	ldr	r2, [r7, #28]
 8004ad2:	440a      	add	r2, r1
 8004ad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ad8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	e00f      	b.n	8004b00 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	0151      	lsls	r1, r2, #5
 8004af2:	69fa      	ldr	r2, [r7, #28]
 8004af4:	440a      	add	r2, r1
 8004af6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004afe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	0151      	lsls	r1, r2, #5
 8004b12:	69fa      	ldr	r2, [r7, #28]
 8004b14:	440a      	add	r2, r1
 8004b16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3720      	adds	r7, #32
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	1ff80000 	.word	0x1ff80000

08004b30 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	785b      	ldrb	r3, [r3, #1]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	f040 80ce 	bne.w	8004cee <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d132      	bne.n	8004bc0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	0151      	lsls	r1, r2, #5
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	440a      	add	r2, r1
 8004b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	015a      	lsls	r2, r3, #5
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	4413      	add	r3, r2
 8004b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	0151      	lsls	r1, r2, #5
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	440a      	add	r2, r1
 8004b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	0151      	lsls	r1, r2, #5
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	440a      	add	r2, r1
 8004bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bb8:	0cdb      	lsrs	r3, r3, #19
 8004bba:	04db      	lsls	r3, r3, #19
 8004bbc:	6113      	str	r3, [r2, #16]
 8004bbe:	e04e      	b.n	8004c5e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	0151      	lsls	r1, r2, #5
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	440a      	add	r2, r1
 8004bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bda:	0cdb      	lsrs	r3, r3, #19
 8004bdc:	04db      	lsls	r3, r3, #19
 8004bde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	0151      	lsls	r1, r2, #5
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	440a      	add	r2, r1
 8004bf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bfa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bfe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c02:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	699a      	ldr	r2, [r3, #24]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d903      	bls.n	8004c18 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	68da      	ldr	r2, [r3, #12]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	0151      	lsls	r1, r2, #5
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	440a      	add	r2, r1
 8004c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c44:	691a      	ldr	r2, [r3, #16]
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c4e:	6939      	ldr	r1, [r7, #16]
 8004c50:	0148      	lsls	r0, r1, #5
 8004c52:	6979      	ldr	r1, [r7, #20]
 8004c54:	4401      	add	r1, r0
 8004c56:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004c5e:	79fb      	ldrb	r3, [r7, #7]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d11e      	bne.n	8004ca2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d009      	beq.n	8004c80 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c78:	461a      	mov	r2, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	0151      	lsls	r1, r2, #5
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	440a      	add	r2, r1
 8004c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	e097      	b.n	8004dd2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	0151      	lsls	r1, r2, #5
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	440a      	add	r2, r1
 8004cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cc0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 8083 	beq.w	8004dd2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	f003 030f 	and.w	r3, r3, #15
 8004cdc:	2101      	movs	r1, #1
 8004cde:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce2:	6979      	ldr	r1, [r7, #20]
 8004ce4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	634b      	str	r3, [r1, #52]	; 0x34
 8004cec:	e071      	b.n	8004dd2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	0151      	lsls	r1, r2, #5
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	440a      	add	r2, r1
 8004d04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d08:	0cdb      	lsrs	r3, r3, #19
 8004d0a:	04db      	lsls	r3, r3, #19
 8004d0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	0151      	lsls	r1, r2, #5
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	440a      	add	r2, r1
 8004d24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d30:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	68da      	ldr	r2, [r3, #12]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	0151      	lsls	r1, r2, #5
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	440a      	add	r2, r1
 8004d60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d76:	691a      	ldr	r2, [r3, #16]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d80:	6939      	ldr	r1, [r7, #16]
 8004d82:	0148      	lsls	r0, r1, #5
 8004d84:	6979      	ldr	r1, [r7, #20]
 8004d86:	4401      	add	r1, r0
 8004d88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004d90:	79fb      	ldrb	r3, [r7, #7]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d10d      	bne.n	8004db2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d009      	beq.n	8004db2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	6919      	ldr	r1, [r3, #16]
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dae:	460a      	mov	r2, r1
 8004db0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	0151      	lsls	r1, r2, #5
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	440a      	add	r2, r1
 8004dc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dcc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dd0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	371c      	adds	r7, #28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	785b      	ldrb	r3, [r3, #1]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d14a      	bne.n	8004e94 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e16:	f040 8086 	bne.w	8004f26 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	7812      	ldrb	r2, [r2, #0]
 8004e2e:	0151      	lsls	r1, r2, #5
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	440a      	add	r2, r1
 8004e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e3c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	7812      	ldrb	r2, [r2, #0]
 8004e52:	0151      	lsls	r1, r2, #5
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	440a      	add	r2, r1
 8004e58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	3301      	adds	r3, #1
 8004e66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d902      	bls.n	8004e78 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	75fb      	strb	r3, [r7, #23]
          break;
 8004e76:	e056      	b.n	8004f26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e90:	d0e7      	beq.n	8004e62 <USB_EPStopXfer+0x82>
 8004e92:	e048      	b.n	8004f26 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ea8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eac:	d13b      	bne.n	8004f26 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	7812      	ldrb	r2, [r2, #0]
 8004ec2:	0151      	lsls	r1, r2, #5
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	440a      	add	r2, r1
 8004ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ecc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ed0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	7812      	ldrb	r2, [r2, #0]
 8004ee6:	0151      	lsls	r1, r2, #5
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	440a      	add	r2, r1
 8004eec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ef0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ef4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d902      	bls.n	8004f0c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	75fb      	strb	r3, [r7, #23]
          break;
 8004f0a:	e00c      	b.n	8004f26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	015a      	lsls	r2, r3, #5
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	4413      	add	r3, r2
 8004f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f24:	d0e7      	beq.n	8004ef6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	371c      	adds	r7, #28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b089      	sub	sp, #36	; 0x24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	4611      	mov	r1, r2
 8004f40:	461a      	mov	r2, r3
 8004f42:	460b      	mov	r3, r1
 8004f44:	71fb      	strb	r3, [r7, #7]
 8004f46:	4613      	mov	r3, r2
 8004f48:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004f52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d123      	bne.n	8004fa2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f5a:	88bb      	ldrh	r3, [r7, #4]
 8004f5c:	3303      	adds	r3, #3
 8004f5e:	089b      	lsrs	r3, r3, #2
 8004f60:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f62:	2300      	movs	r3, #0
 8004f64:	61bb      	str	r3, [r7, #24]
 8004f66:	e018      	b.n	8004f9a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f68:	79fb      	ldrb	r3, [r7, #7]
 8004f6a:	031a      	lsls	r2, r3, #12
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f74:	461a      	mov	r2, r3
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	3301      	adds	r3, #1
 8004f86:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	3301      	adds	r3, #1
 8004f92:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	3301      	adds	r3, #1
 8004f98:	61bb      	str	r3, [r7, #24]
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d3e2      	bcc.n	8004f68 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3724      	adds	r7, #36	; 0x24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b08b      	sub	sp, #44	; 0x2c
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004fc6:	88fb      	ldrh	r3, [r7, #6]
 8004fc8:	089b      	lsrs	r3, r3, #2
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004fce:	88fb      	ldrh	r3, [r7, #6]
 8004fd0:	f003 0303 	and.w	r3, r3, #3
 8004fd4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	623b      	str	r3, [r7, #32]
 8004fda:	e014      	b.n	8005006 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	601a      	str	r2, [r3, #0]
    pDest++;
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	3301      	adds	r3, #1
 8004fec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	3301      	adds	r3, #1
 8005004:	623b      	str	r3, [r7, #32]
 8005006:	6a3a      	ldr	r2, [r7, #32]
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	429a      	cmp	r2, r3
 800500c:	d3e6      	bcc.n	8004fdc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800500e:	8bfb      	ldrh	r3, [r7, #30]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d01e      	beq.n	8005052 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005014:	2300      	movs	r3, #0
 8005016:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800501e:	461a      	mov	r2, r3
 8005020:	f107 0310 	add.w	r3, r7, #16
 8005024:	6812      	ldr	r2, [r2, #0]
 8005026:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	fa22 f303 	lsr.w	r3, r2, r3
 8005034:	b2da      	uxtb	r2, r3
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	701a      	strb	r2, [r3, #0]
      i++;
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	3301      	adds	r3, #1
 800503e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	3301      	adds	r3, #1
 8005044:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005046:	8bfb      	ldrh	r3, [r7, #30]
 8005048:	3b01      	subs	r3, #1
 800504a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800504c:	8bfb      	ldrh	r3, [r7, #30]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1ea      	bne.n	8005028 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005054:	4618      	mov	r0, r3
 8005056:	372c      	adds	r7, #44	; 0x2c
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	785b      	ldrb	r3, [r3, #1]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d12c      	bne.n	80050d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	db12      	blt.n	80050b4 <USB_EPSetStall+0x54>
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00f      	beq.n	80050b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	0151      	lsls	r1, r2, #5
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	440a      	add	r2, r1
 80050aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	0151      	lsls	r1, r2, #5
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	440a      	add	r2, r1
 80050ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	e02b      	b.n	800512e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	db12      	blt.n	800510e <USB_EPSetStall+0xae>
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00f      	beq.n	800510e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	0151      	lsls	r1, r2, #5
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	440a      	add	r2, r1
 8005104:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005108:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800510c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	015a      	lsls	r2, r3, #5
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	4413      	add	r3, r2
 8005116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	0151      	lsls	r1, r2, #5
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	440a      	add	r2, r1
 8005124:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005128:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800512c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	785b      	ldrb	r3, [r3, #1]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d128      	bne.n	80051aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	0151      	lsls	r1, r2, #5
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	440a      	add	r2, r1
 800516e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005172:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005176:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	791b      	ldrb	r3, [r3, #4]
 800517c:	2b03      	cmp	r3, #3
 800517e:	d003      	beq.n	8005188 <USB_EPClearStall+0x4c>
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	791b      	ldrb	r3, [r3, #4]
 8005184:	2b02      	cmp	r3, #2
 8005186:	d138      	bne.n	80051fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	0151      	lsls	r1, r2, #5
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	440a      	add	r2, r1
 800519e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a6:	6013      	str	r3, [r2, #0]
 80051a8:	e027      	b.n	80051fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	0151      	lsls	r1, r2, #5
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	440a      	add	r2, r1
 80051c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	791b      	ldrb	r3, [r3, #4]
 80051ce:	2b03      	cmp	r3, #3
 80051d0:	d003      	beq.n	80051da <USB_EPClearStall+0x9e>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	791b      	ldrb	r3, [r3, #4]
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d10f      	bne.n	80051fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	0151      	lsls	r1, r2, #5
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	440a      	add	r2, r1
 80051f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	460b      	mov	r3, r1
 8005212:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005226:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800522a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800523c:	68f9      	ldr	r1, [r7, #12]
 800523e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005242:	4313      	orrs	r3, r2
 8005244:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800526e:	f023 0303 	bic.w	r3, r3, #3
 8005272:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005282:	f023 0302 	bic.w	r3, r3, #2
 8005286:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005296:	b480      	push	{r7}
 8005298:	b085      	sub	sp, #20
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80052b0:	f023 0303 	bic.w	r3, r3, #3
 80052b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052c4:	f043 0302 	orr.w	r3, r3, #2
 80052c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4013      	ands	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80052f0:	68fb      	ldr	r3, [r7, #12]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80052fe:	b480      	push	{r7}
 8005300:	b085      	sub	sp, #20
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	4013      	ands	r3, r2
 8005320:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	0c1b      	lsrs	r3, r3, #16
}
 8005326:	4618      	mov	r0, r3
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005332:	b480      	push	{r7}
 8005334:	b085      	sub	sp, #20
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	4013      	ands	r3, r2
 8005354:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	b29b      	uxth	r3, r3
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005366:	b480      	push	{r7}
 8005368:	b085      	sub	sp, #20
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	460b      	mov	r3, r1
 8005370:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005376:	78fb      	ldrb	r3, [r7, #3]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	4013      	ands	r3, r2
 8005392:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005394:	68bb      	ldr	r3, [r7, #8]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b087      	sub	sp, #28
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	460b      	mov	r3, r1
 80053ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80053c6:	78fb      	ldrb	r3, [r7, #3]
 80053c8:	f003 030f 	and.w	r3, r3, #15
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	fa22 f303 	lsr.w	r3, r2, r3
 80053d2:	01db      	lsls	r3, r3, #7
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	4313      	orrs	r3, r2
 80053da:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	4013      	ands	r3, r2
 80053ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80053f0:	68bb      	ldr	r3, [r7, #8]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	371c      	adds	r7, #28
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	f003 0301 	and.w	r3, r3, #1
}
 800540e:	4618      	mov	r0, r3
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800541a:	b480      	push	{r7}
 800541c:	b085      	sub	sp, #20
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005434:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005438:	f023 0307 	bic.w	r3, r3, #7
 800543c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800544c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005450:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3714      	adds	r7, #20
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	460b      	mov	r3, r1
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	333c      	adds	r3, #60	; 0x3c
 8005476:	3304      	adds	r3, #4
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	4a26      	ldr	r2, [pc, #152]	; (8005518 <USB_EP0_OutStart+0xb8>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d90a      	bls.n	800549a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005490:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005494:	d101      	bne.n	800549a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	e037      	b.n	800550a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a0:	461a      	mov	r2, r3
 80054a2:	2300      	movs	r3, #0
 80054a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c8:	f043 0318 	orr.w	r3, r3, #24
 80054cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80054e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80054e2:	7afb      	ldrb	r3, [r7, #11]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d10f      	bne.n	8005508 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ee:	461a      	mov	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005502:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005506:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	4f54300a 	.word	0x4f54300a

0800551c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	3301      	adds	r3, #1
 800552c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4a13      	ldr	r2, [pc, #76]	; (8005580 <USB_CoreReset+0x64>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d901      	bls.n	800553a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e01b      	b.n	8005572 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	2b00      	cmp	r3, #0
 8005540:	daf2      	bge.n	8005528 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f043 0201 	orr.w	r2, r3, #1
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3301      	adds	r3, #1
 8005556:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4a09      	ldr	r2, [pc, #36]	; (8005580 <USB_CoreReset+0x64>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d901      	bls.n	8005564 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e006      	b.n	8005572 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b01      	cmp	r3, #1
 800556e:	d0f0      	beq.n	8005552 <USB_CoreReset+0x36>

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	00030d40 	.word	0x00030d40

08005584 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	460b      	mov	r3, r1
 800558e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005590:	2010      	movs	r0, #16
 8005592:	f002 fb2b 	bl	8007bec <USBD_static_malloc>
 8005596:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d109      	bne.n	80055b2 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	32b0      	adds	r2, #176	; 0xb0
 80055a8:	2100      	movs	r1, #0
 80055aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80055ae:	2302      	movs	r3, #2
 80055b0:	e048      	b.n	8005644 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	32b0      	adds	r2, #176	; 0xb0
 80055bc:	68f9      	ldr	r1, [r7, #12]
 80055be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	32b0      	adds	r2, #176	; 0xb0
 80055cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	7c1b      	ldrb	r3, [r3, #16]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10d      	bne.n	80055fa <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80055de:	4b1b      	ldr	r3, [pc, #108]	; (800564c <USBD_HID_Init+0xc8>)
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	f003 020f 	and.w	r2, r3, #15
 80055e6:	6879      	ldr	r1, [r7, #4]
 80055e8:	4613      	mov	r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	440b      	add	r3, r1
 80055f2:	3326      	adds	r3, #38	; 0x26
 80055f4:	2207      	movs	r2, #7
 80055f6:	801a      	strh	r2, [r3, #0]
 80055f8:	e00c      	b.n	8005614 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80055fa:	4b14      	ldr	r3, [pc, #80]	; (800564c <USBD_HID_Init+0xc8>)
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	f003 020f 	and.w	r2, r3, #15
 8005602:	6879      	ldr	r1, [r7, #4]
 8005604:	4613      	mov	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	440b      	add	r3, r1
 800560e:	3326      	adds	r3, #38	; 0x26
 8005610:	220a      	movs	r2, #10
 8005612:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005614:	4b0d      	ldr	r3, [pc, #52]	; (800564c <USBD_HID_Init+0xc8>)
 8005616:	7819      	ldrb	r1, [r3, #0]
 8005618:	2304      	movs	r3, #4
 800561a:	2203      	movs	r2, #3
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f002 f986 	bl	800792e <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005622:	4b0a      	ldr	r3, [pc, #40]	; (800564c <USBD_HID_Init+0xc8>)
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	f003 020f 	and.w	r2, r3, #15
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	4613      	mov	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	440b      	add	r3, r1
 8005636:	3324      	adds	r3, #36	; 0x24
 8005638:	2201      	movs	r2, #1
 800563a:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	200000bf 	.word	0x200000bf

08005650 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	460b      	mov	r3, r1
 800565a:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800565c:	4b1f      	ldr	r3, [pc, #124]	; (80056dc <USBD_HID_DeInit+0x8c>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	4619      	mov	r1, r3
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f002 f989 	bl	800797a <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005668:	4b1c      	ldr	r3, [pc, #112]	; (80056dc <USBD_HID_DeInit+0x8c>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	f003 020f 	and.w	r2, r3, #15
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	4613      	mov	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	440b      	add	r3, r1
 800567c:	3324      	adds	r3, #36	; 0x24
 800567e:	2200      	movs	r2, #0
 8005680:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8005682:	4b16      	ldr	r3, [pc, #88]	; (80056dc <USBD_HID_DeInit+0x8c>)
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	f003 020f 	and.w	r2, r3, #15
 800568a:	6879      	ldr	r1, [r7, #4]
 800568c:	4613      	mov	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	440b      	add	r3, r1
 8005696:	3326      	adds	r3, #38	; 0x26
 8005698:	2200      	movs	r2, #0
 800569a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	32b0      	adds	r2, #176	; 0xb0
 80056a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d011      	beq.n	80056d2 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	32b0      	adds	r2, #176	; 0xb0
 80056b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056bc:	4618      	mov	r0, r3
 80056be:	f002 faa3 	bl	8007c08 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	32b0      	adds	r2, #176	; 0xb0
 80056cc:	2100      	movs	r1, #0
 80056ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3708      	adds	r7, #8
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	200000bf 	.word	0x200000bf

080056e0 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	32b0      	adds	r2, #176	; 0xb0
 80056f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f8:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80056fe:	2300      	movs	r3, #0
 8005700:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005708:	2303      	movs	r3, #3
 800570a:	e0e8      	b.n	80058de <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005714:	2b00      	cmp	r3, #0
 8005716:	d046      	beq.n	80057a6 <USBD_HID_Setup+0xc6>
 8005718:	2b20      	cmp	r3, #32
 800571a:	f040 80d8 	bne.w	80058ce <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	785b      	ldrb	r3, [r3, #1]
 8005722:	3b02      	subs	r3, #2
 8005724:	2b09      	cmp	r3, #9
 8005726:	d836      	bhi.n	8005796 <USBD_HID_Setup+0xb6>
 8005728:	a201      	add	r2, pc, #4	; (adr r2, 8005730 <USBD_HID_Setup+0x50>)
 800572a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572e:	bf00      	nop
 8005730:	08005787 	.word	0x08005787
 8005734:	08005767 	.word	0x08005767
 8005738:	08005797 	.word	0x08005797
 800573c:	08005797 	.word	0x08005797
 8005740:	08005797 	.word	0x08005797
 8005744:	08005797 	.word	0x08005797
 8005748:	08005797 	.word	0x08005797
 800574c:	08005797 	.word	0x08005797
 8005750:	08005775 	.word	0x08005775
 8005754:	08005759 	.word	0x08005759
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	885b      	ldrh	r3, [r3, #2]
 800575c:	b2db      	uxtb	r3, r3
 800575e:	461a      	mov	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	601a      	str	r2, [r3, #0]
          break;
 8005764:	e01e      	b.n	80057a4 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2201      	movs	r2, #1
 800576a:	4619      	mov	r1, r3
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f001 fbff 	bl	8006f70 <USBD_CtlSendData>
          break;
 8005772:	e017      	b.n	80057a4 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	885b      	ldrh	r3, [r3, #2]
 8005778:	0a1b      	lsrs	r3, r3, #8
 800577a:	b29b      	uxth	r3, r3
 800577c:	b2db      	uxtb	r3, r3
 800577e:	461a      	mov	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	605a      	str	r2, [r3, #4]
          break;
 8005784:	e00e      	b.n	80057a4 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	3304      	adds	r3, #4
 800578a:	2201      	movs	r2, #1
 800578c:	4619      	mov	r1, r3
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f001 fbee 	bl	8006f70 <USBD_CtlSendData>
          break;
 8005794:	e006      	b.n	80057a4 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005796:	6839      	ldr	r1, [r7, #0]
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f001 fb78 	bl	8006e8e <USBD_CtlError>
          ret = USBD_FAIL;
 800579e:	2303      	movs	r3, #3
 80057a0:	75fb      	strb	r3, [r7, #23]
          break;
 80057a2:	bf00      	nop
      }
      break;
 80057a4:	e09a      	b.n	80058dc <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	785b      	ldrb	r3, [r3, #1]
 80057aa:	2b0b      	cmp	r3, #11
 80057ac:	f200 8086 	bhi.w	80058bc <USBD_HID_Setup+0x1dc>
 80057b0:	a201      	add	r2, pc, #4	; (adr r2, 80057b8 <USBD_HID_Setup+0xd8>)
 80057b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b6:	bf00      	nop
 80057b8:	080057e9 	.word	0x080057e9
 80057bc:	080058cb 	.word	0x080058cb
 80057c0:	080058bd 	.word	0x080058bd
 80057c4:	080058bd 	.word	0x080058bd
 80057c8:	080058bd 	.word	0x080058bd
 80057cc:	080058bd 	.word	0x080058bd
 80057d0:	08005813 	.word	0x08005813
 80057d4:	080058bd 	.word	0x080058bd
 80057d8:	080058bd 	.word	0x080058bd
 80057dc:	080058bd 	.word	0x080058bd
 80057e0:	0800586b 	.word	0x0800586b
 80057e4:	08005895 	.word	0x08005895
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b03      	cmp	r3, #3
 80057f2:	d107      	bne.n	8005804 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80057f4:	f107 030a 	add.w	r3, r7, #10
 80057f8:	2202      	movs	r2, #2
 80057fa:	4619      	mov	r1, r3
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f001 fbb7 	bl	8006f70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005802:	e063      	b.n	80058cc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005804:	6839      	ldr	r1, [r7, #0]
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f001 fb41 	bl	8006e8e <USBD_CtlError>
            ret = USBD_FAIL;
 800580c:	2303      	movs	r3, #3
 800580e:	75fb      	strb	r3, [r7, #23]
          break;
 8005810:	e05c      	b.n	80058cc <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	885b      	ldrh	r3, [r3, #2]
 8005816:	0a1b      	lsrs	r3, r3, #8
 8005818:	b29b      	uxth	r3, r3
 800581a:	2b22      	cmp	r3, #34	; 0x22
 800581c:	d108      	bne.n	8005830 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	88db      	ldrh	r3, [r3, #6]
 8005822:	2b3f      	cmp	r3, #63	; 0x3f
 8005824:	bf28      	it	cs
 8005826:	233f      	movcs	r3, #63	; 0x3f
 8005828:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800582a:	4b2f      	ldr	r3, [pc, #188]	; (80058e8 <USBD_HID_Setup+0x208>)
 800582c:	613b      	str	r3, [r7, #16]
 800582e:	e015      	b.n	800585c <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	885b      	ldrh	r3, [r3, #2]
 8005834:	0a1b      	lsrs	r3, r3, #8
 8005836:	b29b      	uxth	r3, r3
 8005838:	2b21      	cmp	r3, #33	; 0x21
 800583a:	d108      	bne.n	800584e <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800583c:	4b2b      	ldr	r3, [pc, #172]	; (80058ec <USBD_HID_Setup+0x20c>)
 800583e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	88db      	ldrh	r3, [r3, #6]
 8005844:	2b09      	cmp	r3, #9
 8005846:	bf28      	it	cs
 8005848:	2309      	movcs	r3, #9
 800584a:	82bb      	strh	r3, [r7, #20]
 800584c:	e006      	b.n	800585c <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800584e:	6839      	ldr	r1, [r7, #0]
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f001 fb1c 	bl	8006e8e <USBD_CtlError>
            ret = USBD_FAIL;
 8005856:	2303      	movs	r3, #3
 8005858:	75fb      	strb	r3, [r7, #23]
            break;
 800585a:	e037      	b.n	80058cc <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800585c:	8abb      	ldrh	r3, [r7, #20]
 800585e:	461a      	mov	r2, r3
 8005860:	6939      	ldr	r1, [r7, #16]
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f001 fb84 	bl	8006f70 <USBD_CtlSendData>
          break;
 8005868:	e030      	b.n	80058cc <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b03      	cmp	r3, #3
 8005874:	d107      	bne.n	8005886 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	3308      	adds	r3, #8
 800587a:	2201      	movs	r2, #1
 800587c:	4619      	mov	r1, r3
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f001 fb76 	bl	8006f70 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005884:	e022      	b.n	80058cc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005886:	6839      	ldr	r1, [r7, #0]
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f001 fb00 	bl	8006e8e <USBD_CtlError>
            ret = USBD_FAIL;
 800588e:	2303      	movs	r3, #3
 8005890:	75fb      	strb	r3, [r7, #23]
          break;
 8005892:	e01b      	b.n	80058cc <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b03      	cmp	r3, #3
 800589e:	d106      	bne.n	80058ae <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	885b      	ldrh	r3, [r3, #2]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	461a      	mov	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058ac:	e00e      	b.n	80058cc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80058ae:	6839      	ldr	r1, [r7, #0]
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f001 faec 	bl	8006e8e <USBD_CtlError>
            ret = USBD_FAIL;
 80058b6:	2303      	movs	r3, #3
 80058b8:	75fb      	strb	r3, [r7, #23]
          break;
 80058ba:	e007      	b.n	80058cc <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80058bc:	6839      	ldr	r1, [r7, #0]
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f001 fae5 	bl	8006e8e <USBD_CtlError>
          ret = USBD_FAIL;
 80058c4:	2303      	movs	r3, #3
 80058c6:	75fb      	strb	r3, [r7, #23]
          break;
 80058c8:	e000      	b.n	80058cc <USBD_HID_Setup+0x1ec>
          break;
 80058ca:	bf00      	nop
      }
      break;
 80058cc:	e006      	b.n	80058dc <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80058ce:	6839      	ldr	r1, [r7, #0]
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f001 fadc 	bl	8006e8e <USBD_CtlError>
      ret = USBD_FAIL;
 80058d6:	2303      	movs	r3, #3
 80058d8:	75fb      	strb	r3, [r7, #23]
      break;
 80058da:	bf00      	nop
  }

  return (uint8_t)ret;
 80058dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	20000080 	.word	0x20000080
 80058ec:	20000068 	.word	0x20000068

080058f0 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	4613      	mov	r3, r2
 80058fc:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	32b0      	adds	r2, #176	; 0xb0
 8005908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800590c:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005914:	2303      	movs	r3, #3
 8005916:	e014      	b.n	8005942 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b03      	cmp	r3, #3
 8005922:	d10d      	bne.n	8005940 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	7b1b      	ldrb	r3, [r3, #12]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d109      	bne.n	8005940 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	2201      	movs	r2, #1
 8005930:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8005932:	4b06      	ldr	r3, [pc, #24]	; (800594c <USBD_HID_SendReport+0x5c>)
 8005934:	7819      	ldrb	r1, [r3, #0]
 8005936:	88fb      	ldrh	r3, [r7, #6]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f002 f8c5 	bl	8007aca <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	200000bf 	.word	0x200000bf

08005950 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005958:	2181      	movs	r1, #129	; 0x81
 800595a:	4809      	ldr	r0, [pc, #36]	; (8005980 <USBD_HID_GetFSCfgDesc+0x30>)
 800595c:	f000 fc35 	bl	80061ca <USBD_GetEpDesc>
 8005960:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	220a      	movs	r2, #10
 800596c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2222      	movs	r2, #34	; 0x22
 8005972:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005974:	4b02      	ldr	r3, [pc, #8]	; (8005980 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	20000044 	.word	0x20000044

08005984 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800598c:	2181      	movs	r1, #129	; 0x81
 800598e:	4809      	ldr	r0, [pc, #36]	; (80059b4 <USBD_HID_GetHSCfgDesc+0x30>)
 8005990:	f000 fc1b 	bl	80061ca <USBD_GetEpDesc>
 8005994:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2207      	movs	r2, #7
 80059a0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2222      	movs	r2, #34	; 0x22
 80059a6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80059a8:	4b02      	ldr	r3, [pc, #8]	; (80059b4 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	20000044 	.word	0x20000044

080059b8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80059c0:	2181      	movs	r1, #129	; 0x81
 80059c2:	4809      	ldr	r0, [pc, #36]	; (80059e8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80059c4:	f000 fc01 	bl	80061ca <USBD_GetEpDesc>
 80059c8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	220a      	movs	r2, #10
 80059d4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2222      	movs	r2, #34	; 0x22
 80059da:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80059dc:	4b02      	ldr	r3, [pc, #8]	; (80059e8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	20000044 	.word	0x20000044

080059ec <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	460b      	mov	r3, r1
 80059f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	32b0      	adds	r2, #176	; 0xb0
 8005a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a06:	2200      	movs	r2, #0
 8005a08:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	220a      	movs	r2, #10
 8005a24:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005a26:	4b03      	ldr	r3, [pc, #12]	; (8005a34 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	20000074 	.word	0x20000074

08005a38 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	4613      	mov	r3, r2
 8005a44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e01f      	b.n	8005a90 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	79fa      	ldrb	r2, [r7, #7]
 8005a82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f001 fea1 	bl	80077cc <USBD_LL_Init>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e025      	b.n	8005afc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	683a      	ldr	r2, [r7, #0]
 8005ab4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	32ae      	adds	r2, #174	; 0xae
 8005ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00f      	beq.n	8005aec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	32ae      	adds	r2, #174	; 0xae
 8005ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005adc:	f107 020e 	add.w	r2, r7, #14
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	4798      	blx	r3
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f001 fef3 	bl	80078f8 <USBD_LL_Start>
 8005b12:	4603      	mov	r3, r0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b24:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b084      	sub	sp, #16
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d009      	beq.n	8005b60 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	78fa      	ldrb	r2, [r7, #3]
 8005b56:	4611      	mov	r1, r2
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	4798      	blx	r3
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
 8005b72:	460b      	mov	r3, r1
 8005b74:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	78fa      	ldrb	r2, [r7, #3]
 8005b84:	4611      	mov	r1, r2
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	4798      	blx	r3
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005b90:	2303      	movs	r3, #3
 8005b92:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b084      	sub	sp, #16
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005bae:	6839      	ldr	r1, [r7, #0]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f001 f932 	bl	8006e1a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005bd2:	f003 031f 	and.w	r3, r3, #31
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d01a      	beq.n	8005c10 <USBD_LL_SetupStage+0x72>
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d822      	bhi.n	8005c24 <USBD_LL_SetupStage+0x86>
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d002      	beq.n	8005be8 <USBD_LL_SetupStage+0x4a>
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d00a      	beq.n	8005bfc <USBD_LL_SetupStage+0x5e>
 8005be6:	e01d      	b.n	8005c24 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005bee:	4619      	mov	r1, r3
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fb5f 	bl	80062b4 <USBD_StdDevReq>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	73fb      	strb	r3, [r7, #15]
      break;
 8005bfa:	e020      	b.n	8005c3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c02:	4619      	mov	r1, r3
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fbc7 	bl	8006398 <USBD_StdItfReq>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	73fb      	strb	r3, [r7, #15]
      break;
 8005c0e:	e016      	b.n	8005c3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c16:	4619      	mov	r1, r3
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 fc29 	bl	8006470 <USBD_StdEPReq>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	73fb      	strb	r3, [r7, #15]
      break;
 8005c22:	e00c      	b.n	8005c3e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	4619      	mov	r1, r3
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f001 fec0 	bl	80079b8 <USBD_LL_StallEP>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c3c:	bf00      	nop
  }

  return ret;
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	460b      	mov	r3, r1
 8005c52:	607a      	str	r2, [r7, #4]
 8005c54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005c5a:	7afb      	ldrb	r3, [r7, #11]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d16e      	bne.n	8005d3e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005c66:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	f040 8098 	bne.w	8005da4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d913      	bls.n	8005ca8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	1ad2      	subs	r2, r2, r3
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	4293      	cmp	r3, r2
 8005c98:	bf28      	it	cs
 8005c9a:	4613      	movcs	r3, r2
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	6879      	ldr	r1, [r7, #4]
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f001 f991 	bl	8006fc8 <USBD_CtlContinueRx>
 8005ca6:	e07d      	b.n	8005da4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005cae:	f003 031f 	and.w	r3, r3, #31
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d014      	beq.n	8005ce0 <USBD_LL_DataOutStage+0x98>
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d81d      	bhi.n	8005cf6 <USBD_LL_DataOutStage+0xae>
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <USBD_LL_DataOutStage+0x7c>
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d003      	beq.n	8005cca <USBD_LL_DataOutStage+0x82>
 8005cc2:	e018      	b.n	8005cf6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	75bb      	strb	r3, [r7, #22]
            break;
 8005cc8:	e018      	b.n	8005cfc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 fa5e 	bl	8006196 <USBD_CoreFindIF>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	75bb      	strb	r3, [r7, #22]
            break;
 8005cde:	e00d      	b.n	8005cfc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	4619      	mov	r1, r3
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 fa60 	bl	80061b0 <USBD_CoreFindEP>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	75bb      	strb	r3, [r7, #22]
            break;
 8005cf4:	e002      	b.n	8005cfc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	75bb      	strb	r3, [r7, #22]
            break;
 8005cfa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005cfc:	7dbb      	ldrb	r3, [r7, #22]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d119      	bne.n	8005d36 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	d113      	bne.n	8005d36 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005d0e:	7dba      	ldrb	r2, [r7, #22]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	32ae      	adds	r2, #174	; 0xae
 8005d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00b      	beq.n	8005d36 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005d1e:	7dba      	ldrb	r2, [r7, #22]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005d26:	7dba      	ldrb	r2, [r7, #22]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	32ae      	adds	r2, #174	; 0xae
 8005d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f001 f957 	bl	8006fea <USBD_CtlSendStatus>
 8005d3c:	e032      	b.n	8005da4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005d3e:	7afb      	ldrb	r3, [r7, #11]
 8005d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	4619      	mov	r1, r3
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f000 fa31 	bl	80061b0 <USBD_CoreFindEP>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d52:	7dbb      	ldrb	r3, [r7, #22]
 8005d54:	2bff      	cmp	r3, #255	; 0xff
 8005d56:	d025      	beq.n	8005da4 <USBD_LL_DataOutStage+0x15c>
 8005d58:	7dbb      	ldrb	r3, [r7, #22]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d122      	bne.n	8005da4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b03      	cmp	r3, #3
 8005d68:	d117      	bne.n	8005d9a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005d6a:	7dba      	ldrb	r2, [r7, #22]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	32ae      	adds	r2, #174	; 0xae
 8005d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00f      	beq.n	8005d9a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005d7a:	7dba      	ldrb	r2, [r7, #22]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005d82:	7dba      	ldrb	r2, [r7, #22]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	32ae      	adds	r2, #174	; 0xae
 8005d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	7afa      	ldrb	r2, [r7, #11]
 8005d90:	4611      	mov	r1, r2
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	4798      	blx	r3
 8005d96:	4603      	mov	r3, r0
 8005d98:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005d9a:	7dfb      	ldrb	r3, [r7, #23]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005da0:	7dfb      	ldrb	r3, [r7, #23]
 8005da2:	e000      	b.n	8005da6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b086      	sub	sp, #24
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	60f8      	str	r0, [r7, #12]
 8005db6:	460b      	mov	r3, r1
 8005db8:	607a      	str	r2, [r7, #4]
 8005dba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005dbc:	7afb      	ldrb	r3, [r7, #11]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d16f      	bne.n	8005ea2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	3314      	adds	r3, #20
 8005dc6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d15a      	bne.n	8005e88 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	689a      	ldr	r2, [r3, #8]
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d914      	bls.n	8005e08 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	689a      	ldr	r2, [r3, #8]
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	1ad2      	subs	r2, r2, r3
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	461a      	mov	r2, r3
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f001 f8d6 	bl	8006fa6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2100      	movs	r1, #0
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f001 fe83 	bl	8007b0c <USBD_LL_PrepareReceive>
 8005e06:	e03f      	b.n	8005e88 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	68da      	ldr	r2, [r3, #12]
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d11c      	bne.n	8005e4e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d316      	bcc.n	8005e4e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d20f      	bcs.n	8005e4e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005e2e:	2200      	movs	r2, #0
 8005e30:	2100      	movs	r1, #0
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f001 f8b7 	bl	8006fa6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e40:	2300      	movs	r3, #0
 8005e42:	2200      	movs	r2, #0
 8005e44:	2100      	movs	r1, #0
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f001 fe60 	bl	8007b0c <USBD_LL_PrepareReceive>
 8005e4c:	e01c      	b.n	8005e88 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b03      	cmp	r3, #3
 8005e58:	d10f      	bne.n	8005e7a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d009      	beq.n	8005e7a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e7a:	2180      	movs	r1, #128	; 0x80
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f001 fd9b 	bl	80079b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f001 f8c4 	bl	8007010 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d03a      	beq.n	8005f08 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f7ff fe42 	bl	8005b1c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005ea0:	e032      	b.n	8005f08 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005ea2:	7afb      	ldrb	r3, [r7, #11]
 8005ea4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	4619      	mov	r1, r3
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 f97f 	bl	80061b0 <USBD_CoreFindEP>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005eb6:	7dfb      	ldrb	r3, [r7, #23]
 8005eb8:	2bff      	cmp	r3, #255	; 0xff
 8005eba:	d025      	beq.n	8005f08 <USBD_LL_DataInStage+0x15a>
 8005ebc:	7dfb      	ldrb	r3, [r7, #23]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d122      	bne.n	8005f08 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d11c      	bne.n	8005f08 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005ece:	7dfa      	ldrb	r2, [r7, #23]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	32ae      	adds	r2, #174	; 0xae
 8005ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d014      	beq.n	8005f08 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005ede:	7dfa      	ldrb	r2, [r7, #23]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005ee6:	7dfa      	ldrb	r2, [r7, #23]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	32ae      	adds	r2, #174	; 0xae
 8005eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	7afa      	ldrb	r2, [r7, #11]
 8005ef4:	4611      	mov	r1, r2
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	4798      	blx	r3
 8005efa:	4603      	mov	r3, r0
 8005efc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005efe:	7dbb      	ldrb	r3, [r7, #22]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005f04:	7dbb      	ldrb	r3, [r7, #22]
 8005f06:	e000      	b.n	8005f0a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d014      	beq.n	8005f78 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00e      	beq.n	8005f78 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	6852      	ldr	r2, [r2, #4]
 8005f66:	b2d2      	uxtb	r2, r2
 8005f68:	4611      	mov	r1, r2
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	4798      	blx	r3
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005f74:	2303      	movs	r3, #3
 8005f76:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f78:	2340      	movs	r3, #64	; 0x40
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f001 fcd5 	bl	800792e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2240      	movs	r2, #64	; 0x40
 8005f90:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f94:	2340      	movs	r3, #64	; 0x40
 8005f96:	2200      	movs	r2, #0
 8005f98:	2180      	movs	r1, #128	; 0x80
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f001 fcc7 	bl	800792e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2240      	movs	r2, #64	; 0x40
 8005faa:	621a      	str	r2, [r3, #32]

  return ret;
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b083      	sub	sp, #12
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	78fa      	ldrb	r2, [r7, #3]
 8005fc6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2204      	movs	r2, #4
 8005ff0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b04      	cmp	r3, #4
 8006014:	d106      	bne.n	8006024 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800601c:	b2da      	uxtb	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b082      	sub	sp, #8
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b03      	cmp	r3, #3
 8006044:	d110      	bne.n	8006068 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00b      	beq.n	8006068 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d005      	beq.n	8006068 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b082      	sub	sp, #8
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	460b      	mov	r3, r1
 800607c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	32ae      	adds	r2, #174	; 0xae
 8006088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006090:	2303      	movs	r3, #3
 8006092:	e01c      	b.n	80060ce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b03      	cmp	r3, #3
 800609e:	d115      	bne.n	80060cc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	32ae      	adds	r2, #174	; 0xae
 80060aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00b      	beq.n	80060cc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	32ae      	adds	r2, #174	; 0xae
 80060be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	78fa      	ldrb	r2, [r7, #3]
 80060c6:	4611      	mov	r1, r2
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b082      	sub	sp, #8
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
 80060de:	460b      	mov	r3, r1
 80060e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	32ae      	adds	r2, #174	; 0xae
 80060ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e01c      	b.n	8006132 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b03      	cmp	r3, #3
 8006102:	d115      	bne.n	8006130 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	32ae      	adds	r2, #174	; 0xae
 800610e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00b      	beq.n	8006130 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	32ae      	adds	r2, #174	; 0xae
 8006122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	78fa      	ldrb	r2, [r7, #3]
 800612a:	4611      	mov	r1, r2
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800613a:	b480      	push	{r7}
 800613c:	b083      	sub	sp, #12
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006158:	2300      	movs	r3, #0
 800615a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00e      	beq.n	800618c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	6852      	ldr	r2, [r2, #4]
 800617a:	b2d2      	uxtb	r2, r2
 800617c:	4611      	mov	r1, r2
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	4798      	blx	r3
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006188:	2303      	movs	r3, #3
 800618a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800618c:	7bfb      	ldrb	r3, [r7, #15]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006196:	b480      	push	{r7}
 8006198:	b083      	sub	sp, #12
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	460b      	mov	r3, r1
 80061a0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80061a2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	460b      	mov	r3, r1
 80061ba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80061bc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80061be:	4618      	mov	r0, r3
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b086      	sub	sp, #24
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	460b      	mov	r3, r1
 80061d4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80061de:	2300      	movs	r3, #0
 80061e0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	885b      	ldrh	r3, [r3, #2]
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d920      	bls.n	8006234 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80061fa:	e013      	b.n	8006224 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80061fc:	f107 030a 	add.w	r3, r7, #10
 8006200:	4619      	mov	r1, r3
 8006202:	6978      	ldr	r0, [r7, #20]
 8006204:	f000 f81b 	bl	800623e <USBD_GetNextDesc>
 8006208:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	785b      	ldrb	r3, [r3, #1]
 800620e:	2b05      	cmp	r3, #5
 8006210:	d108      	bne.n	8006224 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	789b      	ldrb	r3, [r3, #2]
 800621a:	78fa      	ldrb	r2, [r7, #3]
 800621c:	429a      	cmp	r2, r3
 800621e:	d008      	beq.n	8006232 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006220:	2300      	movs	r3, #0
 8006222:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	885b      	ldrh	r3, [r3, #2]
 8006228:	b29a      	uxth	r2, r3
 800622a:	897b      	ldrh	r3, [r7, #10]
 800622c:	429a      	cmp	r2, r3
 800622e:	d8e5      	bhi.n	80061fc <USBD_GetEpDesc+0x32>
 8006230:	e000      	b.n	8006234 <USBD_GetEpDesc+0x6a>
          break;
 8006232:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006234:	693b      	ldr	r3, [r7, #16]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800623e:	b480      	push	{r7}
 8006240:	b085      	sub	sp, #20
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	881a      	ldrh	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	b29b      	uxth	r3, r3
 8006256:	4413      	add	r3, r2
 8006258:	b29a      	uxth	r2, r3
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	461a      	mov	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4413      	add	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800626a:	68fb      	ldr	r3, [r7, #12]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	3301      	adds	r3, #1
 800628e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006296:	8a3b      	ldrh	r3, [r7, #16]
 8006298:	021b      	lsls	r3, r3, #8
 800629a:	b21a      	sxth	r2, r3
 800629c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	b21b      	sxth	r3, r3
 80062a4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80062a6:	89fb      	ldrh	r3, [r7, #14]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	371c      	adds	r7, #28
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062ca:	2b40      	cmp	r3, #64	; 0x40
 80062cc:	d005      	beq.n	80062da <USBD_StdDevReq+0x26>
 80062ce:	2b40      	cmp	r3, #64	; 0x40
 80062d0:	d857      	bhi.n	8006382 <USBD_StdDevReq+0xce>
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00f      	beq.n	80062f6 <USBD_StdDevReq+0x42>
 80062d6:	2b20      	cmp	r3, #32
 80062d8:	d153      	bne.n	8006382 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	32ae      	adds	r2, #174	; 0xae
 80062e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	6839      	ldr	r1, [r7, #0]
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	4798      	blx	r3
 80062f0:	4603      	mov	r3, r0
 80062f2:	73fb      	strb	r3, [r7, #15]
      break;
 80062f4:	e04a      	b.n	800638c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	785b      	ldrb	r3, [r3, #1]
 80062fa:	2b09      	cmp	r3, #9
 80062fc:	d83b      	bhi.n	8006376 <USBD_StdDevReq+0xc2>
 80062fe:	a201      	add	r2, pc, #4	; (adr r2, 8006304 <USBD_StdDevReq+0x50>)
 8006300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006304:	08006359 	.word	0x08006359
 8006308:	0800636d 	.word	0x0800636d
 800630c:	08006377 	.word	0x08006377
 8006310:	08006363 	.word	0x08006363
 8006314:	08006377 	.word	0x08006377
 8006318:	08006337 	.word	0x08006337
 800631c:	0800632d 	.word	0x0800632d
 8006320:	08006377 	.word	0x08006377
 8006324:	0800634f 	.word	0x0800634f
 8006328:	08006341 	.word	0x08006341
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fa3c 	bl	80067ac <USBD_GetDescriptor>
          break;
 8006334:	e024      	b.n	8006380 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006336:	6839      	ldr	r1, [r7, #0]
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fbcb 	bl	8006ad4 <USBD_SetAddress>
          break;
 800633e:	e01f      	b.n	8006380 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006340:	6839      	ldr	r1, [r7, #0]
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fc0a 	bl	8006b5c <USBD_SetConfig>
 8006348:	4603      	mov	r3, r0
 800634a:	73fb      	strb	r3, [r7, #15]
          break;
 800634c:	e018      	b.n	8006380 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800634e:	6839      	ldr	r1, [r7, #0]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fcad 	bl	8006cb0 <USBD_GetConfig>
          break;
 8006356:	e013      	b.n	8006380 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006358:	6839      	ldr	r1, [r7, #0]
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fcde 	bl	8006d1c <USBD_GetStatus>
          break;
 8006360:	e00e      	b.n	8006380 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006362:	6839      	ldr	r1, [r7, #0]
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 fd0d 	bl	8006d84 <USBD_SetFeature>
          break;
 800636a:	e009      	b.n	8006380 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fd31 	bl	8006dd6 <USBD_ClrFeature>
          break;
 8006374:	e004      	b.n	8006380 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006376:	6839      	ldr	r1, [r7, #0]
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 fd88 	bl	8006e8e <USBD_CtlError>
          break;
 800637e:	bf00      	nop
      }
      break;
 8006380:	e004      	b.n	800638c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006382:	6839      	ldr	r1, [r7, #0]
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fd82 	bl	8006e8e <USBD_CtlError>
      break;
 800638a:	bf00      	nop
  }

  return ret;
 800638c:	7bfb      	ldrb	r3, [r7, #15]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop

08006398 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063a2:	2300      	movs	r3, #0
 80063a4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063ae:	2b40      	cmp	r3, #64	; 0x40
 80063b0:	d005      	beq.n	80063be <USBD_StdItfReq+0x26>
 80063b2:	2b40      	cmp	r3, #64	; 0x40
 80063b4:	d852      	bhi.n	800645c <USBD_StdItfReq+0xc4>
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <USBD_StdItfReq+0x26>
 80063ba:	2b20      	cmp	r3, #32
 80063bc:	d14e      	bne.n	800645c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	3b01      	subs	r3, #1
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d840      	bhi.n	800644e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	889b      	ldrh	r3, [r3, #4]
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d836      	bhi.n	8006444 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	889b      	ldrh	r3, [r3, #4]
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	4619      	mov	r1, r3
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7ff fed9 	bl	8006196 <USBD_CoreFindIF>
 80063e4:	4603      	mov	r3, r0
 80063e6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063e8:	7bbb      	ldrb	r3, [r7, #14]
 80063ea:	2bff      	cmp	r3, #255	; 0xff
 80063ec:	d01d      	beq.n	800642a <USBD_StdItfReq+0x92>
 80063ee:	7bbb      	ldrb	r3, [r7, #14]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d11a      	bne.n	800642a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80063f4:	7bba      	ldrb	r2, [r7, #14]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	32ae      	adds	r2, #174	; 0xae
 80063fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00f      	beq.n	8006424 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006404:	7bba      	ldrb	r2, [r7, #14]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800640c:	7bba      	ldrb	r2, [r7, #14]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	32ae      	adds	r2, #174	; 0xae
 8006412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	6839      	ldr	r1, [r7, #0]
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	4798      	blx	r3
 800641e:	4603      	mov	r3, r0
 8006420:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006422:	e004      	b.n	800642e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006424:	2303      	movs	r3, #3
 8006426:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006428:	e001      	b.n	800642e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800642a:	2303      	movs	r3, #3
 800642c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	88db      	ldrh	r3, [r3, #6]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d110      	bne.n	8006458 <USBD_StdItfReq+0xc0>
 8006436:	7bfb      	ldrb	r3, [r7, #15]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10d      	bne.n	8006458 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fdd4 	bl	8006fea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006442:	e009      	b.n	8006458 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fd21 	bl	8006e8e <USBD_CtlError>
          break;
 800644c:	e004      	b.n	8006458 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800644e:	6839      	ldr	r1, [r7, #0]
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fd1c 	bl	8006e8e <USBD_CtlError>
          break;
 8006456:	e000      	b.n	800645a <USBD_StdItfReq+0xc2>
          break;
 8006458:	bf00      	nop
      }
      break;
 800645a:	e004      	b.n	8006466 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800645c:	6839      	ldr	r1, [r7, #0]
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fd15 	bl	8006e8e <USBD_CtlError>
      break;
 8006464:	bf00      	nop
  }

  return ret;
 8006466:	7bfb      	ldrb	r3, [r7, #15]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	889b      	ldrh	r3, [r3, #4]
 8006482:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800648c:	2b40      	cmp	r3, #64	; 0x40
 800648e:	d007      	beq.n	80064a0 <USBD_StdEPReq+0x30>
 8006490:	2b40      	cmp	r3, #64	; 0x40
 8006492:	f200 817f 	bhi.w	8006794 <USBD_StdEPReq+0x324>
 8006496:	2b00      	cmp	r3, #0
 8006498:	d02a      	beq.n	80064f0 <USBD_StdEPReq+0x80>
 800649a:	2b20      	cmp	r3, #32
 800649c:	f040 817a 	bne.w	8006794 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80064a0:	7bbb      	ldrb	r3, [r7, #14]
 80064a2:	4619      	mov	r1, r3
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7ff fe83 	bl	80061b0 <USBD_CoreFindEP>
 80064aa:	4603      	mov	r3, r0
 80064ac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064ae:	7b7b      	ldrb	r3, [r7, #13]
 80064b0:	2bff      	cmp	r3, #255	; 0xff
 80064b2:	f000 8174 	beq.w	800679e <USBD_StdEPReq+0x32e>
 80064b6:	7b7b      	ldrb	r3, [r7, #13]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f040 8170 	bne.w	800679e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80064be:	7b7a      	ldrb	r2, [r7, #13]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80064c6:	7b7a      	ldrb	r2, [r7, #13]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	32ae      	adds	r2, #174	; 0xae
 80064cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 8163 	beq.w	800679e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80064d8:	7b7a      	ldrb	r2, [r7, #13]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	32ae      	adds	r2, #174	; 0xae
 80064de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	6839      	ldr	r1, [r7, #0]
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	4798      	blx	r3
 80064ea:	4603      	mov	r3, r0
 80064ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064ee:	e156      	b.n	800679e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	785b      	ldrb	r3, [r3, #1]
 80064f4:	2b03      	cmp	r3, #3
 80064f6:	d008      	beq.n	800650a <USBD_StdEPReq+0x9a>
 80064f8:	2b03      	cmp	r3, #3
 80064fa:	f300 8145 	bgt.w	8006788 <USBD_StdEPReq+0x318>
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 809b 	beq.w	800663a <USBD_StdEPReq+0x1ca>
 8006504:	2b01      	cmp	r3, #1
 8006506:	d03c      	beq.n	8006582 <USBD_StdEPReq+0x112>
 8006508:	e13e      	b.n	8006788 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d002      	beq.n	800651c <USBD_StdEPReq+0xac>
 8006516:	2b03      	cmp	r3, #3
 8006518:	d016      	beq.n	8006548 <USBD_StdEPReq+0xd8>
 800651a:	e02c      	b.n	8006576 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800651c:	7bbb      	ldrb	r3, [r7, #14]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00d      	beq.n	800653e <USBD_StdEPReq+0xce>
 8006522:	7bbb      	ldrb	r3, [r7, #14]
 8006524:	2b80      	cmp	r3, #128	; 0x80
 8006526:	d00a      	beq.n	800653e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006528:	7bbb      	ldrb	r3, [r7, #14]
 800652a:	4619      	mov	r1, r3
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f001 fa43 	bl	80079b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006532:	2180      	movs	r1, #128	; 0x80
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f001 fa3f 	bl	80079b8 <USBD_LL_StallEP>
 800653a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800653c:	e020      	b.n	8006580 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fca4 	bl	8006e8e <USBD_CtlError>
              break;
 8006546:	e01b      	b.n	8006580 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	885b      	ldrh	r3, [r3, #2]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10e      	bne.n	800656e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006550:	7bbb      	ldrb	r3, [r7, #14]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00b      	beq.n	800656e <USBD_StdEPReq+0xfe>
 8006556:	7bbb      	ldrb	r3, [r7, #14]
 8006558:	2b80      	cmp	r3, #128	; 0x80
 800655a:	d008      	beq.n	800656e <USBD_StdEPReq+0xfe>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	88db      	ldrh	r3, [r3, #6]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d104      	bne.n	800656e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006564:	7bbb      	ldrb	r3, [r7, #14]
 8006566:	4619      	mov	r1, r3
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f001 fa25 	bl	80079b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fd3b 	bl	8006fea <USBD_CtlSendStatus>

              break;
 8006574:	e004      	b.n	8006580 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006576:	6839      	ldr	r1, [r7, #0]
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fc88 	bl	8006e8e <USBD_CtlError>
              break;
 800657e:	bf00      	nop
          }
          break;
 8006580:	e107      	b.n	8006792 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b02      	cmp	r3, #2
 800658c:	d002      	beq.n	8006594 <USBD_StdEPReq+0x124>
 800658e:	2b03      	cmp	r3, #3
 8006590:	d016      	beq.n	80065c0 <USBD_StdEPReq+0x150>
 8006592:	e04b      	b.n	800662c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006594:	7bbb      	ldrb	r3, [r7, #14]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00d      	beq.n	80065b6 <USBD_StdEPReq+0x146>
 800659a:	7bbb      	ldrb	r3, [r7, #14]
 800659c:	2b80      	cmp	r3, #128	; 0x80
 800659e:	d00a      	beq.n	80065b6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80065a0:	7bbb      	ldrb	r3, [r7, #14]
 80065a2:	4619      	mov	r1, r3
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f001 fa07 	bl	80079b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80065aa:	2180      	movs	r1, #128	; 0x80
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f001 fa03 	bl	80079b8 <USBD_LL_StallEP>
 80065b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80065b4:	e040      	b.n	8006638 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80065b6:	6839      	ldr	r1, [r7, #0]
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fc68 	bl	8006e8e <USBD_CtlError>
              break;
 80065be:	e03b      	b.n	8006638 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	885b      	ldrh	r3, [r3, #2]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d136      	bne.n	8006636 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80065c8:	7bbb      	ldrb	r3, [r7, #14]
 80065ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d004      	beq.n	80065dc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80065d2:	7bbb      	ldrb	r3, [r7, #14]
 80065d4:	4619      	mov	r1, r3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f001 fa0d 	bl	80079f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fd04 	bl	8006fea <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80065e2:	7bbb      	ldrb	r3, [r7, #14]
 80065e4:	4619      	mov	r1, r3
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7ff fde2 	bl	80061b0 <USBD_CoreFindEP>
 80065ec:	4603      	mov	r3, r0
 80065ee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065f0:	7b7b      	ldrb	r3, [r7, #13]
 80065f2:	2bff      	cmp	r3, #255	; 0xff
 80065f4:	d01f      	beq.n	8006636 <USBD_StdEPReq+0x1c6>
 80065f6:	7b7b      	ldrb	r3, [r7, #13]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d11c      	bne.n	8006636 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80065fc:	7b7a      	ldrb	r2, [r7, #13]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006604:	7b7a      	ldrb	r2, [r7, #13]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	32ae      	adds	r2, #174	; 0xae
 800660a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d010      	beq.n	8006636 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006614:	7b7a      	ldrb	r2, [r7, #13]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	32ae      	adds	r2, #174	; 0xae
 800661a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	4798      	blx	r3
 8006626:	4603      	mov	r3, r0
 8006628:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800662a:	e004      	b.n	8006636 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800662c:	6839      	ldr	r1, [r7, #0]
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fc2d 	bl	8006e8e <USBD_CtlError>
              break;
 8006634:	e000      	b.n	8006638 <USBD_StdEPReq+0x1c8>
              break;
 8006636:	bf00      	nop
          }
          break;
 8006638:	e0ab      	b.n	8006792 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b02      	cmp	r3, #2
 8006644:	d002      	beq.n	800664c <USBD_StdEPReq+0x1dc>
 8006646:	2b03      	cmp	r3, #3
 8006648:	d032      	beq.n	80066b0 <USBD_StdEPReq+0x240>
 800664a:	e097      	b.n	800677c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800664c:	7bbb      	ldrb	r3, [r7, #14]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d007      	beq.n	8006662 <USBD_StdEPReq+0x1f2>
 8006652:	7bbb      	ldrb	r3, [r7, #14]
 8006654:	2b80      	cmp	r3, #128	; 0x80
 8006656:	d004      	beq.n	8006662 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006658:	6839      	ldr	r1, [r7, #0]
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fc17 	bl	8006e8e <USBD_CtlError>
                break;
 8006660:	e091      	b.n	8006786 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006662:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006666:	2b00      	cmp	r3, #0
 8006668:	da0b      	bge.n	8006682 <USBD_StdEPReq+0x212>
 800666a:	7bbb      	ldrb	r3, [r7, #14]
 800666c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006670:	4613      	mov	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	3310      	adds	r3, #16
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	4413      	add	r3, r2
 800667e:	3304      	adds	r3, #4
 8006680:	e00b      	b.n	800669a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006682:	7bbb      	ldrb	r3, [r7, #14]
 8006684:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006688:	4613      	mov	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	4413      	add	r3, r2
 8006698:	3304      	adds	r3, #4
 800669a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2200      	movs	r2, #0
 80066a0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2202      	movs	r2, #2
 80066a6:	4619      	mov	r1, r3
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fc61 	bl	8006f70 <USBD_CtlSendData>
              break;
 80066ae:	e06a      	b.n	8006786 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80066b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	da11      	bge.n	80066dc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80066b8:	7bbb      	ldrb	r3, [r7, #14]
 80066ba:	f003 020f 	and.w	r2, r3, #15
 80066be:	6879      	ldr	r1, [r7, #4]
 80066c0:	4613      	mov	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4413      	add	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	440b      	add	r3, r1
 80066ca:	3324      	adds	r3, #36	; 0x24
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d117      	bne.n	8006702 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80066d2:	6839      	ldr	r1, [r7, #0]
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 fbda 	bl	8006e8e <USBD_CtlError>
                  break;
 80066da:	e054      	b.n	8006786 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80066dc:	7bbb      	ldrb	r3, [r7, #14]
 80066de:	f003 020f 	and.w	r2, r3, #15
 80066e2:	6879      	ldr	r1, [r7, #4]
 80066e4:	4613      	mov	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	440b      	add	r3, r1
 80066ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d104      	bne.n	8006702 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80066f8:	6839      	ldr	r1, [r7, #0]
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fbc7 	bl	8006e8e <USBD_CtlError>
                  break;
 8006700:	e041      	b.n	8006786 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006702:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006706:	2b00      	cmp	r3, #0
 8006708:	da0b      	bge.n	8006722 <USBD_StdEPReq+0x2b2>
 800670a:	7bbb      	ldrb	r3, [r7, #14]
 800670c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006710:	4613      	mov	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	3310      	adds	r3, #16
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	4413      	add	r3, r2
 800671e:	3304      	adds	r3, #4
 8006720:	e00b      	b.n	800673a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006722:	7bbb      	ldrb	r3, [r7, #14]
 8006724:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006728:	4613      	mov	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	4413      	add	r3, r2
 8006738:	3304      	adds	r3, #4
 800673a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800673c:	7bbb      	ldrb	r3, [r7, #14]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d002      	beq.n	8006748 <USBD_StdEPReq+0x2d8>
 8006742:	7bbb      	ldrb	r3, [r7, #14]
 8006744:	2b80      	cmp	r3, #128	; 0x80
 8006746:	d103      	bne.n	8006750 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	e00e      	b.n	800676e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006750:	7bbb      	ldrb	r3, [r7, #14]
 8006752:	4619      	mov	r1, r3
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f001 f96d 	bl	8007a34 <USBD_LL_IsStallEP>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d003      	beq.n	8006768 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2201      	movs	r2, #1
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	e002      	b.n	800676e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2200      	movs	r2, #0
 800676c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2202      	movs	r2, #2
 8006772:	4619      	mov	r1, r3
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fbfb 	bl	8006f70 <USBD_CtlSendData>
              break;
 800677a:	e004      	b.n	8006786 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800677c:	6839      	ldr	r1, [r7, #0]
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fb85 	bl	8006e8e <USBD_CtlError>
              break;
 8006784:	bf00      	nop
          }
          break;
 8006786:	e004      	b.n	8006792 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006788:	6839      	ldr	r1, [r7, #0]
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fb7f 	bl	8006e8e <USBD_CtlError>
          break;
 8006790:	bf00      	nop
      }
      break;
 8006792:	e005      	b.n	80067a0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006794:	6839      	ldr	r1, [r7, #0]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fb79 	bl	8006e8e <USBD_CtlError>
      break;
 800679c:	e000      	b.n	80067a0 <USBD_StdEPReq+0x330>
      break;
 800679e:	bf00      	nop
  }

  return ret;
 80067a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
	...

080067ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80067ba:	2300      	movs	r3, #0
 80067bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80067be:	2300      	movs	r3, #0
 80067c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	885b      	ldrh	r3, [r3, #2]
 80067c6:	0a1b      	lsrs	r3, r3, #8
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	3b01      	subs	r3, #1
 80067cc:	2b0e      	cmp	r3, #14
 80067ce:	f200 8152 	bhi.w	8006a76 <USBD_GetDescriptor+0x2ca>
 80067d2:	a201      	add	r2, pc, #4	; (adr r2, 80067d8 <USBD_GetDescriptor+0x2c>)
 80067d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d8:	08006849 	.word	0x08006849
 80067dc:	08006861 	.word	0x08006861
 80067e0:	080068a1 	.word	0x080068a1
 80067e4:	08006a77 	.word	0x08006a77
 80067e8:	08006a77 	.word	0x08006a77
 80067ec:	08006a17 	.word	0x08006a17
 80067f0:	08006a43 	.word	0x08006a43
 80067f4:	08006a77 	.word	0x08006a77
 80067f8:	08006a77 	.word	0x08006a77
 80067fc:	08006a77 	.word	0x08006a77
 8006800:	08006a77 	.word	0x08006a77
 8006804:	08006a77 	.word	0x08006a77
 8006808:	08006a77 	.word	0x08006a77
 800680c:	08006a77 	.word	0x08006a77
 8006810:	08006815 	.word	0x08006815
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800681a:	69db      	ldr	r3, [r3, #28]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00b      	beq.n	8006838 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	7c12      	ldrb	r2, [r2, #16]
 800682c:	f107 0108 	add.w	r1, r7, #8
 8006830:	4610      	mov	r0, r2
 8006832:	4798      	blx	r3
 8006834:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006836:	e126      	b.n	8006a86 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fb27 	bl	8006e8e <USBD_CtlError>
        err++;
 8006840:	7afb      	ldrb	r3, [r7, #11]
 8006842:	3301      	adds	r3, #1
 8006844:	72fb      	strb	r3, [r7, #11]
      break;
 8006846:	e11e      	b.n	8006a86 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	7c12      	ldrb	r2, [r2, #16]
 8006854:	f107 0108 	add.w	r1, r7, #8
 8006858:	4610      	mov	r0, r2
 800685a:	4798      	blx	r3
 800685c:	60f8      	str	r0, [r7, #12]
      break;
 800685e:	e112      	b.n	8006a86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	7c1b      	ldrb	r3, [r3, #16]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10d      	bne.n	8006884 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800686e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006870:	f107 0208 	add.w	r2, r7, #8
 8006874:	4610      	mov	r0, r2
 8006876:	4798      	blx	r3
 8006878:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3301      	adds	r3, #1
 800687e:	2202      	movs	r2, #2
 8006880:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006882:	e100      	b.n	8006a86 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800688a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688c:	f107 0208 	add.w	r2, r7, #8
 8006890:	4610      	mov	r0, r2
 8006892:	4798      	blx	r3
 8006894:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	3301      	adds	r3, #1
 800689a:	2202      	movs	r2, #2
 800689c:	701a      	strb	r2, [r3, #0]
      break;
 800689e:	e0f2      	b.n	8006a86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	885b      	ldrh	r3, [r3, #2]
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b05      	cmp	r3, #5
 80068a8:	f200 80ac 	bhi.w	8006a04 <USBD_GetDescriptor+0x258>
 80068ac:	a201      	add	r2, pc, #4	; (adr r2, 80068b4 <USBD_GetDescriptor+0x108>)
 80068ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b2:	bf00      	nop
 80068b4:	080068cd 	.word	0x080068cd
 80068b8:	08006901 	.word	0x08006901
 80068bc:	08006935 	.word	0x08006935
 80068c0:	08006969 	.word	0x08006969
 80068c4:	0800699d 	.word	0x0800699d
 80068c8:	080069d1 	.word	0x080069d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00b      	beq.n	80068f0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	7c12      	ldrb	r2, [r2, #16]
 80068e4:	f107 0108 	add.w	r1, r7, #8
 80068e8:	4610      	mov	r0, r2
 80068ea:	4798      	blx	r3
 80068ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068ee:	e091      	b.n	8006a14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80068f0:	6839      	ldr	r1, [r7, #0]
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 facb 	bl	8006e8e <USBD_CtlError>
            err++;
 80068f8:	7afb      	ldrb	r3, [r7, #11]
 80068fa:	3301      	adds	r3, #1
 80068fc:	72fb      	strb	r3, [r7, #11]
          break;
 80068fe:	e089      	b.n	8006a14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00b      	beq.n	8006924 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	7c12      	ldrb	r2, [r2, #16]
 8006918:	f107 0108 	add.w	r1, r7, #8
 800691c:	4610      	mov	r0, r2
 800691e:	4798      	blx	r3
 8006920:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006922:	e077      	b.n	8006a14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006924:	6839      	ldr	r1, [r7, #0]
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fab1 	bl	8006e8e <USBD_CtlError>
            err++;
 800692c:	7afb      	ldrb	r3, [r7, #11]
 800692e:	3301      	adds	r3, #1
 8006930:	72fb      	strb	r3, [r7, #11]
          break;
 8006932:	e06f      	b.n	8006a14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00b      	beq.n	8006958 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	7c12      	ldrb	r2, [r2, #16]
 800694c:	f107 0108 	add.w	r1, r7, #8
 8006950:	4610      	mov	r0, r2
 8006952:	4798      	blx	r3
 8006954:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006956:	e05d      	b.n	8006a14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006958:	6839      	ldr	r1, [r7, #0]
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fa97 	bl	8006e8e <USBD_CtlError>
            err++;
 8006960:	7afb      	ldrb	r3, [r7, #11]
 8006962:	3301      	adds	r3, #1
 8006964:	72fb      	strb	r3, [r7, #11]
          break;
 8006966:	e055      	b.n	8006a14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00b      	beq.n	800698c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	7c12      	ldrb	r2, [r2, #16]
 8006980:	f107 0108 	add.w	r1, r7, #8
 8006984:	4610      	mov	r0, r2
 8006986:	4798      	blx	r3
 8006988:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800698a:	e043      	b.n	8006a14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fa7d 	bl	8006e8e <USBD_CtlError>
            err++;
 8006994:	7afb      	ldrb	r3, [r7, #11]
 8006996:	3301      	adds	r3, #1
 8006998:	72fb      	strb	r3, [r7, #11]
          break;
 800699a:	e03b      	b.n	8006a14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00b      	beq.n	80069c0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	7c12      	ldrb	r2, [r2, #16]
 80069b4:	f107 0108 	add.w	r1, r7, #8
 80069b8:	4610      	mov	r0, r2
 80069ba:	4798      	blx	r3
 80069bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069be:	e029      	b.n	8006a14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fa63 	bl	8006e8e <USBD_CtlError>
            err++;
 80069c8:	7afb      	ldrb	r3, [r7, #11]
 80069ca:	3301      	adds	r3, #1
 80069cc:	72fb      	strb	r3, [r7, #11]
          break;
 80069ce:	e021      	b.n	8006a14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00b      	beq.n	80069f4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	7c12      	ldrb	r2, [r2, #16]
 80069e8:	f107 0108 	add.w	r1, r7, #8
 80069ec:	4610      	mov	r0, r2
 80069ee:	4798      	blx	r3
 80069f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069f2:	e00f      	b.n	8006a14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80069f4:	6839      	ldr	r1, [r7, #0]
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fa49 	bl	8006e8e <USBD_CtlError>
            err++;
 80069fc:	7afb      	ldrb	r3, [r7, #11]
 80069fe:	3301      	adds	r3, #1
 8006a00:	72fb      	strb	r3, [r7, #11]
          break;
 8006a02:	e007      	b.n	8006a14 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fa41 	bl	8006e8e <USBD_CtlError>
          err++;
 8006a0c:	7afb      	ldrb	r3, [r7, #11]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006a12:	bf00      	nop
      }
      break;
 8006a14:	e037      	b.n	8006a86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	7c1b      	ldrb	r3, [r3, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d109      	bne.n	8006a32 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a26:	f107 0208 	add.w	r2, r7, #8
 8006a2a:	4610      	mov	r0, r2
 8006a2c:	4798      	blx	r3
 8006a2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a30:	e029      	b.n	8006a86 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fa2a 	bl	8006e8e <USBD_CtlError>
        err++;
 8006a3a:	7afb      	ldrb	r3, [r7, #11]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	72fb      	strb	r3, [r7, #11]
      break;
 8006a40:	e021      	b.n	8006a86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	7c1b      	ldrb	r3, [r3, #16]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10d      	bne.n	8006a66 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a52:	f107 0208 	add.w	r2, r7, #8
 8006a56:	4610      	mov	r0, r2
 8006a58:	4798      	blx	r3
 8006a5a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	2207      	movs	r2, #7
 8006a62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a64:	e00f      	b.n	8006a86 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fa10 	bl	8006e8e <USBD_CtlError>
        err++;
 8006a6e:	7afb      	ldrb	r3, [r7, #11]
 8006a70:	3301      	adds	r3, #1
 8006a72:	72fb      	strb	r3, [r7, #11]
      break;
 8006a74:	e007      	b.n	8006a86 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006a76:	6839      	ldr	r1, [r7, #0]
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fa08 	bl	8006e8e <USBD_CtlError>
      err++;
 8006a7e:	7afb      	ldrb	r3, [r7, #11]
 8006a80:	3301      	adds	r3, #1
 8006a82:	72fb      	strb	r3, [r7, #11]
      break;
 8006a84:	bf00      	nop
  }

  if (err != 0U)
 8006a86:	7afb      	ldrb	r3, [r7, #11]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d11e      	bne.n	8006aca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	88db      	ldrh	r3, [r3, #6]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d016      	beq.n	8006ac2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006a94:	893b      	ldrh	r3, [r7, #8]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00e      	beq.n	8006ab8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	88da      	ldrh	r2, [r3, #6]
 8006a9e:	893b      	ldrh	r3, [r7, #8]
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	bf28      	it	cs
 8006aa4:	4613      	movcs	r3, r2
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006aaa:	893b      	ldrh	r3, [r7, #8]
 8006aac:	461a      	mov	r2, r3
 8006aae:	68f9      	ldr	r1, [r7, #12]
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fa5d 	bl	8006f70 <USBD_CtlSendData>
 8006ab6:	e009      	b.n	8006acc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006ab8:	6839      	ldr	r1, [r7, #0]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f9e7 	bl	8006e8e <USBD_CtlError>
 8006ac0:	e004      	b.n	8006acc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fa91 	bl	8006fea <USBD_CtlSendStatus>
 8006ac8:	e000      	b.n	8006acc <USBD_GetDescriptor+0x320>
    return;
 8006aca:	bf00      	nop
  }
}
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop

08006ad4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	889b      	ldrh	r3, [r3, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d131      	bne.n	8006b4a <USBD_SetAddress+0x76>
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	88db      	ldrh	r3, [r3, #6]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d12d      	bne.n	8006b4a <USBD_SetAddress+0x76>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	885b      	ldrh	r3, [r3, #2]
 8006af2:	2b7f      	cmp	r3, #127	; 0x7f
 8006af4:	d829      	bhi.n	8006b4a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	885b      	ldrh	r3, [r3, #2]
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b03      	cmp	r3, #3
 8006b0c:	d104      	bne.n	8006b18 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006b0e:	6839      	ldr	r1, [r7, #0]
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f9bc 	bl	8006e8e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b16:	e01d      	b.n	8006b54 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	7bfa      	ldrb	r2, [r7, #15]
 8006b1c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
 8006b22:	4619      	mov	r1, r3
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 ffb1 	bl	8007a8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fa5d 	bl	8006fea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d004      	beq.n	8006b40 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2202      	movs	r2, #2
 8006b3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b3e:	e009      	b.n	8006b54 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b48:	e004      	b.n	8006b54 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b4a:	6839      	ldr	r1, [r7, #0]
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f99e 	bl	8006e8e <USBD_CtlError>
  }
}
 8006b52:	bf00      	nop
 8006b54:	bf00      	nop
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	885b      	ldrh	r3, [r3, #2]
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	4b4e      	ldr	r3, [pc, #312]	; (8006cac <USBD_SetConfig+0x150>)
 8006b72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b74:	4b4d      	ldr	r3, [pc, #308]	; (8006cac <USBD_SetConfig+0x150>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d905      	bls.n	8006b88 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f985 	bl	8006e8e <USBD_CtlError>
    return USBD_FAIL;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e08c      	b.n	8006ca2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d002      	beq.n	8006b9a <USBD_SetConfig+0x3e>
 8006b94:	2b03      	cmp	r3, #3
 8006b96:	d029      	beq.n	8006bec <USBD_SetConfig+0x90>
 8006b98:	e075      	b.n	8006c86 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006b9a:	4b44      	ldr	r3, [pc, #272]	; (8006cac <USBD_SetConfig+0x150>)
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d020      	beq.n	8006be4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006ba2:	4b42      	ldr	r3, [pc, #264]	; (8006cac <USBD_SetConfig+0x150>)
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006bac:	4b3f      	ldr	r3, [pc, #252]	; (8006cac <USBD_SetConfig+0x150>)
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7fe ffbd 	bl	8005b32 <USBD_SetClassConfig>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d008      	beq.n	8006bd4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f962 	bl	8006e8e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2202      	movs	r2, #2
 8006bce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006bd2:	e065      	b.n	8006ca0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fa08 	bl	8006fea <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2203      	movs	r2, #3
 8006bde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006be2:	e05d      	b.n	8006ca0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fa00 	bl	8006fea <USBD_CtlSendStatus>
      break;
 8006bea:	e059      	b.n	8006ca0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006bec:	4b2f      	ldr	r3, [pc, #188]	; (8006cac <USBD_SetConfig+0x150>)
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d112      	bne.n	8006c1a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006bfc:	4b2b      	ldr	r3, [pc, #172]	; (8006cac <USBD_SetConfig+0x150>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	461a      	mov	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c06:	4b29      	ldr	r3, [pc, #164]	; (8006cac <USBD_SetConfig+0x150>)
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7fe ffac 	bl	8005b6a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f9e9 	bl	8006fea <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c18:	e042      	b.n	8006ca0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006c1a:	4b24      	ldr	r3, [pc, #144]	; (8006cac <USBD_SetConfig+0x150>)
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d02a      	beq.n	8006c7e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	4619      	mov	r1, r3
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f7fe ff9a 	bl	8005b6a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006c36:	4b1d      	ldr	r3, [pc, #116]	; (8006cac <USBD_SetConfig+0x150>)
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c40:	4b1a      	ldr	r3, [pc, #104]	; (8006cac <USBD_SetConfig+0x150>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	4619      	mov	r1, r3
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7fe ff73 	bl	8005b32 <USBD_SetClassConfig>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00f      	beq.n	8006c76 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006c56:	6839      	ldr	r1, [r7, #0]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f918 	bl	8006e8e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	4619      	mov	r1, r3
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7fe ff7f 	bl	8005b6a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006c74:	e014      	b.n	8006ca0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f9b7 	bl	8006fea <USBD_CtlSendStatus>
      break;
 8006c7c:	e010      	b.n	8006ca0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f9b3 	bl	8006fea <USBD_CtlSendStatus>
      break;
 8006c84:	e00c      	b.n	8006ca0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f900 	bl	8006e8e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c8e:	4b07      	ldr	r3, [pc, #28]	; (8006cac <USBD_SetConfig+0x150>)
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	4619      	mov	r1, r3
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7fe ff68 	bl	8005b6a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	73fb      	strb	r3, [r7, #15]
      break;
 8006c9e:	bf00      	nop
  }

  return ret;
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	200001cc 	.word	0x200001cc

08006cb0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	88db      	ldrh	r3, [r3, #6]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d004      	beq.n	8006ccc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006cc2:	6839      	ldr	r1, [r7, #0]
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f8e2 	bl	8006e8e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006cca:	e023      	b.n	8006d14 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	dc02      	bgt.n	8006cde <USBD_GetConfig+0x2e>
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	dc03      	bgt.n	8006ce4 <USBD_GetConfig+0x34>
 8006cdc:	e015      	b.n	8006d0a <USBD_GetConfig+0x5a>
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d00b      	beq.n	8006cfa <USBD_GetConfig+0x4a>
 8006ce2:	e012      	b.n	8006d0a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	3308      	adds	r3, #8
 8006cee:	2201      	movs	r2, #1
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f93c 	bl	8006f70 <USBD_CtlSendData>
        break;
 8006cf8:	e00c      	b.n	8006d14 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	2201      	movs	r2, #1
 8006d00:	4619      	mov	r1, r3
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f934 	bl	8006f70 <USBD_CtlSendData>
        break;
 8006d08:	e004      	b.n	8006d14 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006d0a:	6839      	ldr	r1, [r7, #0]
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f8be 	bl	8006e8e <USBD_CtlError>
        break;
 8006d12:	bf00      	nop
}
 8006d14:	bf00      	nop
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d81e      	bhi.n	8006d72 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	88db      	ldrh	r3, [r3, #6]
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d004      	beq.n	8006d46 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006d3c:	6839      	ldr	r1, [r7, #0]
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f8a5 	bl	8006e8e <USBD_CtlError>
        break;
 8006d44:	e01a      	b.n	8006d7c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d005      	beq.n	8006d62 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	f043 0202 	orr.w	r2, r3, #2
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	330c      	adds	r3, #12
 8006d66:	2202      	movs	r2, #2
 8006d68:	4619      	mov	r1, r3
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f900 	bl	8006f70 <USBD_CtlSendData>
      break;
 8006d70:	e004      	b.n	8006d7c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006d72:	6839      	ldr	r1, [r7, #0]
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f88a 	bl	8006e8e <USBD_CtlError>
      break;
 8006d7a:	bf00      	nop
  }
}
 8006d7c:	bf00      	nop
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	885b      	ldrh	r3, [r3, #2]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d107      	bne.n	8006da6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f923 	bl	8006fea <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006da4:	e013      	b.n	8006dce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	885b      	ldrh	r3, [r3, #2]
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d10b      	bne.n	8006dc6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	889b      	ldrh	r3, [r3, #4]
 8006db2:	0a1b      	lsrs	r3, r3, #8
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f913 	bl	8006fea <USBD_CtlSendStatus>
}
 8006dc4:	e003      	b.n	8006dce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f860 	bl	8006e8e <USBD_CtlError>
}
 8006dce:	bf00      	nop
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b082      	sub	sp, #8
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	3b01      	subs	r3, #1
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d80b      	bhi.n	8006e06 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	885b      	ldrh	r3, [r3, #2]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d10c      	bne.n	8006e10 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f8f3 	bl	8006fea <USBD_CtlSendStatus>
      }
      break;
 8006e04:	e004      	b.n	8006e10 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f840 	bl	8006e8e <USBD_CtlError>
      break;
 8006e0e:	e000      	b.n	8006e12 <USBD_ClrFeature+0x3c>
      break;
 8006e10:	bf00      	nop
  }
}
 8006e12:	bf00      	nop
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b084      	sub	sp, #16
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	781a      	ldrb	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	3301      	adds	r3, #1
 8006e34:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	781a      	ldrb	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	3301      	adds	r3, #1
 8006e42:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f7ff fa17 	bl	8006278 <SWAPBYTE>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	3301      	adds	r3, #1
 8006e56:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f7ff fa0a 	bl	8006278 <SWAPBYTE>
 8006e64:	4603      	mov	r3, r0
 8006e66:	461a      	mov	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	3301      	adds	r3, #1
 8006e76:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f7ff f9fd 	bl	8006278 <SWAPBYTE>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	461a      	mov	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	80da      	strh	r2, [r3, #6]
}
 8006e86:	bf00      	nop
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b082      	sub	sp, #8
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e98:	2180      	movs	r1, #128	; 0x80
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fd8c 	bl	80079b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fd88 	bl	80079b8 <USBD_LL_StallEP>
}
 8006ea8:	bf00      	nop
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d036      	beq.n	8006f34 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006eca:	6938      	ldr	r0, [r7, #16]
 8006ecc:	f000 f836 	bl	8006f3c <USBD_GetLen>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	005b      	lsls	r3, r3, #1
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006ede:	7dfb      	ldrb	r3, [r7, #23]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	7812      	ldrb	r2, [r2, #0]
 8006ee8:	701a      	strb	r2, [r3, #0]
  idx++;
 8006eea:	7dfb      	ldrb	r3, [r7, #23]
 8006eec:	3301      	adds	r3, #1
 8006eee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006ef0:	7dfb      	ldrb	r3, [r7, #23]
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	2203      	movs	r2, #3
 8006ef8:	701a      	strb	r2, [r3, #0]
  idx++;
 8006efa:	7dfb      	ldrb	r3, [r7, #23]
 8006efc:	3301      	adds	r3, #1
 8006efe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006f00:	e013      	b.n	8006f2a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006f02:	7dfb      	ldrb	r3, [r7, #23]
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	4413      	add	r3, r2
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	7812      	ldrb	r2, [r2, #0]
 8006f0c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	3301      	adds	r3, #1
 8006f12:	613b      	str	r3, [r7, #16]
    idx++;
 8006f14:	7dfb      	ldrb	r3, [r7, #23]
 8006f16:	3301      	adds	r3, #1
 8006f18:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006f1a:	7dfb      	ldrb	r3, [r7, #23]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	4413      	add	r3, r2
 8006f20:	2200      	movs	r2, #0
 8006f22:	701a      	strb	r2, [r3, #0]
    idx++;
 8006f24:	7dfb      	ldrb	r3, [r7, #23]
 8006f26:	3301      	adds	r3, #1
 8006f28:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1e7      	bne.n	8006f02 <USBD_GetString+0x52>
 8006f32:	e000      	b.n	8006f36 <USBD_GetString+0x86>
    return;
 8006f34:	bf00      	nop
  }
}
 8006f36:	3718      	adds	r7, #24
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f44:	2300      	movs	r3, #0
 8006f46:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006f4c:	e005      	b.n	8006f5a <USBD_GetLen+0x1e>
  {
    len++;
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
 8006f50:	3301      	adds	r3, #1
 8006f52:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	3301      	adds	r3, #1
 8006f58:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1f5      	bne.n	8006f4e <USBD_GetLen+0x12>
  }

  return len;
 8006f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3714      	adds	r7, #20
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	2100      	movs	r1, #0
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f000 fd97 	bl	8007aca <USBD_LL_Transmit>

  return USBD_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b084      	sub	sp, #16
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	60f8      	str	r0, [r7, #12]
 8006fae:	60b9      	str	r1, [r7, #8]
 8006fb0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f000 fd86 	bl	8007aca <USBD_LL_Transmit>

  return USBD_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	2100      	movs	r1, #0
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f000 fd96 	bl	8007b0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b082      	sub	sp, #8
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2204      	movs	r2, #4
 8006ff6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	2100      	movs	r1, #0
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fd62 	bl	8007aca <USBD_LL_Transmit>

  return USBD_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2205      	movs	r2, #5
 800701c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007020:	2300      	movs	r3, #0
 8007022:	2200      	movs	r2, #0
 8007024:	2100      	movs	r1, #0
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fd70 	bl	8007b0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
	...

08007038 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800703c:	2201      	movs	r2, #1
 800703e:	491b      	ldr	r1, [pc, #108]	; (80070ac <MX_USB_DEVICE_Init+0x74>)
 8007040:	481b      	ldr	r0, [pc, #108]	; (80070b0 <MX_USB_DEVICE_Init+0x78>)
 8007042:	f7fe fcf9 	bl	8005a38 <USBD_Init>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800704c:	f7f9 fb88 	bl	8000760 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_HID) != USBD_OK)
 8007050:	4918      	ldr	r1, [pc, #96]	; (80070b4 <MX_USB_DEVICE_Init+0x7c>)
 8007052:	4817      	ldr	r0, [pc, #92]	; (80070b0 <MX_USB_DEVICE_Init+0x78>)
 8007054:	f7fe fd20 	bl	8005a98 <USBD_RegisterClass>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800705e:	f7f9 fb7f 	bl	8000760 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8007062:	4813      	ldr	r0, [pc, #76]	; (80070b0 <MX_USB_DEVICE_Init+0x78>)
 8007064:	f7fe fd4e 	bl	8005b04 <USBD_Start>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d001      	beq.n	8007072 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800706e:	f7f9 fb77 	bl	8000760 <Error_Handler>
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007072:	2200      	movs	r2, #0
 8007074:	4910      	ldr	r1, [pc, #64]	; (80070b8 <MX_USB_DEVICE_Init+0x80>)
 8007076:	4811      	ldr	r0, [pc, #68]	; (80070bc <MX_USB_DEVICE_Init+0x84>)
 8007078:	f7fe fcde 	bl	8005a38 <USBD_Init>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <MX_USB_DEVICE_Init+0x4e>
  {
    Error_Handler();
 8007082:	f7f9 fb6d 	bl	8000760 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007086:	490b      	ldr	r1, [pc, #44]	; (80070b4 <MX_USB_DEVICE_Init+0x7c>)
 8007088:	480c      	ldr	r0, [pc, #48]	; (80070bc <MX_USB_DEVICE_Init+0x84>)
 800708a:	f7fe fd05 	bl	8005a98 <USBD_RegisterClass>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d001      	beq.n	8007098 <MX_USB_DEVICE_Init+0x60>
  {
    Error_Handler();
 8007094:	f7f9 fb64 	bl	8000760 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007098:	4808      	ldr	r0, [pc, #32]	; (80070bc <MX_USB_DEVICE_Init+0x84>)
 800709a:	f7fe fd33 	bl	8005b04 <USBD_Start>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <MX_USB_DEVICE_Init+0x70>
  {
    Error_Handler();
 80070a4:	f7f9 fb5c 	bl	8000760 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80070a8:	bf00      	nop
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	20000100 	.word	0x20000100
 80070b0:	200001d0 	.word	0x200001d0
 80070b4:	2000000c 	.word	0x2000000c
 80070b8:	200000c0 	.word	0x200000c0
 80070bc:	200004ac 	.word	0x200004ac

080070c0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	4603      	mov	r3, r0
 80070c8:	6039      	str	r1, [r7, #0]
 80070ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	2212      	movs	r2, #18
 80070d0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80070d2:	4b03      	ldr	r3, [pc, #12]	; (80070e0 <USBD_HS_DeviceDescriptor+0x20>)
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	20000120 	.word	0x20000120

080070e4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	4603      	mov	r3, r0
 80070ec:	6039      	str	r1, [r7, #0]
 80070ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	2204      	movs	r2, #4
 80070f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80070f6:	4b03      	ldr	r3, [pc, #12]	; (8007104 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	20000140 	.word	0x20000140

08007108 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	4603      	mov	r3, r0
 8007110:	6039      	str	r1, [r7, #0]
 8007112:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007114:	79fb      	ldrb	r3, [r7, #7]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d105      	bne.n	8007126 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	4907      	ldr	r1, [pc, #28]	; (800713c <USBD_HS_ProductStrDescriptor+0x34>)
 800711e:	4808      	ldr	r0, [pc, #32]	; (8007140 <USBD_HS_ProductStrDescriptor+0x38>)
 8007120:	f7ff fec6 	bl	8006eb0 <USBD_GetString>
 8007124:	e004      	b.n	8007130 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	4904      	ldr	r1, [pc, #16]	; (800713c <USBD_HS_ProductStrDescriptor+0x34>)
 800712a:	4805      	ldr	r0, [pc, #20]	; (8007140 <USBD_HS_ProductStrDescriptor+0x38>)
 800712c:	f7ff fec0 	bl	8006eb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007130:	4b02      	ldr	r3, [pc, #8]	; (800713c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8007132:	4618      	mov	r0, r3
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	20000788 	.word	0x20000788
 8007140:	08007ce4 	.word	0x08007ce4

08007144 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	4603      	mov	r3, r0
 800714c:	6039      	str	r1, [r7, #0]
 800714e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	4904      	ldr	r1, [pc, #16]	; (8007164 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8007154:	4804      	ldr	r0, [pc, #16]	; (8007168 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8007156:	f7ff feab 	bl	8006eb0 <USBD_GetString>
  return USBD_StrDesc;
 800715a:	4b02      	ldr	r3, [pc, #8]	; (8007164 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800715c:	4618      	mov	r0, r3
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	20000788 	.word	0x20000788
 8007168:	08007cfc 	.word	0x08007cfc

0800716c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	4603      	mov	r3, r0
 8007174:	6039      	str	r1, [r7, #0]
 8007176:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	221a      	movs	r2, #26
 800717c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800717e:	f000 f90b 	bl	8007398 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8007182:	4b02      	ldr	r3, [pc, #8]	; (800718c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8007184:	4618      	mov	r0, r3
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	20000144 	.word	0x20000144

08007190 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	4603      	mov	r3, r0
 8007198:	6039      	str	r1, [r7, #0]
 800719a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800719c:	79fb      	ldrb	r3, [r7, #7]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d105      	bne.n	80071ae <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	4907      	ldr	r1, [pc, #28]	; (80071c4 <USBD_HS_ConfigStrDescriptor+0x34>)
 80071a6:	4808      	ldr	r0, [pc, #32]	; (80071c8 <USBD_HS_ConfigStrDescriptor+0x38>)
 80071a8:	f7ff fe82 	bl	8006eb0 <USBD_GetString>
 80071ac:	e004      	b.n	80071b8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	4904      	ldr	r1, [pc, #16]	; (80071c4 <USBD_HS_ConfigStrDescriptor+0x34>)
 80071b2:	4805      	ldr	r0, [pc, #20]	; (80071c8 <USBD_HS_ConfigStrDescriptor+0x38>)
 80071b4:	f7ff fe7c 	bl	8006eb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071b8:	4b02      	ldr	r3, [pc, #8]	; (80071c4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	20000788 	.word	0x20000788
 80071c8:	08007d10 	.word	0x08007d10

080071cc <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	4603      	mov	r3, r0
 80071d4:	6039      	str	r1, [r7, #0]
 80071d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071d8:	79fb      	ldrb	r3, [r7, #7]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d105      	bne.n	80071ea <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	4907      	ldr	r1, [pc, #28]	; (8007200 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80071e2:	4808      	ldr	r0, [pc, #32]	; (8007204 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80071e4:	f7ff fe64 	bl	8006eb0 <USBD_GetString>
 80071e8:	e004      	b.n	80071f4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	4904      	ldr	r1, [pc, #16]	; (8007200 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80071ee:	4805      	ldr	r0, [pc, #20]	; (8007204 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80071f0:	f7ff fe5e 	bl	8006eb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071f4:	4b02      	ldr	r3, [pc, #8]	; (8007200 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	20000788 	.word	0x20000788
 8007204:	08007d1c 	.word	0x08007d1c

08007208 <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	4603      	mov	r3, r0
 8007210:	6039      	str	r1, [r7, #0]
 8007212:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	220c      	movs	r2, #12
 8007218:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 800721a:	4b03      	ldr	r3, [pc, #12]	; (8007228 <USBD_HS_USR_BOSDescriptor+0x20>)
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	20000134 	.word	0x20000134

0800722c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	4603      	mov	r3, r0
 8007234:	6039      	str	r1, [r7, #0]
 8007236:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	2212      	movs	r2, #18
 800723c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800723e:	4b03      	ldr	r3, [pc, #12]	; (800724c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007240:	4618      	mov	r0, r3
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	200000e0 	.word	0x200000e0

08007250 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	4603      	mov	r3, r0
 8007258:	6039      	str	r1, [r7, #0]
 800725a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	2204      	movs	r2, #4
 8007260:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007262:	4b03      	ldr	r3, [pc, #12]	; (8007270 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007264:	4618      	mov	r0, r3
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	20000140 	.word	0x20000140

08007274 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	4603      	mov	r3, r0
 800727c:	6039      	str	r1, [r7, #0]
 800727e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007280:	79fb      	ldrb	r3, [r7, #7]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d105      	bne.n	8007292 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	4907      	ldr	r1, [pc, #28]	; (80072a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800728a:	4808      	ldr	r0, [pc, #32]	; (80072ac <USBD_FS_ProductStrDescriptor+0x38>)
 800728c:	f7ff fe10 	bl	8006eb0 <USBD_GetString>
 8007290:	e004      	b.n	800729c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	4904      	ldr	r1, [pc, #16]	; (80072a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007296:	4805      	ldr	r0, [pc, #20]	; (80072ac <USBD_FS_ProductStrDescriptor+0x38>)
 8007298:	f7ff fe0a 	bl	8006eb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800729c:	4b02      	ldr	r3, [pc, #8]	; (80072a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	20000788 	.word	0x20000788
 80072ac:	08007ce4 	.word	0x08007ce4

080072b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	4603      	mov	r3, r0
 80072b8:	6039      	str	r1, [r7, #0]
 80072ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80072bc:	683a      	ldr	r2, [r7, #0]
 80072be:	4904      	ldr	r1, [pc, #16]	; (80072d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80072c0:	4804      	ldr	r0, [pc, #16]	; (80072d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80072c2:	f7ff fdf5 	bl	8006eb0 <USBD_GetString>
  return USBD_StrDesc;
 80072c6:	4b02      	ldr	r3, [pc, #8]	; (80072d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	20000788 	.word	0x20000788
 80072d4:	08007cfc 	.word	0x08007cfc

080072d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	4603      	mov	r3, r0
 80072e0:	6039      	str	r1, [r7, #0]
 80072e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	221a      	movs	r2, #26
 80072e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80072ea:	f000 f855 	bl	8007398 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80072ee:	4b02      	ldr	r3, [pc, #8]	; (80072f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	20000144 	.word	0x20000144

080072fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	4603      	mov	r3, r0
 8007304:	6039      	str	r1, [r7, #0]
 8007306:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007308:	79fb      	ldrb	r3, [r7, #7]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d105      	bne.n	800731a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	4907      	ldr	r1, [pc, #28]	; (8007330 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007312:	4808      	ldr	r0, [pc, #32]	; (8007334 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007314:	f7ff fdcc 	bl	8006eb0 <USBD_GetString>
 8007318:	e004      	b.n	8007324 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	4904      	ldr	r1, [pc, #16]	; (8007330 <USBD_FS_ConfigStrDescriptor+0x34>)
 800731e:	4805      	ldr	r0, [pc, #20]	; (8007334 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007320:	f7ff fdc6 	bl	8006eb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007324:	4b02      	ldr	r3, [pc, #8]	; (8007330 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007326:	4618      	mov	r0, r3
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	20000788 	.word	0x20000788
 8007334:	08007d10 	.word	0x08007d10

08007338 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	4603      	mov	r3, r0
 8007340:	6039      	str	r1, [r7, #0]
 8007342:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007344:	79fb      	ldrb	r3, [r7, #7]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d105      	bne.n	8007356 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	4907      	ldr	r1, [pc, #28]	; (800736c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800734e:	4808      	ldr	r0, [pc, #32]	; (8007370 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007350:	f7ff fdae 	bl	8006eb0 <USBD_GetString>
 8007354:	e004      	b.n	8007360 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	4904      	ldr	r1, [pc, #16]	; (800736c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800735a:	4805      	ldr	r0, [pc, #20]	; (8007370 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800735c:	f7ff fda8 	bl	8006eb0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007360:	4b02      	ldr	r3, [pc, #8]	; (800736c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007362:	4618      	mov	r0, r3
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	20000788 	.word	0x20000788
 8007370:	08007d1c 	.word	0x08007d1c

08007374 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	4603      	mov	r3, r0
 800737c:	6039      	str	r1, [r7, #0]
 800737e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	220c      	movs	r2, #12
 8007384:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007386:	4b03      	ldr	r3, [pc, #12]	; (8007394 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007388:	4618      	mov	r0, r3
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	200000f4 	.word	0x200000f4

08007398 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800739e:	4b0f      	ldr	r3, [pc, #60]	; (80073dc <Get_SerialNum+0x44>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80073a4:	4b0e      	ldr	r3, [pc, #56]	; (80073e0 <Get_SerialNum+0x48>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80073aa:	4b0e      	ldr	r3, [pc, #56]	; (80073e4 <Get_SerialNum+0x4c>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4413      	add	r3, r2
 80073b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d009      	beq.n	80073d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80073be:	2208      	movs	r2, #8
 80073c0:	4909      	ldr	r1, [pc, #36]	; (80073e8 <Get_SerialNum+0x50>)
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f000 f814 	bl	80073f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80073c8:	2204      	movs	r2, #4
 80073ca:	4908      	ldr	r1, [pc, #32]	; (80073ec <Get_SerialNum+0x54>)
 80073cc:	68b8      	ldr	r0, [r7, #8]
 80073ce:	f000 f80f 	bl	80073f0 <IntToUnicode>
  }
}
 80073d2:	bf00      	nop
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	1fff7a10 	.word	0x1fff7a10
 80073e0:	1fff7a14 	.word	0x1fff7a14
 80073e4:	1fff7a18 	.word	0x1fff7a18
 80073e8:	20000146 	.word	0x20000146
 80073ec:	20000156 	.word	0x20000156

080073f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b087      	sub	sp, #28
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	4613      	mov	r3, r2
 80073fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80073fe:	2300      	movs	r3, #0
 8007400:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007402:	2300      	movs	r3, #0
 8007404:	75fb      	strb	r3, [r7, #23]
 8007406:	e027      	b.n	8007458 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	0f1b      	lsrs	r3, r3, #28
 800740c:	2b09      	cmp	r3, #9
 800740e:	d80b      	bhi.n	8007428 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	0f1b      	lsrs	r3, r3, #28
 8007414:	b2da      	uxtb	r2, r3
 8007416:	7dfb      	ldrb	r3, [r7, #23]
 8007418:	005b      	lsls	r3, r3, #1
 800741a:	4619      	mov	r1, r3
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	440b      	add	r3, r1
 8007420:	3230      	adds	r2, #48	; 0x30
 8007422:	b2d2      	uxtb	r2, r2
 8007424:	701a      	strb	r2, [r3, #0]
 8007426:	e00a      	b.n	800743e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	0f1b      	lsrs	r3, r3, #28
 800742c:	b2da      	uxtb	r2, r3
 800742e:	7dfb      	ldrb	r3, [r7, #23]
 8007430:	005b      	lsls	r3, r3, #1
 8007432:	4619      	mov	r1, r3
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	440b      	add	r3, r1
 8007438:	3237      	adds	r2, #55	; 0x37
 800743a:	b2d2      	uxtb	r2, r2
 800743c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	011b      	lsls	r3, r3, #4
 8007442:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007444:	7dfb      	ldrb	r3, [r7, #23]
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	3301      	adds	r3, #1
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	4413      	add	r3, r2
 800744e:	2200      	movs	r2, #0
 8007450:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007452:	7dfb      	ldrb	r3, [r7, #23]
 8007454:	3301      	adds	r3, #1
 8007456:	75fb      	strb	r3, [r7, #23]
 8007458:	7dfa      	ldrb	r2, [r7, #23]
 800745a:	79fb      	ldrb	r3, [r7, #7]
 800745c:	429a      	cmp	r2, r3
 800745e:	d3d3      	bcc.n	8007408 <IntToUnicode+0x18>
  }
}
 8007460:	bf00      	nop
 8007462:	bf00      	nop
 8007464:	371c      	adds	r7, #28
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
	...

08007470 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b0a2      	sub	sp, #136	; 0x88
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007478:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800747c:	2200      	movs	r2, #0
 800747e:	601a      	str	r2, [r3, #0]
 8007480:	605a      	str	r2, [r3, #4]
 8007482:	609a      	str	r2, [r3, #8]
 8007484:	60da      	str	r2, [r3, #12]
 8007486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007488:	f107 0318 	add.w	r3, r7, #24
 800748c:	225c      	movs	r2, #92	; 0x5c
 800748e:	2100      	movs	r1, #0
 8007490:	4618      	mov	r0, r3
 8007492:	f000 fc13 	bl	8007cbc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800749e:	d14c      	bne.n	800753a <HAL_PCD_MspInit+0xca>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80074a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80074a6:	2300      	movs	r3, #0
 80074a8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80074aa:	f107 0318 	add.w	r3, r7, #24
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fb f966 	bl	8002780 <HAL_RCCEx_PeriphCLKConfig>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80074ba:	f7f9 f951 	bl	8000760 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074be:	2300      	movs	r3, #0
 80074c0:	617b      	str	r3, [r7, #20]
 80074c2:	4b45      	ldr	r3, [pc, #276]	; (80075d8 <HAL_PCD_MspInit+0x168>)
 80074c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c6:	4a44      	ldr	r2, [pc, #272]	; (80075d8 <HAL_PCD_MspInit+0x168>)
 80074c8:	f043 0301 	orr.w	r3, r3, #1
 80074cc:	6313      	str	r3, [r2, #48]	; 0x30
 80074ce:	4b42      	ldr	r3, [pc, #264]	; (80075d8 <HAL_PCD_MspInit+0x168>)
 80074d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	617b      	str	r3, [r7, #20]
 80074d8:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80074da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80074de:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074e0:	2302      	movs	r3, #2
 80074e2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074e4:	2300      	movs	r3, #0
 80074e6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074e8:	2303      	movs	r3, #3
 80074ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80074ee:	230a      	movs	r3, #10
 80074f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80074f8:	4619      	mov	r1, r3
 80074fa:	4838      	ldr	r0, [pc, #224]	; (80075dc <HAL_PCD_MspInit+0x16c>)
 80074fc:	f7f9 fbc8 	bl	8000c90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007500:	4b35      	ldr	r3, [pc, #212]	; (80075d8 <HAL_PCD_MspInit+0x168>)
 8007502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007504:	4a34      	ldr	r2, [pc, #208]	; (80075d8 <HAL_PCD_MspInit+0x168>)
 8007506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800750a:	6353      	str	r3, [r2, #52]	; 0x34
 800750c:	2300      	movs	r3, #0
 800750e:	613b      	str	r3, [r7, #16]
 8007510:	4b31      	ldr	r3, [pc, #196]	; (80075d8 <HAL_PCD_MspInit+0x168>)
 8007512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007514:	4a30      	ldr	r2, [pc, #192]	; (80075d8 <HAL_PCD_MspInit+0x168>)
 8007516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800751a:	6453      	str	r3, [r2, #68]	; 0x44
 800751c:	4b2e      	ldr	r3, [pc, #184]	; (80075d8 <HAL_PCD_MspInit+0x168>)
 800751e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007524:	613b      	str	r3, [r7, #16]
 8007526:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007528:	2200      	movs	r2, #0
 800752a:	2100      	movs	r1, #0
 800752c:	2043      	movs	r0, #67	; 0x43
 800752e:	f7f9 fb78 	bl	8000c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007532:	2043      	movs	r0, #67	; 0x43
 8007534:	f7f9 fb91 	bl	8000c5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8007538:	e04a      	b.n	80075d0 <HAL_PCD_MspInit+0x160>
  else if(pcdHandle->Instance==USB_OTG_HS)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a28      	ldr	r2, [pc, #160]	; (80075e0 <HAL_PCD_MspInit+0x170>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d145      	bne.n	80075d0 <HAL_PCD_MspInit+0x160>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8007544:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007548:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800754a:	2300      	movs	r3, #0
 800754c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800754e:	f107 0318 	add.w	r3, r7, #24
 8007552:	4618      	mov	r0, r3
 8007554:	f7fb f914 	bl	8002780 <HAL_RCCEx_PeriphCLKConfig>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <HAL_PCD_MspInit+0xf2>
      Error_Handler();
 800755e:	f7f9 f8ff 	bl	8000760 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007562:	2300      	movs	r3, #0
 8007564:	60fb      	str	r3, [r7, #12]
 8007566:	4b1c      	ldr	r3, [pc, #112]	; (80075d8 <HAL_PCD_MspInit+0x168>)
 8007568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756a:	4a1b      	ldr	r2, [pc, #108]	; (80075d8 <HAL_PCD_MspInit+0x168>)
 800756c:	f043 0302 	orr.w	r3, r3, #2
 8007570:	6313      	str	r3, [r2, #48]	; 0x30
 8007572:	4b19      	ldr	r3, [pc, #100]	; (80075d8 <HAL_PCD_MspInit+0x168>)
 8007574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	60fb      	str	r3, [r7, #12]
 800757c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800757e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007582:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007584:	2302      	movs	r3, #2
 8007586:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007588:	2300      	movs	r3, #0
 800758a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800758c:	2303      	movs	r3, #3
 800758e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8007592:	230c      	movs	r3, #12
 8007594:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007598:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800759c:	4619      	mov	r1, r3
 800759e:	4811      	ldr	r0, [pc, #68]	; (80075e4 <HAL_PCD_MspInit+0x174>)
 80075a0:	f7f9 fb76 	bl	8000c90 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80075a4:	2300      	movs	r3, #0
 80075a6:	60bb      	str	r3, [r7, #8]
 80075a8:	4b0b      	ldr	r3, [pc, #44]	; (80075d8 <HAL_PCD_MspInit+0x168>)
 80075aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ac:	4a0a      	ldr	r2, [pc, #40]	; (80075d8 <HAL_PCD_MspInit+0x168>)
 80075ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075b2:	6313      	str	r3, [r2, #48]	; 0x30
 80075b4:	4b08      	ldr	r3, [pc, #32]	; (80075d8 <HAL_PCD_MspInit+0x168>)
 80075b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075bc:	60bb      	str	r3, [r7, #8]
 80075be:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80075c0:	2200      	movs	r2, #0
 80075c2:	2100      	movs	r1, #0
 80075c4:	204d      	movs	r0, #77	; 0x4d
 80075c6:	f7f9 fb2c 	bl	8000c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80075ca:	204d      	movs	r0, #77	; 0x4d
 80075cc:	f7f9 fb45 	bl	8000c5a <HAL_NVIC_EnableIRQ>
}
 80075d0:	bf00      	nop
 80075d2:	3788      	adds	r7, #136	; 0x88
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	40023800 	.word	0x40023800
 80075dc:	40020000 	.word	0x40020000
 80075e0:	40040000 	.word	0x40040000
 80075e4:	40020400 	.word	0x40020400

080075e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80075fc:	4619      	mov	r1, r3
 80075fe:	4610      	mov	r0, r2
 8007600:	f7fe facd 	bl	8005b9e <USBD_LL_SetupStage>
}
 8007604:	bf00      	nop
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	460b      	mov	r3, r1
 8007616:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800761e:	78fa      	ldrb	r2, [r7, #3]
 8007620:	6879      	ldr	r1, [r7, #4]
 8007622:	4613      	mov	r3, r2
 8007624:	00db      	lsls	r3, r3, #3
 8007626:	4413      	add	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	440b      	add	r3, r1
 800762c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	78fb      	ldrb	r3, [r7, #3]
 8007634:	4619      	mov	r1, r3
 8007636:	f7fe fb07 	bl	8005c48 <USBD_LL_DataOutStage>
}
 800763a:	bf00      	nop
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b082      	sub	sp, #8
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	460b      	mov	r3, r1
 800764c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007654:	78fa      	ldrb	r2, [r7, #3]
 8007656:	6879      	ldr	r1, [r7, #4]
 8007658:	4613      	mov	r3, r2
 800765a:	00db      	lsls	r3, r3, #3
 800765c:	4413      	add	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	440b      	add	r3, r1
 8007662:	334c      	adds	r3, #76	; 0x4c
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	78fb      	ldrb	r3, [r7, #3]
 8007668:	4619      	mov	r1, r3
 800766a:	f7fe fba0 	bl	8005dae <USBD_LL_DataInStage>
}
 800766e:	bf00      	nop
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b082      	sub	sp, #8
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007684:	4618      	mov	r0, r3
 8007686:	f7fe fcd4 	bl	8006032 <USBD_LL_SOF>
}
 800768a:	bf00      	nop
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b084      	sub	sp, #16
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800769a:	2301      	movs	r3, #1
 800769c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d102      	bne.n	80076ac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80076a6:	2300      	movs	r3, #0
 80076a8:	73fb      	strb	r3, [r7, #15]
 80076aa:	e008      	b.n	80076be <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d102      	bne.n	80076ba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80076b4:	2301      	movs	r3, #1
 80076b6:	73fb      	strb	r3, [r7, #15]
 80076b8:	e001      	b.n	80076be <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80076ba:	f7f9 f851 	bl	8000760 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80076c4:	7bfa      	ldrb	r2, [r7, #15]
 80076c6:	4611      	mov	r1, r2
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7fe fc74 	bl	8005fb6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fe fc1c 	bl	8005f12 <USBD_LL_Reset>
}
 80076da:	bf00      	nop
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
	...

080076e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fe fc6f 	bl	8005fd6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	6812      	ldr	r2, [r2, #0]
 8007706:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800770a:	f043 0301 	orr.w	r3, r3, #1
 800770e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a1b      	ldr	r3, [r3, #32]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d005      	beq.n	8007724 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007718:	4b04      	ldr	r3, [pc, #16]	; (800772c <HAL_PCD_SuspendCallback+0x48>)
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	4a03      	ldr	r2, [pc, #12]	; (800772c <HAL_PCD_SuspendCallback+0x48>)
 800771e:	f043 0306 	orr.w	r3, r3, #6
 8007722:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007724:	bf00      	nop
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	e000ed00 	.word	0xe000ed00

08007730 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800773e:	4618      	mov	r0, r3
 8007740:	f7fe fc5f 	bl	8006002 <USBD_LL_Resume>
}
 8007744:	bf00      	nop
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	460b      	mov	r3, r1
 8007756:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800775e:	78fa      	ldrb	r2, [r7, #3]
 8007760:	4611      	mov	r1, r2
 8007762:	4618      	mov	r0, r3
 8007764:	f7fe fcb7 	bl	80060d6 <USBD_LL_IsoOUTIncomplete>
}
 8007768:	bf00      	nop
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	460b      	mov	r3, r1
 800777a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007782:	78fa      	ldrb	r2, [r7, #3]
 8007784:	4611      	mov	r1, r2
 8007786:	4618      	mov	r0, r3
 8007788:	f7fe fc73 	bl	8006072 <USBD_LL_IsoINIncomplete>
}
 800778c:	bf00      	nop
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fe fcc9 	bl	800613a <USBD_LL_DevConnected>
}
 80077a8:	bf00      	nop
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80077be:	4618      	mov	r0, r3
 80077c0:	f7fe fcc6 	bl	8006150 <USBD_LL_DevDisconnected>
}
 80077c4:	bf00      	nop
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d13c      	bne.n	8007856 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80077dc:	4a43      	ldr	r2, [pc, #268]	; (80078ec <USBD_LL_Init+0x120>)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a41      	ldr	r2, [pc, #260]	; (80078ec <USBD_LL_Init+0x120>)
 80077e8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80077ec:	4b3f      	ldr	r3, [pc, #252]	; (80078ec <USBD_LL_Init+0x120>)
 80077ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80077f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80077f4:	4b3d      	ldr	r3, [pc, #244]	; (80078ec <USBD_LL_Init+0x120>)
 80077f6:	2206      	movs	r2, #6
 80077f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80077fa:	4b3c      	ldr	r3, [pc, #240]	; (80078ec <USBD_LL_Init+0x120>)
 80077fc:	2202      	movs	r2, #2
 80077fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007800:	4b3a      	ldr	r3, [pc, #232]	; (80078ec <USBD_LL_Init+0x120>)
 8007802:	2200      	movs	r2, #0
 8007804:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007806:	4b39      	ldr	r3, [pc, #228]	; (80078ec <USBD_LL_Init+0x120>)
 8007808:	2202      	movs	r2, #2
 800780a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800780c:	4b37      	ldr	r3, [pc, #220]	; (80078ec <USBD_LL_Init+0x120>)
 800780e:	2200      	movs	r2, #0
 8007810:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007812:	4b36      	ldr	r3, [pc, #216]	; (80078ec <USBD_LL_Init+0x120>)
 8007814:	2200      	movs	r2, #0
 8007816:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007818:	4b34      	ldr	r3, [pc, #208]	; (80078ec <USBD_LL_Init+0x120>)
 800781a:	2200      	movs	r2, #0
 800781c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800781e:	4b33      	ldr	r3, [pc, #204]	; (80078ec <USBD_LL_Init+0x120>)
 8007820:	2200      	movs	r2, #0
 8007822:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007824:	4b31      	ldr	r3, [pc, #196]	; (80078ec <USBD_LL_Init+0x120>)
 8007826:	2200      	movs	r2, #0
 8007828:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800782a:	4830      	ldr	r0, [pc, #192]	; (80078ec <USBD_LL_Init+0x120>)
 800782c:	f7f9 fbdd 	bl	8000fea <HAL_PCD_Init>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007836:	f7f8 ff93 	bl	8000760 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800783a:	2180      	movs	r1, #128	; 0x80
 800783c:	482b      	ldr	r0, [pc, #172]	; (80078ec <USBD_LL_Init+0x120>)
 800783e:	f7fa fe50 	bl	80024e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007842:	2240      	movs	r2, #64	; 0x40
 8007844:	2100      	movs	r1, #0
 8007846:	4829      	ldr	r0, [pc, #164]	; (80078ec <USBD_LL_Init+0x120>)
 8007848:	f7fa fe04 	bl	8002454 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800784c:	2280      	movs	r2, #128	; 0x80
 800784e:	2101      	movs	r1, #1
 8007850:	4826      	ldr	r0, [pc, #152]	; (80078ec <USBD_LL_Init+0x120>)
 8007852:	f7fa fdff 	bl	8002454 <HAL_PCDEx_SetTxFiFo>
  }
  if (pdev->id == DEVICE_HS) {
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d140      	bne.n	80078e0 <USBD_LL_Init+0x114>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800785e:	4a24      	ldr	r2, [pc, #144]	; (80078f0 <USBD_LL_Init+0x124>)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a21      	ldr	r2, [pc, #132]	; (80078f0 <USBD_LL_Init+0x124>)
 800786a:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800786e:	4b20      	ldr	r3, [pc, #128]	; (80078f0 <USBD_LL_Init+0x124>)
 8007870:	4a20      	ldr	r2, [pc, #128]	; (80078f4 <USBD_LL_Init+0x128>)
 8007872:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 8007874:	4b1e      	ldr	r3, [pc, #120]	; (80078f0 <USBD_LL_Init+0x124>)
 8007876:	2208      	movs	r2, #8
 8007878:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800787a:	4b1d      	ldr	r3, [pc, #116]	; (80078f0 <USBD_LL_Init+0x124>)
 800787c:	2202      	movs	r2, #2
 800787e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8007880:	4b1b      	ldr	r3, [pc, #108]	; (80078f0 <USBD_LL_Init+0x124>)
 8007882:	2200      	movs	r2, #0
 8007884:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8007886:	4b1a      	ldr	r3, [pc, #104]	; (80078f0 <USBD_LL_Init+0x124>)
 8007888:	2202      	movs	r2, #2
 800788a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800788c:	4b18      	ldr	r3, [pc, #96]	; (80078f0 <USBD_LL_Init+0x124>)
 800788e:	2200      	movs	r2, #0
 8007890:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8007892:	4b17      	ldr	r3, [pc, #92]	; (80078f0 <USBD_LL_Init+0x124>)
 8007894:	2200      	movs	r2, #0
 8007896:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8007898:	4b15      	ldr	r3, [pc, #84]	; (80078f0 <USBD_LL_Init+0x124>)
 800789a:	2200      	movs	r2, #0
 800789c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800789e:	4b14      	ldr	r3, [pc, #80]	; (80078f0 <USBD_LL_Init+0x124>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80078a4:	4b12      	ldr	r3, [pc, #72]	; (80078f0 <USBD_LL_Init+0x124>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80078aa:	4b11      	ldr	r3, [pc, #68]	; (80078f0 <USBD_LL_Init+0x124>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80078b0:	480f      	ldr	r0, [pc, #60]	; (80078f0 <USBD_LL_Init+0x124>)
 80078b2:	f7f9 fb9a 	bl	8000fea <HAL_PCD_Init>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <USBD_LL_Init+0xf4>
  {
    Error_Handler( );
 80078bc:	f7f8 ff50 	bl	8000760 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80078c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80078c4:	480a      	ldr	r0, [pc, #40]	; (80078f0 <USBD_LL_Init+0x124>)
 80078c6:	f7fa fe0c 	bl	80024e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80078ca:	2280      	movs	r2, #128	; 0x80
 80078cc:	2100      	movs	r1, #0
 80078ce:	4808      	ldr	r0, [pc, #32]	; (80078f0 <USBD_LL_Init+0x124>)
 80078d0:	f7fa fdc0 	bl	8002454 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80078d4:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80078d8:	2101      	movs	r1, #1
 80078da:	4805      	ldr	r0, [pc, #20]	; (80078f0 <USBD_LL_Init+0x124>)
 80078dc:	f7fa fdba 	bl	8002454 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20000988 	.word	0x20000988
 80078f0:	20000e94 	.word	0x20000e94
 80078f4:	40040000 	.word	0x40040000

080078f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007900:	2300      	movs	r3, #0
 8007902:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007904:	2300      	movs	r3, #0
 8007906:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800790e:	4618      	mov	r0, r3
 8007910:	f7f9 fc8f 	bl	8001232 <HAL_PCD_Start>
 8007914:	4603      	mov	r3, r0
 8007916:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007918:	7bfb      	ldrb	r3, [r7, #15]
 800791a:	4618      	mov	r0, r3
 800791c:	f000 f97e 	bl	8007c1c <USBD_Get_USB_Status>
 8007920:	4603      	mov	r3, r0
 8007922:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007924:	7bbb      	ldrb	r3, [r7, #14]
}
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b084      	sub	sp, #16
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	4608      	mov	r0, r1
 8007938:	4611      	mov	r1, r2
 800793a:	461a      	mov	r2, r3
 800793c:	4603      	mov	r3, r0
 800793e:	70fb      	strb	r3, [r7, #3]
 8007940:	460b      	mov	r3, r1
 8007942:	70bb      	strb	r3, [r7, #2]
 8007944:	4613      	mov	r3, r2
 8007946:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007948:	2300      	movs	r3, #0
 800794a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800794c:	2300      	movs	r3, #0
 800794e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007956:	78bb      	ldrb	r3, [r7, #2]
 8007958:	883a      	ldrh	r2, [r7, #0]
 800795a:	78f9      	ldrb	r1, [r7, #3]
 800795c:	f7fa f98d 	bl	8001c7a <HAL_PCD_EP_Open>
 8007960:	4603      	mov	r3, r0
 8007962:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007964:	7bfb      	ldrb	r3, [r7, #15]
 8007966:	4618      	mov	r0, r3
 8007968:	f000 f958 	bl	8007c1c <USBD_Get_USB_Status>
 800796c:	4603      	mov	r3, r0
 800796e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007970:	7bbb      	ldrb	r3, [r7, #14]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b084      	sub	sp, #16
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	460b      	mov	r3, r1
 8007984:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800798a:	2300      	movs	r3, #0
 800798c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007994:	78fa      	ldrb	r2, [r7, #3]
 8007996:	4611      	mov	r1, r2
 8007998:	4618      	mov	r0, r3
 800799a:	f7fa f9d6 	bl	8001d4a <HAL_PCD_EP_Close>
 800799e:	4603      	mov	r3, r0
 80079a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f000 f939 	bl	8007c1c <USBD_Get_USB_Status>
 80079aa:	4603      	mov	r3, r0
 80079ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	460b      	mov	r3, r1
 80079c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079c4:	2300      	movs	r3, #0
 80079c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80079d2:	78fa      	ldrb	r2, [r7, #3]
 80079d4:	4611      	mov	r1, r2
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fa fa96 	bl	8001f08 <HAL_PCD_EP_SetStall>
 80079dc:	4603      	mov	r3, r0
 80079de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 f91a 	bl	8007c1c <USBD_Get_USB_Status>
 80079e8:	4603      	mov	r3, r0
 80079ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b084      	sub	sp, #16
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
 80079fe:	460b      	mov	r3, r1
 8007a00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a02:	2300      	movs	r3, #0
 8007a04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a10:	78fa      	ldrb	r2, [r7, #3]
 8007a12:	4611      	mov	r1, r2
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7fa fadb 	bl	8001fd0 <HAL_PCD_EP_ClrStall>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
 8007a20:	4618      	mov	r0, r3
 8007a22:	f000 f8fb 	bl	8007c1c <USBD_Get_USB_Status>
 8007a26:	4603      	mov	r3, r0
 8007a28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	da0b      	bge.n	8007a68 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a50:	78fb      	ldrb	r3, [r7, #3]
 8007a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a56:	68f9      	ldr	r1, [r7, #12]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	4413      	add	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	440b      	add	r3, r1
 8007a62:	333e      	adds	r3, #62	; 0x3e
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	e00b      	b.n	8007a80 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a68:	78fb      	ldrb	r3, [r7, #3]
 8007a6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a6e:	68f9      	ldr	r1, [r7, #12]
 8007a70:	4613      	mov	r3, r2
 8007a72:	00db      	lsls	r3, r3, #3
 8007a74:	4413      	add	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	440b      	add	r3, r1
 8007a7a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007a7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007aa6:	78fa      	ldrb	r2, [r7, #3]
 8007aa8:	4611      	mov	r1, r2
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fa f8c0 	bl	8001c30 <HAL_PCD_SetAddress>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 f8b0 	bl	8007c1c <USBD_Get_USB_Status>
 8007abc:	4603      	mov	r3, r0
 8007abe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b086      	sub	sp, #24
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	60f8      	str	r0, [r7, #12]
 8007ad2:	607a      	str	r2, [r7, #4]
 8007ad4:	603b      	str	r3, [r7, #0]
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ada:	2300      	movs	r3, #0
 8007adc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007ae8:	7af9      	ldrb	r1, [r7, #11]
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	f7fa f9c1 	bl	8001e74 <HAL_PCD_EP_Transmit>
 8007af2:	4603      	mov	r3, r0
 8007af4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007af6:	7dfb      	ldrb	r3, [r7, #23]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f000 f88f 	bl	8007c1c <USBD_Get_USB_Status>
 8007afe:	4603      	mov	r3, r0
 8007b00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b02:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	607a      	str	r2, [r7, #4]
 8007b16:	603b      	str	r3, [r7, #0]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007b2a:	7af9      	ldrb	r1, [r7, #11]
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	f7fa f955 	bl	8001dde <HAL_PCD_EP_Receive>
 8007b34:	4603      	mov	r3, r0
 8007b36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b38:	7dfb      	ldrb	r3, [r7, #23]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f000 f86e 	bl	8007c1c <USBD_Get_USB_Status>
 8007b40:	4603      	mov	r3, r0
 8007b42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b44:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
	...

08007b50 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007b5c:	78fb      	ldrb	r3, [r7, #3]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d002      	beq.n	8007b68 <HAL_PCDEx_LPM_Callback+0x18>
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d01f      	beq.n	8007ba6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007b66:	e03b      	b.n	8007be0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a1b      	ldr	r3, [r3, #32]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d007      	beq.n	8007b80 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8007b70:	f7f8 fcf2 	bl	8000558 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b74:	4b1c      	ldr	r3, [pc, #112]	; (8007be8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	4a1b      	ldr	r2, [pc, #108]	; (8007be8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007b7a:	f023 0306 	bic.w	r3, r3, #6
 8007b7e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	6812      	ldr	r2, [r2, #0]
 8007b8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b92:	f023 0301 	bic.w	r3, r3, #1
 8007b96:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fe fa2f 	bl	8006002 <USBD_LL_Resume>
    break;
 8007ba4:	e01c      	b.n	8007be0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	6812      	ldr	r2, [r2, #0]
 8007bb4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bb8:	f043 0301 	orr.w	r3, r3, #1
 8007bbc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7fe fa06 	bl	8005fd6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d005      	beq.n	8007bde <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bd2:	4b05      	ldr	r3, [pc, #20]	; (8007be8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	4a04      	ldr	r2, [pc, #16]	; (8007be8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007bd8:	f043 0306 	orr.w	r3, r3, #6
 8007bdc:	6113      	str	r3, [r2, #16]
    break;
 8007bde:	bf00      	nop
}
 8007be0:	bf00      	nop
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	e000ed00 	.word	0xe000ed00

08007bec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007bf4:	4b03      	ldr	r3, [pc, #12]	; (8007c04 <USBD_static_malloc+0x18>)
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	200013a0 	.word	0x200013a0

08007c08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]

}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	4603      	mov	r3, r0
 8007c24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c26:	2300      	movs	r3, #0
 8007c28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c2a:	79fb      	ldrb	r3, [r7, #7]
 8007c2c:	2b03      	cmp	r3, #3
 8007c2e:	d817      	bhi.n	8007c60 <USBD_Get_USB_Status+0x44>
 8007c30:	a201      	add	r2, pc, #4	; (adr r2, 8007c38 <USBD_Get_USB_Status+0x1c>)
 8007c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c36:	bf00      	nop
 8007c38:	08007c49 	.word	0x08007c49
 8007c3c:	08007c4f 	.word	0x08007c4f
 8007c40:	08007c55 	.word	0x08007c55
 8007c44:	08007c5b 	.word	0x08007c5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c4c:	e00b      	b.n	8007c66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	73fb      	strb	r3, [r7, #15]
    break;
 8007c52:	e008      	b.n	8007c66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c54:	2301      	movs	r3, #1
 8007c56:	73fb      	strb	r3, [r7, #15]
    break;
 8007c58:	e005      	b.n	8007c66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c5e:	e002      	b.n	8007c66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007c60:	2303      	movs	r3, #3
 8007c62:	73fb      	strb	r3, [r7, #15]
    break;
 8007c64:	bf00      	nop
  }
  return usb_status;
 8007c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3714      	adds	r7, #20
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <__libc_init_array>:
 8007c74:	b570      	push	{r4, r5, r6, lr}
 8007c76:	4d0d      	ldr	r5, [pc, #52]	; (8007cac <__libc_init_array+0x38>)
 8007c78:	4c0d      	ldr	r4, [pc, #52]	; (8007cb0 <__libc_init_array+0x3c>)
 8007c7a:	1b64      	subs	r4, r4, r5
 8007c7c:	10a4      	asrs	r4, r4, #2
 8007c7e:	2600      	movs	r6, #0
 8007c80:	42a6      	cmp	r6, r4
 8007c82:	d109      	bne.n	8007c98 <__libc_init_array+0x24>
 8007c84:	4d0b      	ldr	r5, [pc, #44]	; (8007cb4 <__libc_init_array+0x40>)
 8007c86:	4c0c      	ldr	r4, [pc, #48]	; (8007cb8 <__libc_init_array+0x44>)
 8007c88:	f000 f820 	bl	8007ccc <_init>
 8007c8c:	1b64      	subs	r4, r4, r5
 8007c8e:	10a4      	asrs	r4, r4, #2
 8007c90:	2600      	movs	r6, #0
 8007c92:	42a6      	cmp	r6, r4
 8007c94:	d105      	bne.n	8007ca2 <__libc_init_array+0x2e>
 8007c96:	bd70      	pop	{r4, r5, r6, pc}
 8007c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c9c:	4798      	blx	r3
 8007c9e:	3601      	adds	r6, #1
 8007ca0:	e7ee      	b.n	8007c80 <__libc_init_array+0xc>
 8007ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ca6:	4798      	blx	r3
 8007ca8:	3601      	adds	r6, #1
 8007caa:	e7f2      	b.n	8007c92 <__libc_init_array+0x1e>
 8007cac:	08007d4c 	.word	0x08007d4c
 8007cb0:	08007d4c 	.word	0x08007d4c
 8007cb4:	08007d4c 	.word	0x08007d4c
 8007cb8:	08007d50 	.word	0x08007d50

08007cbc <memset>:
 8007cbc:	4402      	add	r2, r0
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d100      	bne.n	8007cc6 <memset+0xa>
 8007cc4:	4770      	bx	lr
 8007cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8007cca:	e7f9      	b.n	8007cc0 <memset+0x4>

08007ccc <_init>:
 8007ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cce:	bf00      	nop
 8007cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cd2:	bc08      	pop	{r3}
 8007cd4:	469e      	mov	lr, r3
 8007cd6:	4770      	bx	lr

08007cd8 <_fini>:
 8007cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cda:	bf00      	nop
 8007cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cde:	bc08      	pop	{r3}
 8007ce0:	469e      	mov	lr, r3
 8007ce2:	4770      	bx	lr
